LavaPack.loadBundle([[2192,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){t.exports={openrpc:"1.2.4",info:{title:"JSON-RPC API",version:"1.0.0",description:"This section provides an interactive reference for MetaMask's Wallet JSON-RPC API. The API builds on a set of standard Ethereum methods with MetaMask-specific enhancements, and is designed for seamless integration into dapps."},methods:[{name:"wallet_addEthereumChain",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Multichain"}],summary:"Adds an Ethereum chain to the wallet.",description:"Creates a confirmation asking the user to add the specified chain to the wallet application. The caller must specify a chain ID and some chain metadata. Specified by [EIP-3085](https://eips.ethereum.org/EIPS/eip-3085).",params:[{name:"Chain",schema:{$ref:"#/components/schemas/AddEthereumChainParameter"}}],errors:[{code:-32602,message:"Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${blockExplorerUrls}"},{code:-32602,message:"Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}"},{code:-32602,message:'Invalid chain ID "${_chainId}": numerical value greater than max safe value. Received:\n${chainId}'},{code:-32602,message:"May not specify default MetaMask chain."},{code:-32602,message:"Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${ticker}"},{code:-32602,message:"nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${ticker}"}],result:{name:"Null response",description:"This method returns `null` if the chain is added.",schema:{type:"null"}},examples:[{name:"wallet_addEthereumChain example",params:[{name:"Chain",value:{chainId:"0x64",chainName:"Gnosis",rpcUrls:["https://rpc.gnosischain.com"],iconUrls:["https://xdaichain.com/fake/example/url/xdai.svg","https://xdaichain.com/fake/example/url/xdai.png"],nativeCurrency:{name:"XDAI",symbol:"XDAI",decimals:18},blockExplorerUrls:["https://blockscout.com/poa/xdai/"]}}],result:{name:"Null response",value:"null"}}]},{name:"wallet_switchEthereumChain",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Switches the wallet's active Ethereum chain.",description:"Requests that the wallet switches its active Ethereum chain. Specified by [EIP-3326](https://eips.ethereum.org/EIPS/eip-3326).",params:[{name:"Chain",schema:{title:"Chain",description:"Object containing the chain ID to switch to.",type:"object",required:["chainId"],properties:{chainId:{description:"The chain ID as a `0x`-prefixed hexadecimal string, as returned by the `eth_chainId` method.",type:"string"}}}}],result:{name:"Null response",description:"This method returns `null` if the active chain is switched.",schema:{type:"null"}},errors:[{code:4902,message:"Unrecognized chain ID. Try adding the chain using wallet_addEthereumChain first."}],examples:[{name:"wallet_switchEthereumChain example",params:[{name:"Chain",value:{chainId:"0x64"}}],result:{name:"Null response",value:"null"}}]},{name:"wallet_getPermissions",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Gets the user's permissions.",description:"Gets the user's permissions. Specified by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",params:[],result:{name:"Permissions list",schema:{$ref:"#/components/schemas/PermissionsList"}},examples:[{name:"wallet_getPermissions example",params:[],result:{name:"Permission list",value:{eth_accounts:{}}}}]},{name:"wallet_requestPermissions",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Requests additional permissions.",description:"Requests additional permissions from the user. This method accepts a single permission per call. Specified by [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).",params:[{name:"Permission",required:!0,schema:{title:"Permission",description:"Object containing the permission to request.",type:"object",properties:{permission_name:{type:"object",description:"The permission object. `permission_name` is the name of the permission being requested.",additionalProperties:!0}}}}],result:{name:"Permissions list",schema:{$ref:"#/components/schemas/PermissionsList"}},examples:[{name:"wallet_requestPermissions example",params:[{name:"Permission",value:{eth_accounts:{}}}],result:{name:"Permission list",value:{eth_accounts:{}}}}],errors:[{$ref:"#/components/errors/UserRejected"}]},{name:"wallet_revokePermissions",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Experimental"}],summary:"Revokes the current dapp permissions.",description:"Revokes previously granted permissions for the current dapp identified by its origin. This method accepts a single permission per call. Specified by [MIP-2](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md) and only available for the MetaMask browser extension.",params:[{name:"Permission",required:!0,schema:{title:"Permission",description:"Object containing the permission to revoke.",type:"object",properties:{permission_name:{type:"object",description:"The permission object. `permission_name` is the name of the permission being revoked.",additionalProperties:!0}}}}],result:{name:"Null response",description:"This method returns `null` if the permission is revoked.",schema:{type:"null"}},errors:[],examples:[{name:"wallet_revokePermissions example",params:[{name:"Permission",value:{eth_accounts:{}}}],result:{name:"Null response",value:"null"}}]},{name:"personal_sign",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],summary:"Presents a plain text signature challenge to the user.",description:"Presents a plain text signature challenge to the user and returns the signed response. Prepends a safe prefix to the signed message to prevent the challenge tricking users into signing a financial transaction. <br><br> MetaMask implements `personal_sign` similarly to the Go Ethereum client's `eth_sign` implementation. MetaMask's `personal_sign` doesn't accept a password. <br><br> This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",deprecated:!1,params:[{name:"Challenge",required:!0,description:"A hex-encoded UTF-8 string to present to the user. See how to encode a string like this in the [`browser-string-hexer`](https://github.com/danfinlay/browser-string-hexer) module.",schema:{type:"string",pattern:"^0x[a-fA-F\\d]+$"}},{name:"Address",required:!0,description:"The address of the requested signing account.",schema:{type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}}],result:{name:"Signature",description:"A hex-encoded signature.",schema:{type:"string",pattern:"^0x[0-9a-f]*$"}},examples:[{name:"personal_sign example",params:[{name:"Challenge",value:"0x506c65617365207369676e2074686973206d65737361676520746f20636f6e6669726d20796f7572206964656e746974792e"},{name:"Address",value:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7"}],result:{name:"Signature",value:"0x43d7215ebe96c09a5adac69fc76dea5647286b501954ea273e417cf65e6c80e1db4891826375a7de02467a3e01caf125f64c851a8e9ee9467fd6f7e83523b2115bed8e79d527a85e28a36807d79b85fc551b5c15c1ead2e43456c31f565219203db2aed86cb3601b33ec3b410836d4be7718c6148dc9ac82ecc0a04c5edecd8914"}}]},{name:"eth_signTypedData_v4",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],summary:"Presents a structured data message for the user to sign.",description:"Presents a data message for the user to sign in a structured and readable format and returns the signed response. Introduced by [EIP-712](https://eips.ethereum.org/EIPS/eip-712). This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",params:[{name:"Address",required:!0,description:"The address of the requested signing account.",schema:{type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}},{name:"Typed data",required:!0,schema:{$ref:"#/components/schemas/TypedData"}}],result:{name:"Signature",description:"A hex-encoded signature.",schema:{type:"string",pattern:"^0x[0-9a-f]*$"}},examples:[{name:"eth_SignTypedData_v4 example",params:[{name:"Address",value:"0x0000000000000000000000000000000000000000"},{name:"Typed data",value:{types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"},{name:"verifyingContract",type:"address"}],Person:[{name:"name",type:"string"},{name:"wallet",type:"address"}],Mail:[{name:"from",type:"Person"},{name:"to",type:"Person"},{name:"contents",type:"string"}]},primaryType:"Mail",domain:{name:"Ether Mail",version:"1",chainId:1,verifyingContract:"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"},message:{from:{name:"Cow",wallet:"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"},to:{name:"Bob",wallet:"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"},contents:"Hello, Bob!"}}}],result:{name:"Signature",value:"0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c"}}]},{name:"wallet_registerOnboarding",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Multichain"}],summary:"Redirects the user back to the site after onboarding.",description:"Registers the requesting site with MetaMask as the initiator of onboarding, enabling MetaMask to redirect the user back to the site after onboarding. Returns a promise that resolves to `true`, or rejects the request if there's an error. Instead of calling this method directly, you should use the [`@metamask/onboarding`](https://github.com/MetaMask/metamask-onboarding) library.",params:[],result:{name:"Registered",description:"`true` if the request was successful, `false` otherwise.",schema:{type:"boolean"}},examples:[{name:"wallet_registerOnboarding example",params:[],result:{name:"Registered",value:!0}}]},{name:"wallet_watchAsset",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Experimental"},{$ref:"#/components/tags/Multichain"}],summary:"Tracks a token in MetaMask.",description:"Requests that the user track the specified token in MetaMask. Returns a boolean indicating if the token was successfully added. Once added, the token is indistinguishable from those added using legacy methods, such as a centralized registry. Introduced by [EIP-747](https://eips.ethereum.org/EIPS/eip-747).",paramStructure:"by-name",params:[{name:"type",schema:{type:"string",description:"The token type (`ERC20`, `ERC721`, or `ERC1155`). Support for ERC-721 and ERC-1155 tokens is experimental and currently only available on the extension (not on mobile). See [MIP-1](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-1.md) and the [MIP proposal lifecycle](https://github.com/MetaMask/metamask-improvement-proposals/blob/main/PROCESS-GUIDE.md#proposal-lifecycle) for more information.",enum:["ERC20","ERC721","ERC1155"]},required:!0},{name:"options",schema:{description:"An object containing information about the token.",type:"object",required:["address"],properties:{address:{description:"The address of the token contract.",type:"string"},symbol:{description:"A ticker symbol or shorthand, up to 11 characters (optional for ERC-20 tokens).",minLength:2,maxLength:11,type:"string"},decimals:{description:"The number of token decimals (optional for ERC-20 tokens).",type:"number"},image:{description:"A string URL of the token logo (optional for ERC-20 tokens).",type:"string"},tokenId:{description:"The unique identifier of the NFT (required for ERC-721 and ERC-1155 tokens).",type:"string"}}}}],errors:[{code:-32602,message:"Must specify address, symbol, and decimals."},{code:-32602,message:"Invalid symbol: not a string."},{code:-32602,message:"Invalid symbol '${symbol}': longer than 11 characters."},{code:-32602,message:"Invalid decimals '${decimals}': must be 0 <= 36."},{code:-32602,message:"Invalid address '${address}'."},{code:-32602,message:"Asset type is required."},{code:-32602,message:"Both address and tokenId are required."},{code:-32602,message:"Invalid address."},{code:-32e3,message:"Suggested NFT is not owned by the selected account."},{code:-32e3,message:"Suggested NFT of type ${standard} does not match received type ${type}."},{code:-32002,message:"Unable to verify ownership. Possibly because the standard is not supported or the user's currently selected network does not match the chain of the asset in question."}],result:{name:"Added",description:"`true` if the token was added, `false` otherwise.",schema:{type:"boolean"}},examples:[{name:"wallet_watchAsset ERC-20 example",params:[{name:"type",value:"ERC20"},{name:"options",value:{address:"0xb60e8dd61c5d32be8058bb8eb970870f07233155",symbol:"FOO",decimals:18,image:"https://foo.io/token-image.svg"}}],result:{name:"Added",value:!0}},{name:"wallet_watchAsset ERC-721 example",params:[{name:"type",value:"ERC721"},{name:"options",value:{address:"0x123456789abcdef0123456789abcdef01234567",tokenId:"42"}}],result:{name:"Added",value:!0}},{name:"wallet_watchAsset ERC-1155 example",params:[{name:"type",value:"ERC1155"},{name:"options",value:{address:"0xabcdef0123456789abcdef0123456789abcdef01",tokenId:"1337"}}],result:{name:"Added",value:!0}}]},{name:"wallet_scanQRCode",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Mobile"},{$ref:"#/components/tags/Multichain"}],summary:"Requests that the user scan a QR code.",description:"Requests that the user scan a QR code using their device camera. Introduced by [EIP-945](https://github.com/ethereum/EIPs/issues/945).",params:[{name:"Regex",required:!1,description:"A regular expression (regex) string for matching arbitrary QR code strings.",schema:{type:"string",title:"regex"}}],result:{name:"QR code string",description:"A string corresponding to the scanned QR code. If a regex string is provided, the resulting string matches it. If no regex string is provided, the resulting string matches an Ethereum address. If neither condition is met, the method returns an error.",schema:{type:"string",title:"QR code string"}}},{name:"wallet_sendCalls",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Sends a batch of calls.",description:"Requests that the wallet submits a batch of calls. Specified by [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).",params:[{name:"Calls",required:!0,schema:{$ref:"#/components/schemas/SendCallsParameter"}}],result:{name:"Batch result",schema:{description:"An object containing information about the sent batch.",type:"object",properties:{id:{description:"The ID of the batch of calls.",type:"string"},capabilities:{description:"Wallets can use this object to attach capability-specific metadata.",type:"object"}}}},errors:[{$ref:"#/components/errors/InvalidParams"},{code:-32e3,message:"Version not supported."},{$ref:"#/components/errors/UserRejected"},{$ref:"#/components/errors/Unauthorized"},{code:5700,message:"The wallet does not support a capability that was not marked as optional."},{code:5710,message:"EIP-7702 not supported on the specified chain ID."},{code:5720,message:"There is already a batch submitted with the specified batch ID."},{code:5740,message:"The batch is too large for the wallet to process."},{code:5750,message:"EIP-7702 upgrade rejected for this chain and account."}],examples:[{name:"wallet_sendCalls example",params:[{name:"Calls",value:{version:"2.0.0",from:"0xd46e8dd67c5d32be8058bb8eb970870f07244567",chainId:"0xaa36a7",atomicRequired:!0,calls:[{to:"0x54f1C1965B355e1AB9ec3465616136be35bb5Ff7",value:"0x0"},{to:"0x2D48e6f5Ae053e4E918d2be53570961D880905F2",value:"0x0"}]}}],result:{name:"Batch result",value:{id:"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"}}}]},{name:"wallet_getCallsStatus",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Gets the status of a call batch.",description:"Gets the status of a batch of calls that was previously sent using `wallet_sendCalls`. Specified by [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).",params:[{name:"Batch ID",required:!0,description:"The ID of a batch of calls (the `id` value returned by `wallet_sendCalls`).",schema:{type:"string"}}],result:{name:"Batch status",schema:{description:"An object containing status information of the batch of calls.",type:"object",properties:{version:{description:"The version of the API format.",type:"string"},id:{description:"The ID of the batch of calls.",$ref:"#/components/schemas/uint"},chainId:{description:"The chain ID of the calls.",$ref:"#/components/schemas/uint"},status:{description:"The status code of the batch of calls. Possible values are: <br> <ul>\n  <li>`100` - Pending</li>\n  <li>`200` - Confirmed</li>\n  <li>`400` - Failed offchain</li>\n  <li>`500` - Reverted</li>\n  <li>`600` - Partially reverted</li>\n</ul>",type:"number"},atomic:{description:"`true` if the wallet executed the calls atomically. `false` if the wallet executed the calls non-atomically.",type:"boolean"},receipts:{description:"An array of transaction receipts. If the wallet executed the calls atomically, a single receipt or an array of receipts may be returned, corresponding to how the batch of calls were included onchain.",type:"array",items:{title:"Receipt",description:"A transaction receipt object.",type:"object",properties:{logs:{description:"An array of log objects.",type:"array",items:{title:"Log",description:"An object containing information about the log.",type:"object",properties:{address:{description:"The address that generated the log.",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"},data:{description:"The data of the log.",type:"string",pattern:"^0x[0-9a-f]*$"},topics:{description:"An array of log topics.",type:"array",items:{title:"Topic",description:"A log topic.",type:"string",pattern:"^0x[0-9a-f]*$"}}}}},status:{description:"The status of the transaction. `0x1` indicates success, and `0x0` indicates failure.",type:"string",pattern:"^0x[0-1]$"},blockHash:{description:"The hash of the block containing the transaction.",type:"string",pattern:"^0x[0-9a-f]{64}$"},blockNumber:{description:"The number of the block containing the transaction.",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},gasUsed:{description:"The amount of gas used by the transaction.",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},transactionHash:{description:"The hash of the transaction.",type:"string",pattern:"^0x[0-9a-f]{64}$"}},additionalProperties:!0}},capabilities:{description:"Capabilities associated with the batch of calls.",type:"object",additionalProperties:!0}}}},errors:[{$ref:"#/components/errors/InvalidParams"},{$ref:"#/components/errors/Unauthorized"},{code:5730,message:"No matching bundle found."}],examples:[{name:"wallet_getCallsStatus example",params:[{name:"Batch ID",value:"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"}],result:{name:"Batch status",value:{version:"2.0.0",chainId:"0xaa36a7",id:"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",status:200,atomic:!0,receipts:[{logs:[{address:"0xa922b54716264130634d6ff183747a8ead91a40b",topics:["0x5a2a90727cc9d000dd060b1132a5c977c9702bb3a52afe360c9c22f0e9451a68"],data:"0xabcd"}],status:"0x1",blockHash:"0xf19bbafd9fd0124ec110b848e8de4ab4f62bf60c189524e54213285e7f540d4a",blockNumber:"0xabcd",gasUsed:"0xdef",transactionHash:"0x9b7bb827c2e5e3c1a0a44dc53e573aa0b3af3bd1f9f5ed03071b100bb039eaff"}]}}}]},{name:"wallet_getCapabilities",tags:[{$ref:"#/components/tags/MetaMask"}],summary:"Gets the capabilities of the wallet.",description:"Returns information about the wallet's support for the `atomic` capability. The `atomic` capability specifies how the wallet will execute batches of transactions sent using `wallet_sendCalls`. `wallet_getCapabilities` is specified by [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).",params:[{name:"Address",description:"A wallet address.",required:!0,schema:{type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}},{name:"Chain IDs",description:"An array of chain IDs to get capabilities for.",schema:{type:"array",items:{title:"Chain ID",description:"An [EIP-155](https://eips.ethereum.org/EIPS/eip-155) chain ID in hexadecimal format.",$ref:"#/components/schemas/uint"}}}],result:{name:"Capabilities",schema:{description:"An object specifying the status of the `atomic` capability for specific [EIP-155](https://eips.ethereum.org/EIPS/eip-155) chain IDs. For each chain, the `atomic` capability can have a `status` of: <br> <ul>\n  <li>`supported` - The wallet will execute calls sent using\n        `wallet_sendCalls` atomically.</li>\n  <li>`ready` - The wallet can upgrade to `supported` pending user\n          approval to upgrade their account via EIP-7702.</li>\n</ul> If the `atomic` capability is not `supported` or `ready` for a specified chain ID, the wallet will not return anything for that chain ID.",type:"object"}},errors:[{$ref:"#/components/errors/InvalidParams"},{$ref:"#/components/errors/Unauthorized"}],examples:[{name:"wallet_getCapabilities example",params:[{name:"Address",value:"0xd46e8dd67c5d32be8058bb8eb970870f07244567"},{name:"Chain IDs",value:["0xaa36a7"]}],result:{name:"Capabilities",value:{"0xaa36a7":{atomic:{status:"ready"}}}}}]},{name:"eth_requestAccounts",tags:[{$ref:"#/components/tags/MetaMask"}],description:"Requests that the user provide access to one or more Ethereum addresses. This method is specified by [EIP-1102](https://eips.ethereum.org/EIPS/eip-1102). Internally, this method calls `wallet_requestPermissions` for permission to call `eth_accounts`.",summary:"Requests that the user provide access to addresses.",params:[],result:{name:"Address list",schema:{type:"array",description:"An array of Ethereum addresses that the user has authorized the dapp to access.",items:{title:"Address",description:"A hex-encoded address.",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}}},errors:[{$ref:"#/components/errors/UserRejected"}],examples:[{name:"eth_requestAccounts example",params:[],result:{name:"Address list",value:["0xa77392123a1085f75e62eec7dea7e0e1e5142d5f"]}}]},{name:"eth_accounts",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"}],description:"Returns a list of addresses that the user has authorized the dapp to access. This method requires calling `wallet_requestPermissions` for permission. We recommend using `eth_requestAccounts`, which internally calls `wallet_requestPermission`.",summary:"Gets a list of authorized addresses.",params:[],result:{name:"Address list",schema:{type:"array",description:"An array of Ethereum addresses that the user has authorized the dapp to access.",items:{title:"Address",description:"A hex-encoded address.",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"}}},examples:[{name:"eth_accounts example",params:[],result:{name:"Address list",value:["0xa77392123a1085f75e62eec7dea7e0e1e5142d5f"]}}]},{name:"eth_sendTransaction",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Multichain"}],description:"Creates a new wallet confirmation to make an Ethereum transaction from the user's account. This method requires that the user has granted permission to interact with their account first, so make sure to call `eth_requestAccounts` (recommended) or `wallet_requestPermissions` first.",summary:"Initiates a new transaction.",params:[{name:"Transaction",required:!0,description:"The transaction object to sign and send.",schema:{type:"object",title:"Transaction",description:"The parameters to customize a transaction. If a `to` address is not provided, the transaction is assumed to be a contract creation transaction, and the `data` field is used as the contract initialization code. `gasPrice` cannot be used together with `maxPriorityFeePerGas` and `maxFeePerGas`.",required:["from"],if:{properties:{to:{not:{type:"string"}}}},then:{required:["data"]},properties:{to:{description:"The recipient's address.",$ref:"#/components/schemas/address"},from:{description:"The sender's address.",$ref:"#/components/schemas/address"},gas:{description:"The maximum amount of gas the transaction is allowed to use.",$ref:"#/components/schemas/uint"},value:{description:"The amount to transfer in wei.",$ref:"#/components/schemas/uint"},data:{description:"The data to include in the transaction. Used for contract creation transactions.",$ref:"#/components/schemas/bytes"},gasPrice:{description:"The gas price the sender is willing to pay to miners in wei. Used in pre-1559 transactions.",$ref:"#/components/schemas/uint"},maxPriorityFeePerGas:{description:"Maximum fee per gas the sender is willing to pay to miners in wei. Used in 1559 transactions.",$ref:"#/components/schemas/uint"},maxFeePerGas:{description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei. Used in 1559 transactions.",$ref:"#/components/schemas/uint"}}}}],result:{name:"Transaction hash",description:"The transaction hash of the sent transaction.",schema:{type:"string",pattern:"^0x[0-9a-f]{64}$"}},errors:[{code:4100,message:"The requested account and/or method has not been authorized by the user."}],examples:[{name:"sendTransaction",params:[{name:"Transaction",value:{to:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7",from:"0xDeaDbeefdEAdbeefdEadbEEFdeadbeefDEADbEEF",gas:"0x76c0",value:"0x8ac7230489e80000",data:"0x",gasPrice:"0x4a817c800"}}],result:{name:"eth_sendTransactionExampleResult",value:"0x4e306b5a5a37532e1734503f7d2427a86f2c992fbe471f5be403b9f734e667c8"}}]},{name:"eth_decrypt",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Deprecated"}],summary:"Decrypts an encrypted message.",description:"This method is deprecated and may be removed in the future.\n\n Requests that MetaMask decrypt the specified encrypted message.\n The message must have been encrypted using the public encryption key of the specified Ethereum address.\n Returns a promise that resolves to the decrypted message, or rejects if the decryption attempt fails.",params:[{name:"EncryptedMessage",required:!0,description:"The encrypted message to decrypt.",schema:{type:"string"}},{name:"Address",required:!0,description:"The address of the Ethereum account that can decrypt the message.",schema:{$ref:"#/components/schemas/address"}}],result:{name:"PermissionsList",schema:{$ref:"#/components/schemas/PermissionsList"}},errors:[{code:4100,message:"The requested account and/or method has not been authorized by the user."}],examples:[{name:"decryptExample",params:[{name:"EncryptedMessage",value:"0x7b2276657273696f6e223a227832353531392d7873616c736132302d706f6c7931333035222c226e6f6e6365223a2243533967507076467071765358704655416679726a7179774e35302b7a747766222c22657068656d5075626c69634b6579223a224372774b61456d2f4b356d6d714239764c376f5872636d6441417757764479324f784c3333527135576e553d222c2263697068657274657874223a2248347a65336e7177572b753174663956343945506167454e343872774f766b6952676244566e47587a38493d227d"},{name:"Address",value:"0xD1F5279BE4B4dD94133A23deE1B23F5bfC0Db1d0"}],result:{name:"eth_decryptExampleResult",value:"Hello, Ethereum!"}}]},{name:"eth_getEncryptionPublicKey",tags:[{$ref:"#/components/tags/MetaMask"},{$ref:"#/components/tags/Restricted"},{$ref:"#/components/tags/Deprecated"}],summary:"Gets a public key used for encryption.",description:"This method is deprecated and may be removed in the future.\n\n Requests that the user share their public encryption key.\n Returns a public encryption key, or rejects if the user denies the request.\n The public key is computed from entropy associated with the specified user account, using the NaCl implementation of the `X25519_XSalsa20_Poly1305` algorithm.",params:[{name:"Address",required:!0,description:"The address of the Ethereum account that can decrypt the message.",schema:{$ref:"#/components/schemas/address"}}],result:{name:"EncryptionKey",schema:{type:"string"}},examples:[{name:"eth_getEncryptionPublicKey",params:[{name:"Address",value:"0x4B0897b0513FdBeEc7C469D9aF4fA6C0752aBea7"}],result:{name:"eth_getEncryptionPublicKeyExampleResult",value:"0x04bfcab3b7ca7e8b3f3b62b2f7f77e9e4b68080bbf8f0f4a1c8f890864d2c7c1d3c45d8b2e3f5f1c27dfeea4c2f5733e90bfc7484e2a690aa9b8ac4559d2e6a8d7"}}]},{name:"web3_clientVersion",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],description:"Returns the current MetaMask client version. This differs slightly per client. For example, the browser extension returns a string like `MetaMask/v10.33.1`, while the mobile app returns a string like `MetaMask/8.1.2/Mobile`.",summary:"Current client version.",params:[],examples:[{name:"MetaMaskClientVersionExample",description:"Example version response from MetaMask.",params:[],result:{name:"MetaMaskClientVersion",description:"The current client version.",value:"MetaMask/v10.33.1"}},{name:"MetaMaskMobileClientVersionExample",description:"Example version response from MetaMask Mobile.",params:[],result:{name:"MetaMaskClientVersion",description:"The current client version.",value:"MetaMask/8.1.2/Mobile"}}],result:{name:"CurrentVersion",description:"The current client version.",schema:{title:"CurrentClientVersion",type:"string"}}},{name:"eth_subscribe",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],summary:"Subscribes to specific Ethereum events, returning a subscription ID used to receive notifications.",description:"Subscribes to specific events on the Ethereum network, such as new blocks, or logs. When an event occurs, a notification is sent to the client with the corresponding data. To stop receiving notifications, the client can unsubscribe using `eth_unsubscribe`.",params:[{name:"subscriptionType",required:!0,schema:{title:"subscriptionType",type:"string",enum:["newHeads","logs"],description:"The type of subscription to create. Must be one of the following:\n1. `newHeads` - New block headers.\n2. `logs` - Logs matching a filter object."}},{name:"filterOptions",required:!1,schema:{title:"filterOptions",type:"object",description:"(Optional) An object containing filter options specific to the subscription type. Only applicable for the `logs` subscription type.",required:["topics"],properties:{address:{type:"string",description:"(Optional) A single address or an array of addresses to filter the logs by."},topics:{type:"array",description:"An array of topics to filter the logs by.",items:{type:"string"}}}}}],result:{name:"subscriptionId",schema:{type:"string"},description:"A unique subscription ID that can be used to unsubscribe or identify incoming notifications."},examples:[{name:"eth_subscribe example",params:[{name:"subscriptionType",value:"newHeads"}],result:{name:"eth_subscribeExampleResult",value:"0x1b84f2cdf29a204b79e450c1939b30c1"}}]},{name:"eth_unsubscribe",tags:[{$ref:"#/components/tags/Ethereum"},{$ref:"#/components/tags/Multichain"}],summary:"Unsubscribes from a specific Ethereum event, using the subscription ID provided by `eth_subscribe`.",description:"Unsubscribes from specific events on the Ethereum network, to which the client has been previously subscribed using `eth_subscribe`. The client must provide the subscription ID obtained from `eth_subscribe` to stop receiving notifications for the corresponding event.",params:[{name:"subscriptionId",required:!0,schema:{type:"string",description:"The unique subscription ID obtained from `eth_subscribe`, used to identify the subscription to be unsubscribed."}}],result:{name:"unsubscribed",schema:{type:"boolean"},description:"A boolean value indicating whether the unsubscription was successful."},examples:[{name:"eth_unsubscribe example",params:[{name:"subscriptionId",value:"0x1b84f2cdf29a204b79e450c1939b30c1"}],result:{name:"eth_unsubscribeExampleResult",value:!0}}]},{name:"eth_blockNumber",summary:"Returns the number of most recent block.",params:[],result:{name:"Block number",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_blockNumber example",params:[],result:{name:"Block number",value:"0x2377"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_call",summary:"Executes a new message call immediately without creating a transaction on the block chain.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/GenericTransaction"}},{name:"Block",required:!1,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Return data",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_call example",params:[{name:"Transaction",value:{to:"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13",value:"0x1"}},{name:"Block",value:"latest"}],result:{name:"Return data",value:"0x"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_chainId",summary:"Returns the chain ID of the current network.",params:[],result:{name:"Chain ID",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_chainId example",params:[],result:{name:"Chain ID",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_coinbase",summary:"Returns the client coinbase address.",params:[],result:{name:"Coinbase address",schema:{$ref:"#/components/schemas/address"}},examples:[{name:"eth_coinbase example",params:[],result:{name:"Coinbase address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_estimateGas",summary:"Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/GenericTransaction"}},{name:"Block",required:!1,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Gas used",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_estimateGas example",params:[{name:"Transaction",value:{from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",to:"0x44aa93095d6749a706051658b970b941c72c1d53",value:"0x1"}}],result:{name:"Gas used",value:"0x5208"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_feeHistory",summary:"Transaction fee history",description:"Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",params:[{name:"blockCount",description:"Requested range of blocks. Clients will return less than the requested range if not all blocks are available.",required:!0,schema:{$ref:"#/components/schemas/uint"}},{name:"newestBlock",description:"Highest block of the requested range.",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"rewardPercentiles",description:"A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",required:!0,schema:{title:"rewardPercentiles",type:"array",items:{title:"rewardPercentile",description:"Floating point value between 0 and 100.",type:"number"}}}],result:{name:"Fee history result",description:"Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",schema:{title:"feeHistoryResults",description:"Fee history results.",type:"object",required:["oldestBlock","baseFeePerGas","gasUsedRatio"],additionalProperties:!1,properties:{oldestBlock:{title:"oldestBlock",description:"Lowest number block of returned range.",$ref:"#/components/schemas/uint"},baseFeePerGas:{title:"baseFeePerGasArray",description:"An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.",type:"array",items:{$ref:"#/components/schemas/uint"}},baseFeePerBlobGas:{title:"baseFeePerBlobGasArray",description:"An array of block base fees per blob gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-4844 blocks.",type:"array",items:{$ref:"#/components/schemas/uint"}},gasUsedRatio:{title:"gasUsedRatio",description:"An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit.",type:"array",items:{$ref:"#/components/schemas/ratio"}},blobGasUsedRatio:{title:"blobGasUsedRatio",description:"An array of block blob gas used ratios. These are calculated as the ratio of blobGasUsed and the max blob gas per block.",type:"array",items:{$ref:"#/components/schemas/ratio"}},reward:{title:"rewardArray",description:"A two-dimensional array of effective priority fees per gas at the requested block percentiles.",type:"array",items:{title:"rewardPercentile",description:"An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",type:"array",items:{title:"rewardPercentile",description:"A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty.",$ref:"#/components/schemas/uint"}}}}}},examples:[{name:"eth_feeHistory example",params:[{name:"blockCount",value:"0x5"},{name:"newestblock",value:"latest"},{name:"rewardPercentiles",value:[20,30]}],result:{name:"Fee history result",value:{oldestblock:"0x10b52f",baseFeePerGas:["0x3fa63a3f","0x37f999ee","0x3e36f20a","0x4099f79a","0x430d532d","0x46fcd4a4"],baseFeePerBlobGas:["0x7b7609c19","0x6dbe41789","0x7223341d4","0x6574a002c","0x7223341d4","0x6574a002c"],gasUsedRatio:[.017712333333333333,.9458865666666667,.6534561,.6517375666666667,.7347769666666667],blobGasUsedRatio:[0,.6666666666666666,0,1,0],reward:[["0x3b9aca00","0x59682f00"],["0x3a13012","0x3a13012"],["0x3a13012","0x3a13012"],["0xf4240","0xf4240"],["0xf4240","0xf4240"]]}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_gasPrice",summary:"Returns the current price per gas in wei.",params:[],result:{name:"Gas price",schema:{title:"Gas price",$ref:"#/components/schemas/uint"}},examples:[{name:"eth_gasPrice example",params:[],result:{name:"Gas price",value:"0x3e8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBalance",summary:"Returns the balance of the account of given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Balance",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_getBalance example",params:[{name:"Address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"},{name:"Block",value:"latest"}],result:{name:"Balance",value:"0x1cfe56f3795885980000"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockByHash",summary:"Returns information about a block by hash.",params:[{name:"Block hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}},{name:"Hydrated transactions",required:!0,schema:{title:"hydrated",type:"boolean"}}],result:{name:"Block information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/Block"}]}},examples:[{name:"eth_getBlockByHash example",params:[{name:"Block hash",value:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c"},{name:"Hydrated transactions",value:!1}],result:{name:"Block information",value:{number:"0x68b3",hash:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c",mixHash:"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d",parentHash:"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d",nonce:"0x378da40ff335b070",sha3Uncles:"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",logsBloom:"0xtransactionsRoot:"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126",stateRoot:"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233",receiptsRoot:"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a",miner:"0xb42b6c4a95406c78ff892d270ad20b22642e102d",difficulty:"0x66e619a",totalDifficulty:"0x1e875d746ae",extraData:"0xd583010502846765746885676f312e37856c696e7578",size:"0x334",gasLimit:"0x47e7c4",gasUsed:"0x37993",timestamp:"0x5835c54d",uncles:[],transactions:["0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc","0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d"],baseFeePerGas:"0x7",withdrawalsRoot:"0x7a4ecf19774d15cf9c15adf0dd8e8a250c128b26c9e2ab2a08d6c9c8ffbd104f",withdrawals:[{index:"0x0",validatorIndex:"0x9d8c0",address:"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",amount:"0x11a33e3760"}],blobGasUsed:"0x0",excessBlobGas:"0x0",parentBeaconBlockRoot:"0x95c4dbd5b19f6fe3cbc3183be85ff4e85ebe75c5b4fc911f1c91e5b7a554a685"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockByNumber",summary:"Returns information about a block by number.",params:[{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"Hydrated transactions",required:!0,schema:{title:"hydrated",type:"boolean"}}],result:{name:"Block information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/Block"}]}},examples:[{name:"eth_getBlockByNumber example",params:[{name:"block",value:"0x68b3"},{name:"Hydrated transactions",value:!1}],result:{name:"Block information",value:{number:"0x68b3",hash:"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c",mixHash:"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d",parentHash:"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d",nonce:"0x378da40ff335b070",sha3Uncles:"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",logsBloom:"0xtransactionsRoot:"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126",stateRoot:"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233",receiptsRoot:"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a",miner:"0xb42b6c4a95406c78ff892d270ad20b22642e102d",difficulty:"0x66e619a",totalDifficulty:"0x1e875d746ae",extraData:"0xd583010502846765746885676f312e37856c696e7578",size:"0x334",gasLimit:"0x47e7c4",gasUsed:"0x37993",timestamp:"0x5835c54d",uncles:[],transactions:["0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc","0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d"],baseFeePerGas:"0x7",withdrawalsRoot:"0x7a4ecf19774d15cf9c15adf0dd8e8a250c128b26c9e2ab2a08d6c9c8ffbd104f",withdrawals:[{index:"0x0",validatorIndex:"0x9d8c0",address:"0xb9d7934878b5fb9610b3fe8a5e441e8fad7e293f",amount:"0x11a33e3760"}],blobGasUsed:"0x0",excessBlobGas:"0x0",parentBeaconBlockRoot:"0x95c4dbd5b19f6fe3cbc3183be85ff4e85ebe75c5b4fc911f1c91e5b7a554a685"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockTransactionCountByHash",summary:"Returns the number of transactions in a block from a block matching the given block hash.",params:[{name:"Block hash",schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Transaction count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Transaction count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getBlockTransactionCountByHash example",params:[{name:"Block hash",value:"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"}],result:{name:"Transaction count",value:"0x8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getBlockTransactionCountByNumber",summary:"Returns the number of transactions in a block matching the given block number.",params:[{name:"Block",schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Transaction count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Transaction count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getBlockTransactionCountByNumber example",params:[{name:"Block",value:"0xe8"}],result:{name:"Transaction count",value:"0x8"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getCode",summary:"Returns code at a given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Bytecode",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_getCode example",params:[{name:"Address",value:"0xa50a51c09a5c451c52bb714527e1974b686d8e77"},{name:"Block",value:"latest"}],result:{name:"Bytecode",value:"0x60806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f2458114604d57806355241077146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b60008190556040805182815290517f199cd93e851e4c78c437891155e2112093f8f15394aa89dab09e38d6ca0727879181900360200190a1505600a165627a7a723058209d8929142720a69bde2ab3bfa2da6217674b984899b62753979743c0470a2ea70029"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getFilterChanges",summary:"Polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs which occurred since last poll.",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getFilterChanges example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getFilterLogs",summary:"Returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getFilterLogs example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getLogs",summary:"Returns an array of all logs matching the specified filter.",params:[{name:"Filter",schema:{$ref:"#/components/schemas/Filter"}}],result:{name:"Log objects",schema:{$ref:"#/components/schemas/FilterResults"}},examples:[{name:"eth_getLogs example",params:[{name:"Filter",value:{fromBlock:"0x137d3c2",toBlock:"0x137d3c3",address:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",topics:[]}}],result:{name:"Log objects",value:[{logIndex:"0x0",removed:!1,blockNumber:"0x233",blockHash:"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5",transactionHash:"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000004",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]},{logIndex:"0x0",removed:!1,blockNumber:"0x238",blockHash:"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed",transactionHash:"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058",transactionIndex:"0x0",address:"0x42699a7612a82f1d9c36148af9c77354759b210b",data:"0x0000000000000000000000000000000000000000000000000000000000000007",topics:["0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3"]}]}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getProof",summary:"Returns the merkle proof for a given account and optionally some storage keys.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"StorageKeys",required:!0,schema:{title:"Storage keys",type:"array",items:{$ref:"#/components/schemas/bytesMax32"}}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Account",schema:{$ref:"#/components/schemas/AccountProof"}},examples:[{name:"eth_getProof example",params:[{name:"Address",value:"0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8"},{name:"StorageKeys",value:["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","0x283s34c8e2b1456f09832c71e5d6a0b4f8c9e1d3a2b5c7f0e6d4a8b2c1f3e5d7"]},{name:"Block",value:"latest"}],result:{name:"Account",value:{accountProof:["0xf90211a06a718c2c9da77c253b12d7b2569657901e37bb691718f5dda1b86157ab1dd5eda0e7f19ed5e21bccc8d3260236b24f80ad88b3634f5d005f37b838881f0e12f1bda0abb301291704e4d92686c0f5f8ebb1734185321559b8d717ffdca95c99591976a0d0c2026bfab65c3b95276bfa82af9dec860b485f8857f293c148d63a2182128fa0c98044ec9a1273a218bed58b478277dd39173ad7b8edb95c200423a6bc8fc25fa056e5a55d9ddccdbf49362857200bbb1f042d61187c9f5f9ddcff5d2f1fc984a2a02a5b7200af424114f99a4b5f0a21c19aac82209e431ed80bfde177adb1004bdfa0026e4374f0518ff44a80fa374838ecb86cc64ac93bb710fea6dff4198f947b27a03fea341d87984673ad523177ed52f278bf4d8f97e6531c8ece932aeede4802f4a0bfe2f4a7fcb78f7e9f080dea7b6977fb1d88c441696e4456dad92b9d34ff0f43a02a3eb5c0edb14626c9c629601027bd60178bb2b688a67cea4d179fc432436615a0747355b8e02f3b884b4ffe5cea1619e32515fea064cca98208591af8c744e894a0874253737bae37f020ad3bb7e3292c7c4a63cdc158af6b33aaa4deaef016dccba03d8192bc1fc6aa1548912e763a0b5013a94399cefad7b47cf388873b2b794068a09b67f9737c6028d796bfd1c5da57a6f45824dc891f848ea0e1f8019d1fb5fba8a0aa871f9de8da85960fcd8a22cdf21c27f11e3966c14a6737ffd414b98dda00b280","0xf90211a0d360be1e1da1a0c32bc4c105833bd531e59d110684007b7c50fb2709002973eca0cf6dd1e350a7031b4e2ab49c899fd8bd47551c8565d8fd8d1d7796c83820c3b1a0eb0a88c29bb33989a589156f7bf07d9efc74034dd9d3f5b73385c3b45c3249bea02783c25f97a6ddb8dc07adf4b176991836d39184b1f678adeda832fff15e3664a00a4e288060045e587774d8a64993a7add73068b16863145e1e8eeb4602e18e19a0340851f4046ad1298962d6e47d05c66329549c839c158748aaad7ae00b943aefa085b127bc2a3bd17604283de21b2b3c9aa8f1d4b7b85c94d8105a46fe32c77688a00f531d62b3c5435324c01009c284fe31277e8d38302b75ea01be89f09e205969a00011c8351c0e3d639ac54b9d3a59de630b16a67de8270d7d6064d0a67e93f9cca048780d32b7f2db88650b51c46f46fd0a68795edee1fd5ecee6eb3595741d9669a0c91afd74eaf8e08a997061a62b354e2516fdc494e8e26cc50ceeb8f4a175608ba0e2c07f1b48fab80eecb340f5882e8c7b32ee416e4045c61f1df646a133487303a01a1eff78435a7a29a29463bdc3486ae81364b00bea82ba0fdf67a110770f2261a04f2eb440ba71c72da5fd7f0e439018d6671dc809f747213a1ea755848124e994a074ff9f37fce99daa3ed01dd763076450022996fc729be2cc43c61ec5182c2366a0b80b36b7b621112592f52390b89748d422e9b1517c4b0203b8176a53f89d4a6680","0xf90211a0b25f283bd01a8c8b2418049f9585bc37ff2c1e2e12eab4b7f64ae1f26647389aa02ad96c150d7c3c9c194d30315456852cf6a0a940e0191ae5d04007454823d4e9a0b220cf7a855e2dbcc0b973134e2e119b982d7d40dbb1b27d99816c41f40e829aa049224431da84cbf1b7ae813abcc9ef4c1dfc1760f6ddc5d57f7354bf3cbf6cc4a015191f879ac115b362f0257fd3eedb789537e836574a5b1abf1c9982ebe3bdfea07913c1b6e7282569d2d421e9fa2257f5d1698e93303bc49b941704287d7aaefea0a526576981ce6fd9f2bd48dd2ca6d5272f2fbdc85f0ee35a295f6ccd97ae8765a0313fad407f0c737c29024c02a890c4ecc12d7771c05ab7b435e5087a7cdef4d9a0d2044603cba9d4afdaf6fd2470e729ef3a65242de71276f20d59accfa6b53a7ca0457caacb9370c09b15f7d904adefd2308be94e23669ba5f43241ffff5f438a0aa09fb2dd45a383a0cc088a72b14117e1e9b7d6889218f3ac7631e8de644c5cb76da0c675dcd4d3fb692b514851c6106e2b09e6f5661d56a0a32ae02e2efc1515c235a074949a59ff1bdba87548510d6e404ec4532f4456dfdec8e753d92fda11a3088ba0a328c6ab1ab8f70db4d23e95bb163c13ba0c508f063a5b1393a4efd7ff375f05a0c722fe3ce796998269373cbb2fc229b2bdf2c43c6c2df003309422e043ce6c03a024e69343286eec44fa4744f6907209116e5383cff3fa98fe81ba06e7e8d4366680","0xf90211a00e99ba2198124b8241ea304551fe973215829e2fbc0438d67922707a2a847432a0bb9ce24fd527879c5fe6dbbec1ef5a05ed9d1ca88e921d140bafbec1112f6a6aa099787fd6c7a1989229c4291ef5267335e66152ce417daea46e66d19cb6f81d1ca0e430ff4b8d5621baa5978673344e78b4d8b4df51431b6e63785267c98a24ce18a0bb3e91a825fe3d42ed270a93e9ad1aabd566c40cb28e622f7f1d7ee967c8afd6a0aa364b0056870c6507bc3262a5f851ecb13684088bdb13996d3cb2db401ce3ffa0a3732eba4c7a6e062665ab5be08acb986c3db87556fb138548cc900ff1e56995a026b088e90c9738b8ce16e853107a937a50d52726a24f9f6ce60f587762eb45a2a006c9d5bc3c064b5c1fb565bff91cace9161c64ae653a329610c1dcf34d434429a06c16df2edc70656d322d0c2403bad7d45bc790ffc3e7adeef856d98ea6afc91ba0ae05ed5d6c34b5da29c2e94d7880aeba0906f95f4ec10b132a1d4766a0701c98a01470a86aa350d1ada0c082eac75de828a851f9c8c7c4aa49b1556fe3a5574966a0334eef025100a6da1033710dd98e0475f29d3d7e397caf618ca71c336c5f4f49a0ef0b3abbebcff34d6a8a8f5cdbfbd154ab3452b58dcb09de58ec983644963675a041857e865ec38e200a13bc1a3cb71c7d69aeef7ffdee8be515c9a5b691ce091fa059edd0eb3bbec36bbf38a19802d4646c00ba821ab55fdeea12e15bab62c4e1e580","0xf90211a0af0c7fa65ffcb84c31e68c1cf00e1a20bf8bb497c39883e19b66a99975b03431a0c492cab3623eb7926069794c3c718733e16c5fd0d4a13fb7c752ee9809aac7ada05003cea7132aa70d6f36731d60640a90bcd8f4fd493e4540d5ab1b4943679c0ca0fd700683405b1d2306b586dd3b5b2f92f1692fae20d17cd8b8e59d09b9c6670da01db8683910e46e56e8afeb9fe2b7c35382e5a0914d7b0dd8f0e8cb9981ba7435a0fa7f75d73aa73c35824387bec81388315caa4aee3f4f5562f971beb256c62d49a0ee478e420d83f413e8568dacfd5d83f83a5dd7c45f494b504828e5dc962f0e3ea094b95444a917ac94a675681f6bf851172ad0969801a783a63a71edafed45e7a7a0a0c46586e109abe80fe50361dd582e3f143cb416828239faa43bb2b890869501a0ae051d5d43634c68bf9c97823256cc68580f194dfdbd0c301140c7ca5853430ca0660b9365bb77ec9cdc6eb95516c162dca20727c6f828dbbeb1ae110dde4d3134a09feb1b75e84ff6722e4d837bfb6d207b6ee3b21b86844a01140ce293813b49a1a0ed58a70b04efa3bdc0babe2abfa20824a75d61d52291bfdb5cf08597800764d6a020a2d5d3a83f9e35ad9fd1c448626d90af0eb3efefaa4f2f93207b4096ef5507a0fc8efc4484dcf0a54f0574de9aaade0dcff6ec3599edb9f82efb26b6566dcaeaa032f7e79856db3fd984f72bb2c93d4dab328198d355a61c975fab1f08bdb2046580"],balance:"0x0",codeHash:"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",nonce:"0x0",storageHash:"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",storageProof:[{key:"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",proof:["0xf90211a0c87222cccea2bf32759fcee9dbaacbe3ea4165dd6184af6773651c5e00e34a8ba0be90e6e5d1a67ab5587779c60ac136d6a96db62b84c04998a5f03a367346abd6a05344aa1c9ca2e3e56bf98fd718ec43728578d148e1967fbaf8bf17a2a073a0bda011a2f9312c3308640a0d6ceeae218747290f23806067456da1d444c65abae437a0b3097a108bfce79af6699da4ae3003cd4929f0b4576aad655c31cb725bde84c7a0c133d3c637e174f36a73c22b1039eb003da6374bc0929321241badb3efa3c4a9a0f13059f2301ad9862ce02e3f7f3f2c9ab78eb30583764d73654f7f1f8b1e86fda06544e3915748b18204e09df75ff20d2fa6bd8121e2e669699012d54590383d6fa070e3a8e093691581d58fadb560b510262a758037632cd8670d3a36df828976b7a062a88a2900544dc76a32255a6b2b2a2eef8fa68279700c00adc7508286702552a0a474aeebd5603dfce46a6ecd1ecd519068dc034a544fde03ac42d4018e60a334a0b7d528fc41c8fdc8ea18c6e7d0099270c777ec1403cf879d1f5134bdc12a6c6ca04440f1242e42c5bfa7c536591ab89c8e84bea417435871c32eef1e25295b20daa06a5dcfe3cc84cff9d3e3c3ae868cfba8f0dd111a90c3f85869dab5b893f96643a026b2fb9dd7d08b0ed2f1c44fbf875011412a384f86f751c92e1013248d4aa371a0c75597b2b789fc4e939b71937390ce9d7d53159431328ac52180eef08ef200f280","0xf90191a0f0c5b800b542001597f2b7a8e106ac0e2849d2cc1df1727ac35c4ea3965f1c9180a08537f2e248702a6ae2a57e9110a5740f5772c876389739ac90debd6a0692713ea00b3a26a05b5494fb3ff6f0b3897688a5581066b20b07ebab9252d169d928717fa0a9a54d84976d134d6dba06a65064c7f3a964a75947d452db6f6bb4b6c47b43aaa01e2a1ed3d1572b872bbf09ee44d2ed737da31f01de3c0f4b4e1f046740066461a076f251d160b9a02eb0b5c1d83b61c9cdd4f37361705e79a45529bf49801fb824a0774a01a624cb14a50d17f2fe4b7ae6af8a67bbb029177ccc3dd729a734484d3ea05921b8a19aebe4fff5a36071e311778f9b93459183fdf7f6d870b401fa25dcbba0c8d71dd13d2806e2865a5c2cfa447f626471bf0b66182a8fd07230434e1cad2680a0e9864fdfaf3693b2602f56cd938ccd494b8634b1f91800ef02203a3609ca4c21a0c69d174ad6b6e58b0bd05914352839ec60915cd066dd2bee2a48016139687f21a0513dd5514fd6bad56871711441d38de2821cc6913cb192416b0385f025650731808080"],value:"0x1"}]}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getStorageAt",summary:"Returns the value from a storage position at a given address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Storage slot",required:!0,schema:{$ref:"#/components/schemas/uint256"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Value",schema:{$ref:"#/components/schemas/bytes"}},examples:[{name:"eth_getStorageAt example",params:[{name:"Address",value:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"},{name:"Storage slot",value:"0x0"},{name:"Block",value:"latest"}],result:{name:"Value",value:"0x0000000000000000000000000000000000000000000000000000000000000000"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByBlockHashAndIndex",summary:"Returns information about a transaction by block hash and transaction index position.",params:[{name:"Block hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}},{name:"Transaction index",required:!0,schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByBlockHashAndIndex example",params:[{name:"Block hash",value:"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7"},{name:"Transaction index",value:"0x2"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByBlockNumberAndIndex",summary:"Returns information about a transaction by block number and transaction index position.",params:[{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTag"}},{name:"Transaction index",required:!0,schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByBlockNumberAndIndex example",params:[{name:"Block",value:"0x1442e"},{name:"Transaction index",value:"0x2"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionByHash",summary:"Returns the information about a transaction requested by transaction hash.",params:[{name:"Transaction hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Transaction information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/TransactionInfo"}]}},examples:[{name:"eth_getTransactionByHash example",params:[{name:"Transaction hash",value:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44"}],result:{name:"Transaction information",value:{blockHash:"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda",blockNumber:"0x422",chainId:2018,from:"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73",gas:"0x5208",gasPrice:"0x3b9aca00",hash:"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44",input:"0x",nonce:"0x1",to:"0x627306090abab3a6e1400e9345bc60c78a8bef57",transactionIndex:"0x0",value:"0x4e1003b28d9280000",v:"0xfe7",r:"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3",s:"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionCount",summary:"Returns the number of transactions sent from an address.",params:[{name:"Address",required:!0,schema:{$ref:"#/components/schemas/address"}},{name:"Block",required:!0,schema:{$ref:"#/components/schemas/BlockNumberOrTagOrHash"}}],result:{name:"Transaction count",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_getTransactionCount example",params:[{name:"Address",value:"0xc94770007dda54cF92009BFF0dE90c06F603a09f"},{name:"Block",value:"latest"}],result:{name:"Transaction count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getTransactionReceipt",summary:"Returns the receipt of a transaction by transaction hash.",params:[{name:"Transaction hash",required:!0,schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Receipt information",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{$ref:"#/components/schemas/ReceiptInfo"}]}},examples:[{name:"eth_getTransactionReceipt example",params:[{name:"Transaction hash",value:"0x504ce587a65bdbdb6414a0c6c16d86a04dd79bfcc4f2950eec9634b30ce5370f"}],result:{name:"Receipt information",value:{blockHash:"0xe7212a92cfb9b06addc80dec2a0dfae9ea94fd344efeb157c41e12994fcad60a",blockNumber:"0x50",contractAddress:null,cumulativeGasUsed:"0x5208",from:"0x627306090abab3a6e1400e9345bc60c78a8bef57",gasUsed:"0x5208",blobGasUsed:"0x20000",effectiveGasPrice:"0x1",blobGasPrice:"0x3",logs:[],logsBloom:"0xstatus:"0x1",to:"0xf17f52151ebef6c7334fad080c5704d77216b732",transactionHash:"0xc00e97af59c6f88de163306935f7682af1a34c67245e414537d02e422815efc3",transactionIndex:"0x0"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getUncleCountByBlockHash",summary:"Returns the number of uncles in a block from a block matching the given block hash.",params:[{name:"Block hash",schema:{$ref:"#/components/schemas/hash32"}}],result:{name:"Uncle count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Uncle count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getUncleCountByBlockHash example",params:[{name:"Block hash",value:"0xb3b20624f8f0f86eb50dd04688409e5cea4bd02d700bf6e79e9384d47d6a5a35"}],result:{name:"Uncle count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_getUncleCountByBlockNumber",summary:"Returns the number of transactions in a block matching the given block number.",params:[{name:"Block",schema:{$ref:"#/components/schemas/BlockNumberOrTag"}}],result:{name:"Uncle count",schema:{oneOf:[{$ref:"#/components/schemas/notFound"},{title:"Uncle count",$ref:"#/components/schemas/uint"}]}},examples:[{name:"eth_getUncleCountByBlockNumber example",params:[{name:"Block",value:"0xe8"}],result:{name:"Uncle count",value:"0x1"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newBlockFilter",summary:"Creates a filter in the node, to notify when a new block arrives.",params:[],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newBlockFilter example",params:[],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newFilter",summary:"Creates a filter object, based on filter options, to notify when the state changes (logs).",params:[{name:"Filter",schema:{$ref:"#/components/schemas/Filter"}}],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newFilter example",params:[{name:"Filter",value:{fromBlock:"0x137d3c2",toBlock:"0x137d3c3",address:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",topics:[]}}],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_newPendingTransactionFilter",summary:"Creates a filter in the node, to notify when new pending transactions arrive.",params:[],result:{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}},examples:[{name:"eth_newPendingTransactionFilter example",params:[],result:{name:"Filter identifier",value:"0x01"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_sendRawTransaction",summary:"Submits a raw transaction. You can create and sign a transaction externally using a library such as [web3.js](https://web3js.readthedocs.io/) or [ethers.js](https://docs.ethers.org/). For [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) transactions, the raw form must be the network form. This means it includes the blobs, KZG commitments, and KZG proofs.",params:[{name:"Transaction",required:!0,schema:{$ref:"#/components/schemas/bytes"}}],result:{name:"Transaction hash",schema:{$ref:"#/components/schemas/hash32"}},examples:[{name:"eth_sendRawTransaction example",params:[{name:"Transaction",value:"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833"}],result:{name:"Transaction hash",value:"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_syncing",summary:"Returns an object with data about the sync status or false.",params:[],result:{name:"Syncing status",schema:{$ref:"#/components/schemas/SyncingStatus"}},examples:[{name:"eth_syncing example",params:[],result:{name:"Syncing status",value:{startingBlock:"0x0",currentBlock:"0x1518",highestBlock:"0x9567a3"}}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]},{name:"eth_uninstallFilter",summary:"Uninstalls a filter with given id.",params:[{name:"Filter identifier",schema:{$ref:"#/components/schemas/uint"}}],result:{name:"Success",schema:{type:"boolean"}},examples:[{name:"eth_uninstallFilter example",params:[{name:"Filter identifier",value:"0x01"}],result:{name:"Success",value:!0}}],tags:[{name:"Ethereum API",description:"Ethereum Node JSON-RPC method"},{name:"Multichain API",description:"Multichain JSON-RPC method"}]}],components:{errors:{UserRejected:{code:4001,message:"User rejected the request."},InvalidParams:{code:-32602,message:"The wallet cannot parse the request."},Unauthorized:{code:4100,message:"The requested account and/or method has not been authorized by the user."}},schemas:{TypedData:{title:"Typed data",description:"Object containing information about the typed data to sign.",type:"object",required:["types","primaryType","domain","message"],properties:{types:{type:"object",description:"Object containing type information.",required:["EIP712Domain"],properties:{EIP712Domain:{type:"array",items:{type:"object",title:"Domain separator value",description:"Object containing information about the domain separator value.",properties:{name:{type:"string",description:"Name of the domain separator value."},type:{type:"string",description:"Data type of the domain separator value."}}},description:"An array specifying one or more of the following domain separator values: <br><br> <ul>\n  <li>`name` - The user-readable name of the signing domain, that is, the name of the dapp or the protocol.</li>\n  <li>`version` - The current major version of the signing domain.</li>\n  <li>`chainId` - The chain ID of the network.</li>\n  <li>`verifyingContract` - The address of the contract that will verify the signature.</li>\n  <li>`salt` - A disambiguating salt for the protocol.</li>\n</ul>"}},additionalProperties:{type:"array",required:["name","type"],items:{type:"object",properties:{name:{type:"string"},type:{type:"string"}}}}},domain:{type:"object",description:"Object containing the domain separator values specified in the `EIP712Domain` type."},primaryType:{type:"string",description:"The primary type of the message."},message:{type:"object",description:"The message you're proposing the user to sign."}}},SendCallsParameter:{title:"Calls",description:"An object containing information about a batch of calls.",type:"object",required:["version","from","chainId","atomicRequired","calls"],properties:{version:{description:"The version of the API format. This must be `2.0.0`.",type:"string"},id:{description:"The ID of the batch of calls.",type:"string"},from:{description:"The sender's address.",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"},chainId:{description:"The [EIP-155](https://eips.ethereum.org/EIPS/eip-155) chain ID of the calls. This must match the currently selected network in the wallet.",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},atomicRequired:{description:"`true` if the wallet must execute all calls atomically. If `false`, the wallet may execute the calls sequentially without atomicity. If `false` and the wallet is capable of executing the calls atomically, it may do so.",type:"boolean"},calls:{type:"array",description:"An array of call objects.",items:{title:"Call",description:"An object containing information about the call.",type:"object",properties:{to:{description:"The address of the call's recipient.",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"},data:{description:"The data to send with the call.",type:"string",pattern:"^0x[0-9a-f]*$"},value:{description:"The value to send with the call.",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},capabilities:{description:"Dapps can use this object to communicate with the wallet about supported capabilities.",type:"object"}}}},capabilities:{description:"Dapps can use this object to communicate with the wallet about supported capabilities.",type:"object"}}},AddEthereumChainParameter:{title:"Chain",description:"Object containing information about the chain to add.",type:"object",required:["chainId","chainName","nativeCurrency","rpcUrls"],properties:{chainId:{description:"The chain ID as a `0x`-prefixed hexadecimal string, per the `eth_chainId` method. MetaMask compares this chain ID value with the `eth_chainId` return value. If these values aren't identical, MetaMask rejects the request.",type:"string"},blockExplorerUrls:{description:"(Optional) An array of one or more URLs pointing to block explorer sites for the chain.",type:"array",items:{type:"string",description:"Block explorer URL."}},chainName:{description:"A human-readable name for the chain.",type:"string"},iconUrls:{description:"(Optional) An array of one or more URLs pointing to icons that can be used to visually identify the chain. Note: MetaMask will not currently display these icons. You can still include icon URLs so they are used if MetaMask incorporates them into the display of custom networks in the future.",type:"array",items:{format:"uri",type:"string",description:"Icon URL."}},nativeCurrency:{$ref:"#/components/schemas/NativeCurrency"},rpcUrls:{description:"An array of one or more URLs pointing to RPC endpoints that can be used to communicate with the chain. At least one item is required, and only the first item is used.",type:"array",minItems:1,items:{format:"uri",type:"string",description:"RPC URL."}}}},NativeCurrency:{title:"NativeCurrency",type:"object",description:"An object containing information about the native currency of the chain.",required:["decimals","symbol"],properties:{decimals:{description:"A non-negative integer representing the number of decimals the native currency uses.",minimum:0,type:"integer"},name:{description:"A human-readable name of the native currency.",type:"string"},symbol:{description:"A human-readable symbol of the native currency.",type:"string"}}},Caveats:{title:"Caveats",description:"An array of caveats that specify restrictions on the permission.",type:"array",items:{title:"Caveat",description:"Object containing information about the caveat.",type:"object",properties:{type:{title:"Type",type:"string",description:"Type of caveat."},value:{title:"CaveatValue",description:"Value of the caveat."},name:{title:"Name",type:"string",description:"Name of the caveat."}}}},Permission:{title:"Permission",description:"Object containing information about the permission.",type:"object",properties:{id:{description:"The permission ID.",type:"string"},parentCapability:{description:"The name of the permission being granted. For example, `eth_accounts` or `endowment:permitted-chains`.",type:"string"},invoker:{description:"The URI of the dapp being granted this permission.",type:"string"},caveats:{$ref:"#/components/schemas/Caveats"},date:{description:"The timestamp of the permission request.",type:"number"}}},PermissionsList:{title:"Permissions list",description:"An array of the user's permissions.",type:"array",items:{$ref:"#/components/schemas/Permission"}},address:{title:"hex encoded address",type:"string",pattern:"^0x[0-9a-fA-F]{40}$"},addresses:{title:"hex encoded address",type:"array",items:{$ref:"#/components/schemas/address"}},byte:{title:"hex encoded byte",type:"string",pattern:"^0x([0-9a-fA-F]?){1,2}$"},bytes:{title:"hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]*$"},bytesMax32:{title:"32 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{0,64}$"},bytes8:{title:"8 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{16}$"},bytes32:{title:"32 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{64}$"},bytes48:{title:"48 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{96}$"},bytes96:{title:"96 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{192}$"},bytes256:{title:"256 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{512}$"},bytes65:{title:"65 hex encoded bytes",type:"string",pattern:"^0x[0-9a-f]{130}$"},ratio:{title:"normalized ratio",type:"number",minimum:0,maximum:1},uint:{title:"hex encoded unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]*|0)$"},uint64:{title:"hex encoded 64 bit unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]{0,15})|0$"},uint256:{title:"hex encoded 256 bit unsigned integer",type:"string",pattern:"^0x([1-9a-f]+[0-9a-f]{0,31})|0$"},hash32:{title:"32 byte hex value",type:"string",pattern:"^0x[0-9a-f]{64}$"},notFound:{title:"Not Found (null)",type:"null"},Block:{title:"Block object",type:"object",required:["hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","number","gasLimit","gasUsed","timestamp","extraData","mixHash","nonce","size","transactions","uncles"],additionalProperties:!1,properties:{hash:{title:"Hash",$ref:"#/components/schemas/hash32"},parentHash:{title:"Parent block hash",$ref:"#/components/schemas/hash32"},sha3Uncles:{title:"Ommers hash",$ref:"#/components/schemas/hash32"},miner:{title:"Coinbase",$ref:"#/components/schemas/address"},stateRoot:{title:"State root",$ref:"#/components/schemas/hash32"},transactionsRoot:{title:"Transactions root",$ref:"#/components/schemas/hash32"},receiptsRoot:{title:"Receipts root",$ref:"#/components/schemas/hash32"},logsBloom:{title:"Bloom filter",$ref:"#/components/schemas/bytes256"},difficulty:{title:"Difficulty",$ref:"#/components/schemas/uint"},number:{title:"Number",$ref:"#/components/schemas/uint"},gasLimit:{title:"Gas limit",$ref:"#/components/schemas/uint"},gasUsed:{title:"Gas used",$ref:"#/components/schemas/uint"},timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint"},extraData:{title:"Extra data",$ref:"#/components/schemas/bytes"},mixHash:{title:"Mix hash",$ref:"#/components/schemas/hash32"},nonce:{title:"Nonce",$ref:"#/components/schemas/bytes8"},baseFeePerGas:{title:"Base fee per gas",$ref:"#/components/schemas/uint"},withdrawalsRoot:{title:"Withdrawals root",$ref:"#/components/schemas/hash32"},blobGasUsed:{title:"Blob gas used",$ref:"#/components/schemas/uint"},excessBlobGas:{title:"Excess blob gas",$ref:"#/components/schemas/uint"},parentBeaconBlockRoot:{title:"Parent Beacon Block Root",$ref:"#/components/schemas/hash32"},size:{title:"Block size",$ref:"#/components/schemas/uint"},transactions:{anyOf:[{title:"Transaction hashes",type:"array",items:{$ref:"#/components/schemas/hash32"}},{title:"Full transactions",type:"array",items:{$ref:"#/components/schemas/TransactionInfo"}}]},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/Withdrawal"}},uncles:{title:"Uncles",type:"array",items:{$ref:"#/components/schemas/hash32"}}}},BlockTag:{title:"Block tag",type:"string",enum:["earliest","finalized","safe","latest","pending"],description:"`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"},BlockNumberOrTag:{title:"Block number or tag",oneOf:[{title:"Block number",$ref:"#/components/schemas/uint"},{title:"Block tag",$ref:"#/components/schemas/BlockTag"}]},BlockNumberOrTagOrHash:{title:"Block number, tag, or block hash",anyOf:[{title:"Block number",$ref:"#/components/schemas/uint"},{title:"Block tag",$ref:"#/components/schemas/BlockTag"},{title:"Block hash",$ref:"#/components/schemas/hash32"}]},BadBlock:{title:"Bad block",type:"object",required:["block","hash","rlp"],additionalProperties:!1,properties:{block:{title:"Block",$ref:"#/components/schemas/Block"},hash:{title:"Hash",$ref:"#/components/schemas/hash32"},rlp:{title:"RLP",$ref:"#/components/schemas/bytes"}}},SyncingStatus:{title:"Syncing status",oneOf:[{title:"Syncing progress",type:"object",additionalProperties:!1,properties:{startingBlock:{title:"Starting block",$ref:"#/components/schemas/uint"},currentBlock:{title:"Current block",$ref:"#/components/schemas/uint"},highestBlock:{title:"Highest block",$ref:"#/components/schemas/uint"}}},{title:"Not syncing",description:"Should always return false if not syncing.",type:"boolean"}]},FilterResults:{title:"Filter results",oneOf:[{title:"new block or transaction hashes",type:"array",items:{$ref:"#/components/schemas/hash32"}},{title:"new logs",type:"array",items:{$ref:"#/components/schemas/Log"}}]},Filter:{title:"filter",type:"object",additionalProperties:!1,properties:{fromBlock:{title:"from block",$ref:"#/components/schemas/uint"},toBlock:{title:"to block",$ref:"#/components/schemas/uint"},address:{title:"Address(es)",oneOf:[{title:"Any Address",type:"null"},{title:"Address",$ref:"#/components/schemas/address"},{title:"Addresses",$ref:"#/components/schemas/addresses"}]},topics:{title:"Topics",$ref:"#/components/schemas/FilterTopics"}}},FilterTopics:{title:"Filter Topics",oneOf:[{title:"Any Topic Match",type:"null"},{title:"Specified Filter Topics",type:"array",items:{$ref:"#/components/schemas/FilterTopic"}}]},FilterTopic:{title:"Filter Topic List Entry",oneOf:[{title:"Single Topic Match",$ref:"#/components/schemas/bytes32"},{title:"Multiple Topic Match",type:"array",items:{$ref:"#/components/schemas/bytes32"}}]},Log:{title:"log",type:"object",required:["transactionHash"],additionalProperties:!1,properties:{removed:{title:"removed",type:"boolean"},logIndex:{title:"log index",$ref:"#/components/schemas/uint"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"},transactionHash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},address:{title:"address",$ref:"#/components/schemas/address"},data:{title:"data",$ref:"#/components/schemas/bytes"},topics:{title:"topics",type:"array",items:{$ref:"#/components/schemas/bytes32"}}}},ReceiptInfo:{type:"object",title:"Receipt information",required:["blockHash","blockNumber","from","cumulativeGasUsed","gasUsed","logs","logsBloom","transactionHash","transactionIndex","effectiveGasPrice"],additionalProperties:!1,properties:{type:{title:"type",$ref:"#/components/schemas/byte"},transactionHash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"},blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},from:{title:"from",$ref:"#/components/schemas/address"},to:{title:"to",description:"Address of the receiver or null in a contract creation transaction.",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Recipient Address",$ref:"#/components/schemas/address"}]},cumulativeGasUsed:{title:"cumulative gas used",description:"The sum of gas used by this transaction and all preceding transactions in the same block.",$ref:"#/components/schemas/uint"},gasUsed:{title:"gas used",description:"The amount of gas used for this specific transaction alone.",$ref:"#/components/schemas/uint"},blobGasUsed:{title:"blob gas used",description:"The amount of blob gas used for this specific transaction. Only specified for blob transactions as defined by EIP-4844.",$ref:"#/components/schemas/uint"},contractAddress:{title:"contract address",description:"The contract address created, if the transaction was a contract creation, otherwise null.",oneOf:[{$ref:"#/components/schemas/address"},{title:"Null",type:"null"}]},logs:{title:"logs",type:"array",items:{$ref:"#/components/schemas/Log"}},logsBloom:{title:"logs bloom",$ref:"#/components/schemas/bytes256"},root:{title:"state root",description:"The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",$ref:"#/components/schemas/hash32"},status:{title:"status",description:"Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.",$ref:"#/components/schemas/uint"},effectiveGasPrice:{title:"effective gas price",description:"The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",$ref:"#/components/schemas/uint"},blobGasPrice:{title:"blob gas price",description:"The actual value per gas deducted from the sender's account for blob gas. Only specified for blob transactions as defined by EIP-4844.",$ref:"#/components/schemas/uint"}}},AccountProof:{title:"Account proof",type:"object",required:["address","accountProof","balance","codeHash","nonce","storageHash","storageProof"],additionalProperties:!1,properties:{address:{title:"address",$ref:"#/components/schemas/address"},accountProof:{title:"accountProof",type:"array",items:{$ref:"#/components/schemas/bytes"}},balance:{title:"balance",$ref:"#/components/schemas/uint256"},codeHash:{title:"codeHash",$ref:"#/components/schemas/hash32"},nonce:{title:"nonce",$ref:"#/components/schemas/uint64"},storageHash:{title:"storageHash",$ref:"#/components/schemas/hash32"},storageProof:{title:"Storage proofs",type:"array",items:{$ref:"#/components/schemas/StorageProof"}}}},StorageProof:{title:"Storage proof",type:"object",required:["key","value","proof"],additionalProperties:!1,properties:{key:{title:"key",$ref:"#/components/schemas/bytesMax32"},value:{title:"value",$ref:"#/components/schemas/uint256"},proof:{title:"proof",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},Transaction4844Unsigned:{type:"object",title:"EIP-4844 transaction.",required:["type","nonce","to","gas","value","input","maxPriorityFeePerGas","maxFeePerGas","maxFeePerBlobGas","accessList","blobVersionedHashes","chainId"],properties:{type:{title:"type",$ref:"#/components/schemas/byte"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",$ref:"#/components/schemas/address"},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},maxFeePerBlobGas:{title:"max fee per blob gas",description:"The maximum total fee per gas the sender is willing to pay for blob gas in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},blobVersionedHashes:{title:"blobVersionedHashes",description:"List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",type:"array",items:{$ref:"#/components/schemas/hash32"}},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},AccessListEntry:{title:"Access list entry",type:"object",additionalProperties:!1,properties:{address:{$ref:"#/components/schemas/address"},storageKeys:{type:"array",items:{$ref:"#/components/schemas/hash32"}}}},AccessList:{title:"Access list",type:"array",items:{$ref:"#/components/schemas/AccessListEntry"}},Transaction1559Unsigned:{type:"object",title:"EIP-1559 transaction.",required:["type","nonce","gas","value","input","maxFeePerGas","maxPriorityFeePerGas","gasPrice","chainId","accessList"],properties:{type:{title:"type",type:"string",pattern:"^0x2$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},gasPrice:{title:"gas price",description:"The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using effectiveGasPrice in the receipt object going forward.",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},Transaction2930Unsigned:{type:"object",title:"EIP-2930 transaction.",required:["type","nonce","gas","value","input","gasPrice","chainId","accessList"],properties:{type:{title:"type",type:"string",pattern:"^0x1$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},TransactionLegacyUnsigned:{type:"object",title:"Legacy transaction.",required:["type","nonce","gas","value","input","gasPrice"],properties:{type:{title:"type",type:"string",pattern:"^0x0$"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},TransactionUnsigned:{oneOf:[{$ref:"#/components/schemas/Transaction4844Unsigned"},{$ref:"#/components/schemas/Transaction1559Unsigned"},{$ref:"#/components/schemas/Transaction2930Unsigned"},{$ref:"#/components/schemas/TransactionLegacyUnsigned"}]},Transaction4844Signed:{title:"Signed 4844 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction4844Unsigned"},{title:"EIP-4844 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},Transaction1559Signed:{title:"Signed 1559 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction1559Unsigned"},{title:"EIP-1559 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},v:{title:"v",description:"For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},Transaction2930Signed:{title:"Signed 2930 Transaction",type:"object",allOf:[{$ref:"#/components/schemas/Transaction2930Unsigned"},{title:"EIP-2930 transaction signature properties.",required:["yParity","r","s"],properties:{yParity:{title:"yParity",description:"The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",$ref:"#/components/schemas/uint"},v:{title:"v",description:"For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},TransactionLegacySigned:{title:"Signed Legacy Transaction",type:"object",allOf:[{$ref:"#/components/schemas/TransactionLegacyUnsigned"},{title:"Legacy transaction signature properties.",required:["v","r","s"],properties:{v:{title:"v",$ref:"#/components/schemas/uint"},r:{title:"r",$ref:"#/components/schemas/uint"},s:{title:"s",$ref:"#/components/schemas/uint"}}}]},TransactionSigned:{oneOf:[{$ref:"#/components/schemas/Transaction4844Signed"},{$ref:"#/components/schemas/Transaction1559Signed"},{$ref:"#/components/schemas/Transaction2930Signed"},{$ref:"#/components/schemas/TransactionLegacySigned"}]},TransactionInfo:{type:"object",title:"Transaction information",allOf:[{title:"Contextual information",required:["blockHash","blockNumber","from","hash","transactionIndex"],unevaluatedProperties:!1,properties:{blockHash:{title:"block hash",$ref:"#/components/schemas/hash32"},blockNumber:{title:"block number",$ref:"#/components/schemas/uint"},from:{title:"from address",$ref:"#/components/schemas/address"},hash:{title:"transaction hash",$ref:"#/components/schemas/hash32"},transactionIndex:{title:"transaction index",$ref:"#/components/schemas/uint"}}},{$ref:"#/components/schemas/TransactionSigned"}]},GenericTransaction:{type:"object",title:"Transaction object generic to all types",additionalProperties:!1,properties:{type:{title:"type",$ref:"#/components/schemas/byte"},nonce:{title:"nonce",$ref:"#/components/schemas/uint"},to:{title:"to address",oneOf:[{title:"Contract Creation (null)",type:"null"},{title:"Address",$ref:"#/components/schemas/address"}]},from:{title:"from address",$ref:"#/components/schemas/address"},gas:{title:"gas limit",$ref:"#/components/schemas/uint"},value:{title:"value",$ref:"#/components/schemas/uint"},input:{title:"input data",$ref:"#/components/schemas/bytes"},gasPrice:{title:"gas price",description:"The gas price willing to be paid by the sender in wei",$ref:"#/components/schemas/uint"},maxPriorityFeePerGas:{title:"max priority fee per gas",description:"Maximum fee per gas the sender is willing to pay to miners in wei",$ref:"#/components/schemas/uint"},maxFeePerGas:{title:"max fee per gas",description:"The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",$ref:"#/components/schemas/uint"},maxFeePerBlobGas:{title:"max fee per blob gas",description:"The maximum total fee per gas the sender is willing to pay for blob gas in wei",$ref:"#/components/schemas/uint"},accessList:{title:"accessList",description:"EIP-2930 access list",$ref:"#/components/schemas/AccessList"},blobVersionedHashes:{title:"blobVersionedHashes",description:"List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",type:"array",items:{$ref:"#/components/schemas/hash32"}},blobs:{title:"blobs",description:"Raw blob data.",type:"array",items:{$ref:"#/components/schemas/bytes"}},chainId:{title:"chainId",description:"Chain ID that this transaction is valid on.",$ref:"#/components/schemas/uint"}}},Withdrawal:{type:"object",title:"Validator withdrawal",required:["index","validatorIndex","address","amount"],additionalProperties:!1,properties:{index:{title:"index of withdrawal",$ref:"#/components/schemas/uint64"},validatorIndex:{title:"index of validator that generated withdrawal",$ref:"#/components/schemas/uint64"},address:{title:"recipient address for withdrawal value",$ref:"#/components/schemas/address"},amount:{title:"value contained in withdrawal",$ref:"#/components/schemas/uint256"}}},ForkchoiceStateV1:{title:"Forkchoice state object V1",type:"object",required:["headBlockHash","safeBlockHash","finalizedBlockHash"],properties:{headBlockHash:{title:"Head block hash",$ref:"#/components/schemas/hash32"},safeBlockHash:{title:"Safe block hash",$ref:"#/components/schemas/hash32"},finalizedBlockHash:{title:"Finalized block hash",$ref:"#/components/schemas/hash32"}}},ForkchoiceUpdatedResponseV1:{title:"Forkchoice updated response",type:"object",required:["payloadStatus"],properties:{payloadStatus:{title:"Payload status",$ref:"#/components/schemas/RestrictedPayloadStatusV1"},payloadId:{title:"Payload id",$ref:"#/components/schemas/bytes8"}}},PayloadAttributesV1:{title:"Payload attributes object V1",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient"],properties:{timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint64"},prevRandao:{title:"Previous randao value",$ref:"#/components/schemas/bytes32"},suggestedFeeRecipient:{title:"Suggested fee recipient",$ref:"#/components/schemas/address"}}},PayloadAttributesV2:{title:"Payload attributes object V2",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient","withdrawals"],properties:{timestamp:{$ref:"#/components/schemas/PayloadAttributesV1/properties/timestamp"},prevRandao:{$ref:"#/components/schemas/PayloadAttributesV1/properties/prevRandao"},suggestedFeeRecipient:{$ref:"#/components/schemas/PayloadAttributesV1/properties/suggestedFeeRecipient"},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/WithdrawalV1"}}}},PayloadAttributesV3:{title:"Payload attributes object V3",type:"object",required:["timestamp","prevRandao","suggestedFeeRecipient","withdrawals","parentBeaconBlockRoot"],properties:{timestamp:{$ref:"#/components/schemas/PayloadAttributesV2/properties/timestamp"},prevRandao:{$ref:"#/components/schemas/PayloadAttributesV2/properties/prevRandao"},suggestedFeeRecipient:{$ref:"#/components/schemas/PayloadAttributesV2/properties/suggestedFeeRecipient"},withdrawals:{$ref:"#/components/schemas/PayloadAttributesV2/properties/withdrawals"},parentBeaconBlockRoot:{title:"Parent beacon block root",$ref:"#/components/schemas/hash32"}}},PayloadStatusV1:{title:"Payload status object V1",type:"object",required:["status"],properties:{status:{title:"Payload validation status",type:"string",enum:["VALID","INVALID","SYNCING","ACCEPTED","INVALID_BLOCK_HASH"]},latestValidHash:{title:"The hash of the most recent valid block",$ref:"#/components/schemas/hash32"},validationError:{title:"Validation error message",type:"string"}}},RestrictedPayloadStatusV1:{$ref:"#/components/schemas/PayloadStatusV1",properties:{status:{$ref:"#/components/schemas/PayloadStatusV1/properties/status",description:"Set of possible values is restricted to VALID, INVALID, SYNCING",enum:["VALID","INVALID","SYNCING"]},latestValidHash:{$ref:"#/components/schemas/PayloadStatusV1/properties/latestValidHash"},validationError:{$ref:"#/components/schemas/PayloadStatusV1/properties/validationError"}}},PayloadStatusNoInvalidBlockHash:{$ref:"#/components/schemas/PayloadStatusV1",title:"Payload status object deprecating INVALID_BLOCK_HASH status",properties:{status:{$ref:"#/components/schemas/PayloadStatusV1/properties/status",enum:["VALID","INVALID","SYNCING","ACCEPTED"]},latestValidHash:{$ref:"#/components/schemas/PayloadStatusV1/properties/latestValidHash"},validationError:{$ref:"#/components/schemas/PayloadStatusV1/properties/validationError"}}},ExecutionPayloadV1:{title:"Execution payload object V1",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions"],properties:{parentHash:{title:"Parent block hash",$ref:"#/components/schemas/hash32"},feeRecipient:{title:"Recipient of transaction priority fees",$ref:"#/components/schemas/address"},stateRoot:{title:"State root",$ref:"#/components/schemas/hash32"},receiptsRoot:{title:"Receipts root",$ref:"#/components/schemas/hash32"},logsBloom:{title:"Bloom filter",$ref:"#/components/schemas/bytes256"},prevRandao:{title:"Previous randao value",$ref:"#/components/schemas/bytes32"},blockNumber:{title:"Block number",$ref:"#/components/schemas/uint64"},gasLimit:{title:"Gas limit",$ref:"#/components/schemas/uint64"},gasUsed:{title:"Gas used",$ref:"#/components/schemas/uint64"},timestamp:{title:"Timestamp",$ref:"#/components/schemas/uint64"},extraData:{title:"Extra data",$ref:"#/components/schemas/bytesMax32"},baseFeePerGas:{title:"Base fee per gas",$ref:"#/components/schemas/uint256"},blockHash:{title:"Block hash",$ref:"#/components/schemas/hash32"},transactions:{title:"Transactions",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},WithdrawalV1:{title:"Withdrawal object V1",type:"object",required:["index","validatorIndex","address","amount"],properties:{index:{title:"Withdrawal index",$ref:"#/components/schemas/uint64"},validatorIndex:{title:"Validator index",$ref:"#/components/schemas/uint64"},address:{title:"Withdrawal address",$ref:"#/components/schemas/address"},amount:{title:"Withdrawal amount",$ref:"#/components/schemas/uint64"}}},ExecutionPayloadV2:{title:"Execution payload object V2",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/transactions"},withdrawals:{title:"Withdrawals",type:"array",items:{$ref:"#/components/schemas/WithdrawalV1"}}}},ExecutionPayloadV3:{title:"Execution payload object V3",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals","blobGasUsed","excessBlobGas"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/transactions"},withdrawals:{$ref:"#/components/schemas/ExecutionPayloadV2/properties/withdrawals"},blobGasUsed:{title:"Blob gas used",$ref:"#/components/schemas/uint64"},excessBlobGas:{title:"Excess blob gas",$ref:"#/components/schemas/uint64"}}},ExecutionPayloadV4:{title:"Execution payload object V4",type:"object",required:["parentHash","feeRecipient","stateRoot","receiptsRoot","logsBloom","prevRandao","blockNumber","gasLimit","gasUsed","timestamp","extraData","baseFeePerGas","blockHash","transactions","withdrawals","blobGasUsed","excessBlobGas","depositRequests","withdrawalRequests","consolidationRequests"],properties:{parentHash:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/parentHash"},feeRecipient:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/feeRecipient"},stateRoot:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/stateRoot"},receiptsRoot:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/receiptsRoot"},logsBloom:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/logsBloom"},prevRandao:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/prevRandao"},blockNumber:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blockNumber"},gasLimit:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/gasLimit"},gasUsed:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/gasUsed"},timestamp:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/timestamp"},extraData:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/extraData"},baseFeePerGas:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/baseFeePerGas"},blockHash:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blockHash"},transactions:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/transactions"},withdrawals:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/withdrawals"},blobGasUsed:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/blobGasUsed"},excessBlobGas:{$ref:"#/components/schemas/ExecutionPayloadV3/properties/excessBlobGas"},depositRequests:{title:"Deposit requests",type:"array",items:{$ref:"#/components/schemas/DepositRequestV1"}},withdrawalRequests:{title:"Withdrawals requests",type:"array",items:{$ref:"#/components/schemas/WithdrawalRequestV1"}},consolidationRequests:{title:"Consolidation requests",type:"array",items:{$ref:"#/components/schemas/ConsolidationRequestV1"}}}},ExecutionPayloadBodyV1:{title:"Execution payload body object V1",type:"object",required:["transactions"],properties:{transactions:{$ref:"#/components/schemas/ExecutionPayloadV1/properties/transactions"},withdrawals:{title:"Withdrawals",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalV1"}}}},ExecutionPayloadBodyV2:{title:"Execution payload body object V2",type:"object",required:["transactions"],properties:{transactions:{title:"Transactions",type:"array",items:{$ref:"#/components/schemas/bytes"}},withdrawals:{title:"Withdrawals",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalV1"}},depositRequests:{title:"Deposit requests",type:["array","null"],items:{$ref:"#/components/schemas/DepositRequestV1"}},withdrawalRequests:{title:"Withdrawals requests",type:["array","null"],items:{$ref:"#/components/schemas/WithdrawalRequestV1"}},consolidationRequests:{title:"Consolidation requests - array - 'null'",items:{$ref:"#/components/schemas/ConsolidationRequestV1"}}}},BlobsBundleV1:{title:"Blobs bundle object V1",type:"object",required:["commitments","proofs","blobs"],properties:{commitments:{title:"Commitments",type:"array",items:{$ref:"#/components/schemas/bytes48"}},proofs:{title:"Proofs",type:"array",items:{$ref:"#/components/schemas/bytes48"}},blobs:{title:"Blobs",type:"array",items:{$ref:"#/components/schemas/bytes"}}}},DepositRequestV1:{title:"Deposit request object V1",type:"object",required:["pubkey","withdrawalCredentials","amount","signature","index"],properties:{pubkey:{title:"Public key",$ref:"#/components/schemas/bytes48"},withdrawalCredentials:{title:"Withdrawal credentials",$ref:"#/components/schemas/bytes32"},amount:{title:"Deposit amount",$ref:"#/components/schemas/uint64"},signature:{title:"Deposit signature",$ref:"#/components/schemas/bytes96"},index:{title:"Deposit index",$ref:"#/components/schemas/uint64"}}},WithdrawalRequestV1:{title:"Withdrawal request object V1",type:"object",required:["sourceAddress","validatorPubkey","amount"],properties:{sourceAddress:{title:"Source address",$ref:"#/components/schemas/address"},validatorPubkey:{title:"Validator public key",$ref:"#/components/schemas/bytes48"},amount:{title:"Withdraw amount",$ref:"#/components/schemas/uint64"}}},ConsolidationRequestV1:{title:"Consolidation request object V1",type:"object",required:["sourceAddress","sourcePubkey","targetPubkey"],properties:{sourceAddress:{title:"Source address",$ref:"#/components/schemas/address"},sourcePubkey:{title:"Source validator public key",$ref:"#/components/schemas/bytes48"},targetPubkey:{title:"Target validator public key",$ref:"#/components/schemas/bytes48"}}},TransitionConfigurationV1:{title:"Transition configuration object",type:"object",required:["terminalTotalDifficulty","terminalBlockHash","terminalBlockNumber"],properties:{terminalTotalDifficulty:{title:"Terminal total difficulty",$ref:"#/components/schemas/uint256"},terminalBlockHash:{title:"Terminal block hash",$ref:"#/components/schemas/hash32"},terminalBlockNumber:{title:"Terminal block number",$ref:"#/components/schemas/uint64"}}}},tags:{MetaMask:{name:"MetaMask",description:"MetaMask-specific methods."},Restricted:{name:"Restricted",description:"Restricted methods. If a method is restricted, the caller must have the corresponding permission via `wallet_requestPermissions` in order to call it."},Mobile:{name:"Mobile",description:"Mobile-specific methods."},Experimental:{name:"Experimental",description:"Experimental methods."},Deprecated:{name:"Deprecated",description:"Deprecated methods."},Ethereum:{name:"Ethereum API",description:"Ethereum execution API methods."},Multichain:{name:"Multichain API",description:"Multichain API methods."}},contentDescriptors:{},examplePairings:{},links:{},examples:{}}}}}},{package:"@metamask/multichain-api-middleware>@metamask/api-specs",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/api-specs/dist/build/openrpc.json"}],[2193,{"./build/multichain-openrpc.json":2191,"./build/openrpc.json":2192},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.MultiChainOpenRPCDocument=n.MetaMaskOpenRPCDocument=void 0;const s=r(e("./build/openrpc.json"));n.MetaMaskOpenRPCDocument=s.default;const a=r(e("./build/multichain-openrpc.json"));n.MultiChainOpenRPCDocument=a.default,n.default=s.default}}},{package:"@metamask/multichain-api-middleware>@metamask/api-specs",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/api-specs/dist/index.js"}],[2194,{"../scope/constants.cjs":2201,"../scope/transform.cjs":2205,"../scope/types.cjs":2206,"@metamask/controller-utils":1559,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isCaipAccountIdInPermittedAccountIds=n.isInternalAccountInPermittedAccountIds=n.setNonSCACaipAccountIdsInCaip25CaveatValue=n.getCaipAccountIdsFromCaip25CaveatValue=n.getCaipAccountIdsFromScopesObjects=n.setEthAccounts=n.getEthAccounts=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=e("../scope/constants.cjs"),o=e("../scope/transform.cjs"),i=e("../scope/types.cjs"),c=e=>{const{namespace:t}=(0,i.parseScopeString)(e);return t===s.KnownCaipNamespace.Eip155||e===a.KnownWalletScopeString.Eip155},l=e=>{const t=[];return Object.entries(e).forEach((([e,{accounts:n}])=>{n?.forEach((e=>{const{address:n,chainId:r}=(0,s.parseCaipAccountId)(e);c(r)&&((0,s.assertIsStrictHexString)(n),t.push(n))}))})),t};n.getEthAccounts=e=>{const{requiredScopes:t,optionalScopes:n}=e,r=[...l(t),...l(n)];return(0,o.getUniqueArrayItems)(r)};const d=(e,t)=>{const n={};return Object.entries(e).forEach((([e,r])=>{const a=e,o=a===s.KnownCaipNamespace.Wallet,{namespace:l,reference:d}=(0,i.parseScopeString)(a);if(!c(a)&&!o)return void(n[a]=r);let u=[];l&&d&&(u=t.map((e=>`${l}:${d}:${e}`))),n[a]={...r,accounts:u}})),n};function u(e){const t=new Set;for(const n of e)for(const{accounts:e}of Object.values(n))for(const n of e)t.add(n);return Array.from(t)}n.setEthAccounts=(e,t)=>({...e,requiredScopes:d(e.requiredScopes,t),optionalScopes:d(e.optionalScopes,t)}),n.getCaipAccountIdsFromScopesObjects=u,n.getCaipAccountIdsFromCaip25CaveatValue=function(e){return u([e.requiredScopes,e.optionalScopes])};const h=(e,t)=>{const n=new Map;for(const e of t){const{chain:{namespace:t},address:r}=(0,s.parseCaipAccountId)(e);n.has(t)||n.set(t,new Set),n.get(t)?.add(r)}const r={};for(const[t,s]of Object.entries(e)){const{namespace:e,reference:a}=(0,i.parseScopeString)(t);let c=[];if(e&&a&&n.has(e)){const t=n.get(e);t&&(c=Array.from(t).map((t=>`${e}:${a}:${t}`)))}r[t]={...s,accounts:(0,o.getUniqueArrayItems)(c)}}return r};function p(e,t,n){return!!(e&&t.length&&n.length)&&n.some((n=>{const a=(0,s.parseCaipAccountId)(n);return t.some((({namespace:t,reference:n})=>t===a.chain.namespace&&(t===s.KnownCaipNamespace.Eip155?("0"===n||n===a.chain.reference)&&(0,r.isEqualCaseInsensitive)(e,a.address):n===a.chain.reference&&e===a.address)))}))}n.setNonSCACaipAccountIdsInCaip25CaveatValue=(e,t)=>({...e,requiredScopes:h(e.requiredScopes,t),optionalScopes:h(e.optionalScopes,t)}),n.isInternalAccountInPermittedAccountIds=function(e,t){const n=e.scopes.map((e=>(0,i.parseScopeString)(e)));return p(e.address,n,t)},n.isCaipAccountIdInPermittedAccountIds=function(e,t){const{address:n,chain:r}=(0,s.parseCaipAccountId)(e);return p(n,[r],t)}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-accounts.cjs"}],[2195,{"../caip25Permission.cjs":2197,"../scope/transform.cjs":2205,"../scope/types.cjs":2206,"@metamask/controller-utils":1559,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.setChainIdsInCaip25CaveatValue=n.addCaipChainIdInCaip25CaveatValue=n.getAllScopesFromPermission=n.getAllNamespacesFromCaip25CaveatValue=n.getAllScopesFromCaip25CaveatValue=n.getAllScopesFromScopesObjects=n.setPermittedEthChainIds=n.addPermittedEthChainId=n.getPermittedEthChainIds=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=e("../caip25Permission.cjs"),o=e("../scope/transform.cjs"),i=e("../scope/types.cjs"),c=e=>{const t=[];return Object.keys(e).forEach((e=>{const{namespace:n,reference:a}=(0,i.parseScopeString)(e);n===s.KnownCaipNamespace.Eip155&&a&&t.push((0,r.toHex)(a))})),t};n.getPermittedEthChainIds=e=>{const{requiredScopes:t,optionalScopes:n}=e,r=[...c(t),...c(n)];return(0,o.getUniqueArrayItems)(r)};n.addPermittedEthChainId=(e,t)=>{const n=`eip155:${(0,s.hexToBigInt)(t).toString(10)}`;return Object.keys(e.requiredScopes).includes(n)||Object.keys(e.optionalScopes).includes(n)?e:{...e,optionalScopes:{...e.optionalScopes,[n]:{accounts:[]}}}};const l=(e,t)=>{const n={};return Object.entries(e).forEach((([e,a])=>{const o=e,{namespace:c,reference:l}=(0,i.parseScopeString)(o);if(l)if(c===s.KnownCaipNamespace.Eip155){const e=(0,r.toHex)(l);t.includes(e)&&(n[o]=a)}else n[o]=a;else n[o]=a})),n};function d(e){const t=new Set;for(const n of e)for(const e of Object.keys(n))t.add(e);return Array.from(t)}function u(e){return d([e.requiredScopes,e.optionalScopes])}n.setPermittedEthChainIds=(e,t)=>{let r={...e,requiredScopes:l(e.requiredScopes,t),optionalScopes:l(e.optionalScopes,t)};return t.forEach((e=>{r=(0,n.addPermittedEthChainId)(r,e)})),r},n.getAllScopesFromScopesObjects=d,n.getAllScopesFromCaip25CaveatValue=u,n.getAllNamespacesFromCaip25CaveatValue=function(e){const t=u(e),n=new Set;for(const e of t){const{namespace:t,reference:r}=(0,i.parseScopeString)(e);t===s.KnownCaipNamespace.Wallet?n.add(r??t):t&&n.add(t)}return Array.from(n)},n.getAllScopesFromPermission=function(e){const t=e.caveats.find((e=>e.type===a.Caip25CaveatType));return t?u(t.value):[]};n.addCaipChainIdInCaip25CaveatValue=(e,t)=>e.requiredScopes[t]||e.optionalScopes[t]?e:{...e,optionalScopes:{...e.optionalScopes,[t]:{accounts:[]}}};n.setChainIdsInCaip25CaveatValue=(e,t)=>{const n=new Set(t),r={requiredScopes:{},optionalScopes:{},sessionProperties:e.sessionProperties,isMultichainOrigin:e.isMultichainOrigin};for(const[t,s]of Object.entries(e.requiredScopes)){const e=t;((0,i.isWalletScope)(e)||n.has(e))&&(r.requiredScopes[e]=s)}for(const[t,s]of Object.entries(e.optionalScopes)){const e=t;((0,i.isWalletScope)(e)||n.has(e))&&(r.optionalScopes[e]=s)}for(const e of t)r.requiredScopes[e]||r.optionalScopes[e]||(r.optionalScopes[e]={accounts:[]});return r}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-permittedChains.cjs"}],[2196,{"../scope/constants.cjs":2201,"../scope/transform.cjs":2205,"../scope/types.cjs":2206,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getPermittedAccountsForScopes=n.getSessionScopes=n.getInternalScopesObject=void 0;const r=e("@metamask/utils"),s=e("../scope/constants.cjs"),a=e("../scope/transform.cjs"),o=e("../scope/types.cjs");n.getInternalScopesObject=e=>{const t={};return Object.entries(e).forEach((([e,{accounts:n}])=>{t[e]={accounts:n}})),t};const i=(e,{getNonEvmSupportedMethods:t})=>{const n={};return Object.entries(e).forEach((([e,{accounts:a}])=>{const i=e,{namespace:c,reference:l}=(0,o.parseScopeString)(i);let d=[],u=[];i===r.KnownCaipNamespace.Wallet||c===r.KnownCaipNamespace.Wallet?d=l===r.KnownCaipNamespace.Eip155?s.KnownWalletNamespaceRpcMethods[l]:(0,r.isCaipChainId)(i)?t(i):s.KnownWalletRpcMethods:c===r.KnownCaipNamespace.Eip155?(d=s.KnownRpcMethods[c],u=s.KnownNotifications[c]):(d=t(i),u=[]),n[i]={methods:d,notifications:u,accounts:a}})),n};n.getSessionScopes=(e,{getNonEvmSupportedMethods:t})=>(0,a.mergeNormalizedScopes)(i(e.requiredScopes,{getNonEvmSupportedMethods:t}),i(e.optionalScopes,{getNonEvmSupportedMethods:t}));n.getPermittedAccountsForScopes=(e,t)=>{const n=[];return t.forEach((t=>{const r=e.requiredScopes[t],s=e.optionalScopes[t];r&&n.push(...r.accounts),s&&n.push(...s.accounts)})),[...new Set(n)]}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/adapters/caip-permission-adapter-session-scopes.cjs"}],[2197,{"./adapters/caip-permission-adapter-accounts.cjs":2194,"./adapters/caip-permission-adapter-permittedChains.cjs":2195,"./scope/assert.cjs":2199,"./scope/supported.cjs":2204,"./scope/transform.cjs":2205,"./scope/types.cjs":2206,"@metamask/permission-controller":2385,"@metamask/utils":2974,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getCaip25CaveatFromPermission=n.generateCaip25Caveat=n.Caip25CaveatMutators=n.caip25EndowmentBuilder=n.caip25CaveatBuilder=n.diffScopesForCaip25CaveatValue=n.createCaip25Caveat=n.Caip25EndowmentPermissionName=n.Caip25CaveatType=void 0;const r=e("@metamask/permission-controller"),s=e("@metamask/utils"),a=e("lodash"),o=e("./adapters/caip-permission-adapter-accounts.cjs"),i=e("./adapters/caip-permission-adapter-permittedChains.cjs"),c=e("./scope/assert.cjs"),l=e("./scope/supported.cjs"),d=e("./scope/transform.cjs"),u=e("./scope/types.cjs");n.Caip25CaveatType="authorizedScopes",n.Caip25EndowmentPermissionName="endowment:caip25";function h(e,t,n){const r=(0,a.cloneDeep)(e),s=t[n];for(const[e,t]of Object.entries(s)){const s=e,a=r[n][s];if(a){const e=t.accounts.filter((e=>!a?.accounts.includes(e)));if(e.length>0){r[n][s]={accounts:e};continue}delete r[n][s]}else r[n][s]=t}return r}function p(e,t,n){return Object.values(e).every((e=>e.accounts.every((e=>(0,l.isSupportedAccount)(e,{getEvmInternalAccounts:t,getNonEvmAccountAddresses:n})))))}n.createCaip25Caveat=e=>({type:n.Caip25CaveatType,value:e}),n.diffScopesForCaip25CaveatValue=h;n.caip25CaveatBuilder=({findNetworkClientIdByChainId:e,listAccounts:t,isNonEvmScopeSupported:r,getNonEvmAccountAddresses:a})=>({type:n.Caip25CaveatType,validator:(o,i,d)=>{if(!(o.value&&(0,s.hasProperty)(o.value,"requiredScopes")&&(0,s.hasProperty)(o.value,"optionalScopes")&&(0,s.hasProperty)(o.value,"isMultichainOrigin")&&(0,s.hasProperty)(o.value,"sessionProperties")&&"boolean"==typeof o.value.isMultichainOrigin&&(0,s.isObject)(o.value.sessionProperties)))throw new Error(`${n.Caip25EndowmentPermissionName} error: Received invalid value for caveat of type "${n.Caip25CaveatType}".`);const{requiredScopes:u,optionalScopes:h,sessionProperties:m}=o.value;if(!Object.keys(m).every((e=>(0,l.isSupportedSessionProperty)(e))))throw new Error(`${n.Caip25EndowmentPermissionName} error: Received unknown session property(s) for caveat of type "${n.Caip25CaveatType}".`);if((0,c.assertIsInternalScopesObject)(u),(0,c.assertIsInternalScopesObject)(h),0===Object.keys(u).length&&0===Object.keys(h).length)throw new Error(`${n.Caip25EndowmentPermissionName} error: Received no scopes for caveat of type "${n.Caip25CaveatType}".`);const f=t=>{try{return e(t),!0}catch{return!1}},g=Object.keys(u).every((e=>(0,l.isSupportedScopeString)(e,{isEvmChainIdSupported:f,isNonEvmScopeSupported:r}))),b=Object.keys(h).every((e=>(0,l.isSupportedScopeString)(e,{isEvmChainIdSupported:f,isNonEvmScopeSupported:r})));if(!g||!b)throw new Error(`${n.Caip25EndowmentPermissionName} error: Received scopeString value(s) for caveat of type "${n.Caip25CaveatType}" that are not supported by the wallet.`);const C=p(u,t,a),y=p(h,t,a);if(!C||!y)throw new Error(`${n.Caip25EndowmentPermissionName} error: Received account value(s) for caveat of type "${n.Caip25CaveatType}" that are not supported by the wallet.`)},merger:(e,t)=>{const n={requiredScopes:(0,d.mergeInternalScopes)(e.requiredScopes,t.requiredScopes),optionalScopes:(0,d.mergeInternalScopes)(e.optionalScopes,t.optionalScopes),sessionProperties:{...e.sessionProperties,...t.sessionProperties},isMultichainOrigin:e.isMultichainOrigin},r=h(e,n,"requiredScopes");return[n,h(r,n,"optionalScopes")]}});n.caip25EndowmentBuilder=Object.freeze({targetName:n.Caip25EndowmentPermissionName,specificationBuilder:()=>({permissionType:r.PermissionType.Endowment,targetName:n.Caip25EndowmentPermissionName,allowedCaveats:[n.Caip25CaveatType],endowmentGetter:e=>null,validator:e=>{if(1!==e.caveats?.length||e.caveats?.[0]?.type!==n.Caip25CaveatType)throw new Error(`${n.Caip25EndowmentPermissionName} error: Invalid caveats. There must be a single caveat of type "${n.Caip25CaveatType}".`)}})}),n.Caip25CaveatMutators={[n.Caip25CaveatType]:{removeScope:function(e,t){const n=Object.entries(e.requiredScopes).filter((([e])=>e!==t)),a=Object.entries(e.optionalScopes).filter((([e])=>e!==t)),o=n.length!==Object.keys(e.requiredScopes).length,i=a.length!==Object.keys(e.optionalScopes).length;if(!o&&!i)return{operation:r.CaveatMutatorOperation.Noop};const c={...e,requiredScopes:Object.fromEntries(n),optionalScopes:Object.fromEntries(a)};if([...n,...a].some((([e])=>{const{namespace:t}=(0,u.parseScopeString)(e);return t!==s.KnownCaipNamespace.Wallet})))return{operation:r.CaveatMutatorOperation.UpdateValue,value:c};return{operation:r.CaveatMutatorOperation.RevokePermission}},removeAccount:function(e,t){const n=(0,a.cloneDeep)(e);[n.requiredScopes,n.optionalScopes].forEach((e=>{Object.entries(e).forEach((([,e])=>{!function(e,t){e.accounts&&(e.accounts=e.accounts.filter(function(e){return t=>(0,s.parseCaipAccountId)(t).address!==e}(t)))}(e,t)}))}));if((0,a.isEqual)(n,e))return{operation:r.CaveatMutatorOperation.Noop};if([...Object.values(n.requiredScopes),...Object.values(n.optionalScopes)].some((({accounts:e})=>e.length>0)))return{operation:r.CaveatMutatorOperation.UpdateValue,value:n};return{operation:r.CaveatMutatorOperation.RevokePermission}}}};n.generateCaip25Caveat=(e,t,r)=>{const s=(0,i.setChainIdsInCaip25CaveatValue)(e,r),a=(0,o.setNonSCACaipAccountIdsInCaip25CaveatValue)(s,t);return{[n.Caip25EndowmentPermissionName]:{caveats:[{type:n.Caip25CaveatType,value:a}]}}},n.getCaip25CaveatFromPermission=function(e){return e?.caveats.find((e=>e.type===n.Caip25CaveatType))}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/caip25Permission.cjs"}],[2198,{"./adapters/caip-permission-adapter-accounts.cjs":2194,"./adapters/caip-permission-adapter-permittedChains.cjs":2195,"./adapters/caip-permission-adapter-session-scopes.cjs":2196,"./caip25Permission.cjs":2197,"./scope/assert.cjs":2199,"./scope/authorization.cjs":2200,"./scope/constants.cjs":2201,"./scope/errors.cjs":2202,"./scope/filter.cjs":2203,"./scope/transform.cjs":2205,"./scope/types.cjs":2206},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Caip25Errors=n.KnownSessionProperties=n.getCaip25CaveatFromPermission=n.generateCaip25Caveat=n.Caip25CaveatMutators=n.caip25EndowmentBuilder=n.Caip25EndowmentPermissionName=n.createCaip25Caveat=n.Caip25CaveatType=n.caip25CaveatBuilder=n.normalizeAndMergeScopes=n.mergeInternalScopes=n.mergeNormalizedScopes=n.mergeScopeObject=n.normalizeScope=n.getUniqueArrayItems=n.parseScopeString=n.getSupportedScopeObjects=n.isKnownSessionPropertyValue=n.KnownWalletScopeString=n.KnownNotifications=n.KnownWalletNamespaceRpcMethods=n.KnownRpcMethods=n.KnownWalletRpcMethods=n.assertIsInternalScopeString=n.isNamespaceInScopesObject=n.bucketScopes=n.validateAndNormalizeScopes=n.getPermittedAccountsForScopes=n.getSessionScopes=n.getInternalScopesObject=n.getAllScopesFromScopesObjects=n.getAllScopesFromCaip25CaveatValue=n.getAllScopesFromPermission=n.getAllNamespacesFromCaip25CaveatValue=n.addCaipChainIdInCaip25CaveatValue=n.setChainIdsInCaip25CaveatValue=n.setPermittedEthChainIds=n.addPermittedEthChainId=n.getPermittedEthChainIds=n.isCaipAccountIdInPermittedAccountIds=n.isInternalAccountInPermittedAccountIds=n.getCaipAccountIdsFromCaip25CaveatValue=n.getCaipAccountIdsFromScopesObjects=n.setNonSCACaipAccountIdsInCaip25CaveatValue=n.setEthAccounts=n.getEthAccounts=void 0;var r=e("./adapters/caip-permission-adapter-accounts.cjs");Object.defineProperty(n,"getEthAccounts",{enumerable:!0,get:function(){return r.getEthAccounts}}),Object.defineProperty(n,"setEthAccounts",{enumerable:!0,get:function(){return r.setEthAccounts}}),Object.defineProperty(n,"setNonSCACaipAccountIdsInCaip25CaveatValue",{enumerable:!0,get:function(){return r.setNonSCACaipAccountIdsInCaip25CaveatValue}}),Object.defineProperty(n,"getCaipAccountIdsFromScopesObjects",{enumerable:!0,get:function(){return r.getCaipAccountIdsFromScopesObjects}}),Object.defineProperty(n,"getCaipAccountIdsFromCaip25CaveatValue",{enumerable:!0,get:function(){return r.getCaipAccountIdsFromCaip25CaveatValue}}),Object.defineProperty(n,"isInternalAccountInPermittedAccountIds",{enumerable:!0,get:function(){return r.isInternalAccountInPermittedAccountIds}}),Object.defineProperty(n,"isCaipAccountIdInPermittedAccountIds",{enumerable:!0,get:function(){return r.isCaipAccountIdInPermittedAccountIds}});var s=e("./adapters/caip-permission-adapter-permittedChains.cjs");Object.defineProperty(n,"getPermittedEthChainIds",{enumerable:!0,get:function(){return s.getPermittedEthChainIds}}),Object.defineProperty(n,"addPermittedEthChainId",{enumerable:!0,get:function(){return s.addPermittedEthChainId}}),Object.defineProperty(n,"setPermittedEthChainIds",{enumerable:!0,get:function(){return s.setPermittedEthChainIds}}),Object.defineProperty(n,"setChainIdsInCaip25CaveatValue",{enumerable:!0,get:function(){return s.setChainIdsInCaip25CaveatValue}}),Object.defineProperty(n,"addCaipChainIdInCaip25CaveatValue",{enumerable:!0,get:function(){return s.addCaipChainIdInCaip25CaveatValue}}),Object.defineProperty(n,"getAllNamespacesFromCaip25CaveatValue",{enumerable:!0,get:function(){return s.getAllNamespacesFromCaip25CaveatValue}}),Object.defineProperty(n,"getAllScopesFromPermission",{enumerable:!0,get:function(){return s.getAllScopesFromPermission}}),Object.defineProperty(n,"getAllScopesFromCaip25CaveatValue",{enumerable:!0,get:function(){return s.getAllScopesFromCaip25CaveatValue}}),Object.defineProperty(n,"getAllScopesFromScopesObjects",{enumerable:!0,get:function(){return s.getAllScopesFromScopesObjects}});var a=e("./adapters/caip-permission-adapter-session-scopes.cjs");Object.defineProperty(n,"getInternalScopesObject",{enumerable:!0,get:function(){return a.getInternalScopesObject}}),Object.defineProperty(n,"getSessionScopes",{enumerable:!0,get:function(){return a.getSessionScopes}}),Object.defineProperty(n,"getPermittedAccountsForScopes",{enumerable:!0,get:function(){return a.getPermittedAccountsForScopes}});var o=e("./scope/authorization.cjs");Object.defineProperty(n,"validateAndNormalizeScopes",{enumerable:!0,get:function(){return o.validateAndNormalizeScopes}}),Object.defineProperty(n,"bucketScopes",{enumerable:!0,get:function(){return o.bucketScopes}}),Object.defineProperty(n,"isNamespaceInScopesObject",{enumerable:!0,get:function(){return o.isNamespaceInScopesObject}});var i=e("./scope/assert.cjs");Object.defineProperty(n,"assertIsInternalScopeString",{enumerable:!0,get:function(){return i.assertIsInternalScopeString}});var c=e("./scope/constants.cjs");Object.defineProperty(n,"KnownWalletRpcMethods",{enumerable:!0,get:function(){return c.KnownWalletRpcMethods}}),Object.defineProperty(n,"KnownRpcMethods",{enumerable:!0,get:function(){return c.KnownRpcMethods}}),Object.defineProperty(n,"KnownWalletNamespaceRpcMethods",{enumerable:!0,get:function(){return c.KnownWalletNamespaceRpcMethods}}),Object.defineProperty(n,"KnownNotifications",{enumerable:!0,get:function(){return c.KnownNotifications}}),Object.defineProperty(n,"KnownWalletScopeString",{enumerable:!0,get:function(){return c.KnownWalletScopeString}}),Object.defineProperty(n,"isKnownSessionPropertyValue",{enumerable:!0,get:function(){return c.isKnownSessionPropertyValue}});var l=e("./scope/filter.cjs");Object.defineProperty(n,"getSupportedScopeObjects",{enumerable:!0,get:function(){return l.getSupportedScopeObjects}});var d=e("./scope/types.cjs");Object.defineProperty(n,"parseScopeString",{enumerable:!0,get:function(){return d.parseScopeString}});var u=e("./scope/transform.cjs");Object.defineProperty(n,"getUniqueArrayItems",{enumerable:!0,get:function(){return u.getUniqueArrayItems}}),Object.defineProperty(n,"normalizeScope",{enumerable:!0,get:function(){return u.normalizeScope}}),Object.defineProperty(n,"mergeScopeObject",{enumerable:!0,get:function(){return u.mergeScopeObject}}),Object.defineProperty(n,"mergeNormalizedScopes",{enumerable:!0,get:function(){return u.mergeNormalizedScopes}}),Object.defineProperty(n,"mergeInternalScopes",{enumerable:!0,get:function(){return u.mergeInternalScopes}}),Object.defineProperty(n,"normalizeAndMergeScopes",{enumerable:!0,get:function(){return u.normalizeAndMergeScopes}});var h=e("./caip25Permission.cjs");Object.defineProperty(n,"caip25CaveatBuilder",{enumerable:!0,get:function(){return h.caip25CaveatBuilder}}),Object.defineProperty(n,"Caip25CaveatType",{enumerable:!0,get:function(){return h.Caip25CaveatType}}),Object.defineProperty(n,"createCaip25Caveat",{enumerable:!0,get:function(){return h.createCaip25Caveat}}),Object.defineProperty(n,"Caip25EndowmentPermissionName",{enumerable:!0,get:function(){return h.Caip25EndowmentPermissionName}}),Object.defineProperty(n,"caip25EndowmentBuilder",{enumerable:!0,get:function(){return h.caip25EndowmentBuilder}}),Object.defineProperty(n,"Caip25CaveatMutators",{enumerable:!0,get:function(){return h.Caip25CaveatMutators}}),Object.defineProperty(n,"generateCaip25Caveat",{enumerable:!0,get:function(){return h.generateCaip25Caveat}}),Object.defineProperty(n,"getCaip25CaveatFromPermission",{enumerable:!0,get:function(){return h.getCaip25CaveatFromPermission}});var p=e("./scope/constants.cjs");Object.defineProperty(n,"KnownSessionProperties",{enumerable:!0,get:function(){return p.KnownSessionProperties}});var m=e("./scope/errors.cjs");Object.defineProperty(n,"Caip25Errors",{enumerable:!0,get:function(){return m.Caip25Errors}})}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/index.cjs"}],[2199,{"./errors.cjs":2202,"./supported.cjs":2204,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.assertIsInternalScopesObject=n.assertIsInternalScopeString=n.assertIsExternalScopesObject=n.assertScopesSupported=n.assertScopeSupported=void 0;const r=e("@metamask/utils"),s=e("./errors.cjs"),a=e("./supported.cjs");n.assertScopeSupported=(e,t,{isEvmChainIdSupported:n,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:o})=>{const{methods:i,notifications:c}=t;if(!(0,a.isSupportedScopeString)(e,{isEvmChainIdSupported:n,isNonEvmScopeSupported:r}))throw s.Caip25Errors.requestedChainsNotSupportedError();if(!i.every((t=>(0,a.isSupportedMethod)(e,t,{getNonEvmSupportedMethods:o}))))throw s.Caip25Errors.requestedMethodsNotSupportedError();if(c&&!c.every((t=>(0,a.isSupportedNotification)(e,t))))throw s.Caip25Errors.requestedNotificationsNotSupportedError()};function o(e){if("object"!=typeof e||null===e)throw new Error("ExternalScopeObject must be an object");if((0,r.hasProperty)(e,"references")&&(!Array.isArray(e.references)||!e.references.every(r.isCaipReference)))throw new Error("ExternalScopeObject.references must be an array of CaipReference");if((0,r.hasProperty)(e,"accounts")&&(!Array.isArray(e.accounts)||!e.accounts.every(r.isCaipAccountId)))throw new Error("ExternalScopeObject.accounts must be an array of CaipAccountId");if((0,r.hasProperty)(e,"methods")&&(!Array.isArray(e.methods)||!e.methods.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.methods must be an array of strings");if((0,r.hasProperty)(e,"notifications")&&(!Array.isArray(e.notifications)||!e.notifications.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.notifications must be an array of strings");if((0,r.hasProperty)(e,"rpcDocuments")&&(!Array.isArray(e.rpcDocuments)||!e.rpcDocuments.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.rpcDocuments must be an array of strings");if((0,r.hasProperty)(e,"rpcEndpoints")&&(!Array.isArray(e.rpcEndpoints)||!e.rpcEndpoints.every((e=>"string"==typeof e))))throw new Error("ExternalScopeObject.rpcEndpoints must be an array of strings")}function i(e){if("string"!=typeof e||!(0,r.isCaipNamespace)(e)&&!(0,r.isCaipChainId)(e))throw new Error("scopeString is not a valid ExternalScopeString")}function c(e){if("object"!=typeof e||null===e)throw new Error("InternalScopeObject must be an object");if(!(0,r.hasProperty)(e,"accounts")||!Array.isArray(e.accounts)||!e.accounts.every(r.isCaipAccountId))throw new Error("InternalScopeObject.accounts must be an array of CaipAccountId")}function l(e){if("string"!=typeof e||e!==r.KnownCaipNamespace.Wallet&&!(0,r.isCaipChainId)(e))throw new Error("scopeString is not a valid InternalScopeString")}n.assertScopesSupported=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:s})=>{for(const[a,o]of Object.entries(e))(0,n.assertScopeSupported)(a,o,{isEvmChainIdSupported:t,isNonEvmScopeSupported:r,getNonEvmSupportedMethods:s})},n.assertIsExternalScopesObject=function(e){if("object"!=typeof e||null===e)throw new Error("ExternalScopesObject must be an object");for(const[t,n]of Object.entries(e))i(t),o(n)},n.assertIsInternalScopeString=l,n.assertIsInternalScopesObject=function(e){if("object"!=typeof e||null===e)throw new Error("InternalScopesObject must be an object");for(const[t,n]of Object.entries(e))l(t),c(n)}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/assert.cjs"}],[22,{"../../controllers/institutional-snap/InstitutionalSnapController":90},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.InstitutionalSnapControllerInit=void 0;var r=e("../../controllers/institutional-snap/InstitutionalSnapController");n.InstitutionalSnapControllerInit=e=>({controller:new r.InstitutionalSnapController({messenger:e.controllerMessenger})})}}},{package:"$root$",file:"app/scripts/controller-init/institutional-snap/institutional-snap-controller-init.ts"}],[220,{"../../../../shared/constants/security-provider":5820,"../../../../shared/lib/trace":5892,"../ppom/ppom-util":164,"@metamask/keyring-api":2077,"ethereumjs-util":4363},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:n,method:r,origin:s}=t,{securityAlertResponse:a,traceContext:o}=t,l={actionId:n,method:r,origin:s,requireApproval:!0,securityAlertResponse:a};(0,i.endTrace)({name:i.TraceName.Middleware,id:n});const{waitForHash:d}=await c({...e,transactionOptions:{...l,traceContext:o}}),u=await d();return(0,i.endTrace)({name:i.TraceName.Transaction,id:n}),u},n.addTransaction=async function(e){await async function(e){const{chainId:t,ppomController:n,securityAlertsEnabled:r,transactionOptions:s,transactionParams:i,updateSecurityAlertResponse:c,internalAccounts:l}=e,{type:d}=s,u=o.SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES.includes(d);if(!r||u)return;if(l.some((({address:e})=>{var t;return e.toLowerCase()===(null===(t=i.to)||void 0===t?void 0:t.toLowerCase())})))return;try{const{from:r,to:l,value:d,data:u}=i,{actionId:h,origin:p}=s,m={method:"eth_sendTransaction",id:h??"",origin:p??"",params:[{from:r,to:l??"",value:d??"",data:u??""}],jsonrpc:"2.0"},f=(0,a.generateSecurityAlertId)();(0,a.validateRequestWithPPOM)({ppomController:n,request:m,securityAlertId:f,chainId:t,updateSecurityAlertResponse:c});const g={...o.LOADING_SECURITY_ALERT_RESPONSE,securityAlertId:f};e.transactionOptions.securityAlertResponse=g}catch(e){(0,a.handlePPOMError)(e,"Error validating JSON RPC using PPOM: ")}}(e);const{transactionMeta:t,waitForHash:n}=await c(e);if(!e.waitForSubmit)return n().catch((()=>{})),t;const r=await n();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(r,e.transactionController)},n.getTransactionById=l;var r=e("@metamask/keyring-api"),s=e("ethereumjs-util"),a=e("../ppom/ppom-util"),o=e("../../../../shared/constants/security-provider"),i=e("../../../../shared/lib/trace");async function c(e){const{selectedAccount:t}=e;return t.type===r.EthAccountType.Erc4337?async function(e){var t;const{networkClientId:n,transactionController:r,transactionOptions:a,transactionParams:o,userOperationController:i}=e,{maxFeePerGas:c,maxPriorityFeePerGas:d}=o,{origin:u,requireApproval:h,type:p}=a,m={...o,maxFeePerGas:(0,s.addHexPrefix)(c),maxPriorityFeePerGas:(0,s.addHexPrefix)(d)},f=null==a||null===(t=a.swaps)||void 0===t?void 0:t.meta;null!=f&&f.type&&delete f.type;const g={networkClientId:n,origin:u,requireApproval:h,swaps:f,type:p},b=await i.addUserOperationFromTransaction(m,g);i.startPollingByNetworkClientId(n);return{transactionMeta:l(b.id,r),waitForHash:b.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:n,transactionParams:r,networkClientId:s}=e,{result:a,transactionMeta:o}=await t.addTransaction(r,{...n,networkClientId:s});return{transactionMeta:o,waitForHash:()=>a}}(e)}function l(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[2200,{"./filter.cjs":2203,"./transform.cjs":2205,"./types.cjs":2206,"./validation.cjs":2207},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isNamespaceInScopesObject=n.bucketScopes=n.validateAndNormalizeScopes=void 0;const r=e("./filter.cjs"),s=e("./transform.cjs"),a=e("./types.cjs"),o=e("./validation.cjs");n.validateAndNormalizeScopes=(e,t)=>{const{validRequiredScopes:n,validOptionalScopes:r}=(0,o.getValidScopes)(e,t);return{normalizedRequiredScopes:(0,s.normalizeAndMergeScopes)(n),normalizedOptionalScopes:(0,s.normalizeAndMergeScopes)(r)}};n.bucketScopes=(e,{isEvmChainIdSupported:t,isEvmChainIdSupportable:n,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a})=>{const{supportedScopes:o,unsupportedScopes:i}=(0,r.bucketScopesBySupport)(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a}),{supportedScopes:c,unsupportedScopes:l}=(0,r.bucketScopesBySupport)(i,{isEvmChainIdSupported:n,isNonEvmScopeSupported:s,getNonEvmSupportedMethods:a});return{supportedScopes:o,supportableScopes:c,unsupportableScopes:l}},n.isNamespaceInScopesObject=function(e,t){return Object.keys(e).some((e=>{const{namespace:n}=(0,a.parseScopeString)(e);return n===t}))}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/authorization.cjs"}],[2201,{"@metamask/api-specs":2193},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.isKnownSessionPropertyValue=n.KnownSessionProperties=n.KnownNotifications=n.KnownWalletNamespaceRpcMethods=n.KnownRpcMethods=n.Eip1193OnlyMethods=n.KnownWalletRpcMethods=n.CaipReferenceRegexes=n.KnownWalletScopeString=void 0;const s=r(e("@metamask/api-specs"));var a;!function(e){e.Eip155="wallet:eip155"}(a||(n.KnownWalletScopeString=a={})),n.CaipReferenceRegexes={eip155:/^(0|[1-9][0-9]*)$/u,bip122:/.*/u,solana:/.*/u},n.KnownWalletRpcMethods=["wallet_registerOnboarding","wallet_scanQRCode"];const o=["wallet_addEthereumChain"];n.Eip1193OnlyMethods=["wallet_switchEthereumChain","wallet_getPermissions","wallet_requestPermissions","wallet_revokePermissions","eth_requestAccounts","eth_accounts","eth_coinbase","net_version","metamask_logWeb3ShimUsage","metamask_getProviderState","metamask_sendDomainMetadata","wallet_registerOnboarding"];const i=s.default.methods.map((({name:e})=>e)).filter((e=>!o.includes(e))).filter((e=>!n.KnownWalletRpcMethods.includes(e))).filter((e=>!n.Eip1193OnlyMethods.includes(e)));var c;n.KnownRpcMethods={eip155:i,bip122:[],solana:[]},n.KnownWalletNamespaceRpcMethods={eip155:o,bip122:[],solana:[]},n.KnownNotifications={eip155:["eth_subscription"],bip122:[],solana:[]},function(e){e.SolanaAccountChangedNotifications="solana_accountChanged_notifications"}(c||(n.KnownSessionProperties=c={})),n.isKnownSessionPropertyValue=function(e){return Object.values(c).includes(e)}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/constants.cjs"}],[2202,{"@metamask/rpc-errors":2524},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.Caip25Errors=void 0;const r=e("@metamask/rpc-errors");n.Caip25Errors={requestedChainsNotSupportedError:()=>new r.JsonRpcError(5100,"Requested chains are not supported"),requestedMethodsNotSupportedError:()=>new r.JsonRpcError(5101,"Requested methods are not supported"),requestedNotificationsNotSupportedError:()=>new r.JsonRpcError(5102,"Requested notifications are not supported"),unknownMethodsRequestedError:()=>new r.JsonRpcError(5201,"Unknown method(s) requested"),unknownNotificationsRequestedError:()=>new r.JsonRpcError(5202,"Unknown notification(s) requested")}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/errors.cjs"}],[2203,{"./assert.cjs":2199,"./supported.cjs":2204},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getSupportedScopeObjects=n.bucketScopesBySupport=void 0;const r=e("./assert.cjs"),s=e("./supported.cjs");n.bucketScopesBySupport=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n,getNonEvmSupportedMethods:s})=>{const a={},o={};for(const[i,c]of Object.entries(e)){(0,r.assertIsInternalScopeString)(i);try{(0,r.assertScopeSupported)(i,c,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n,getNonEvmSupportedMethods:s}),a[i]=c}catch{o[i]=c}}return{supportedScopes:a,unsupportedScopes:o}};const a=(e,t,{getNonEvmSupportedMethods:n})=>{const{methods:r,notifications:a}=t,o=r.filter((t=>(0,s.isSupportedMethod)(e,t,{getNonEvmSupportedMethods:n}))),i=a.filter((t=>(0,s.isSupportedNotification)(e,t)));return{...t,methods:o,notifications:i}};n.getSupportedScopeObjects=(e,{getNonEvmSupportedMethods:t})=>{const n={};for(const[s,o]of Object.entries(e))(0,r.assertIsInternalScopeString)(s),n[s]=a(s,o,{getNonEvmSupportedMethods:t});return n}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/filter.cjs"}],[2204,{"./constants.cjs":2201,"./types.cjs":2206,"@metamask/controller-utils":1559,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isSupportedSessionProperty=n.isSupportedNotification=n.isSupportedMethod=n.isSupportedAccount=n.isSupportedScopeString=void 0;const r=e("@metamask/controller-utils"),s=e("@metamask/utils"),a=e("./constants.cjs"),o=e("./types.cjs");n.isSupportedScopeString=(e,{isEvmChainIdSupported:t,isNonEvmScopeSupported:n})=>{const{namespace:i,reference:c}=(0,o.parseScopeString)(e);switch(i){case s.KnownCaipNamespace.Wallet:return!(0,s.isCaipChainId)(e)||c===s.KnownCaipNamespace.Eip155||n(e);case s.KnownCaipNamespace.Eip155:return!c||a.CaipReferenceRegexes.eip155.test(c)&&t((0,r.toHex)(c));default:return!!(0,s.isCaipChainId)(e)&&n(e)}};n.isSupportedAccount=(e,{getEvmInternalAccounts:t,getNonEvmAccountAddresses:n})=>{const{address:a,chainId:o,chain:{namespace:i,reference:c}}=(0,s.parseCaipAccountId)(e),l=()=>t().some((e=>["eip155:eoa","eip155:erc4337"].includes(e.type)&&(0,r.isEqualCaseInsensitive)(a,e.address))),d=()=>n(o).includes(e);switch(i){case s.KnownCaipNamespace.Wallet:return c===s.KnownCaipNamespace.Eip155?l():d();case s.KnownCaipNamespace.Eip155:return l();default:return d()}};n.isSupportedMethod=(e,t,{getNonEvmSupportedMethods:n})=>{const{namespace:r,reference:i}=(0,o.parseScopeString)(e);if(!r)return!1;const c=()=>(0,s.isCaipChainId)(e)&&n(e).includes(t);return r===s.KnownCaipNamespace.Wallet?i?i===s.KnownCaipNamespace.Eip155?a.KnownWalletNamespaceRpcMethods[i].includes(t):c():a.KnownWalletRpcMethods.includes(t):r===s.KnownCaipNamespace.Eip155?a.KnownRpcMethods[r].includes(t):c()};n.isSupportedNotification=(e,t)=>{const{namespace:n}=(0,o.parseScopeString)(e);return n===s.KnownCaipNamespace.Eip155&&a.KnownNotifications[n].includes(t)};n.isSupportedSessionProperty=e=>Object.values(a.KnownSessionProperties).includes(e)}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/supported.cjs"}],[2205,{"./types.cjs":2206,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.normalizeAndMergeScopes=n.mergeInternalScopes=n.mergeNormalizedScopes=n.mergeScopeObject=n.normalizeScope=n.getUniqueArrayItems=void 0;const r=e("lodash"),s=e("./types.cjs");n.getUniqueArrayItems=e=>Array.from(new Set(e));n.normalizeScope=(e,t)=>{const{references:n,...a}=t,{namespace:o,reference:i}=(0,s.parseScopeString)(e),c={accounts:[],...a};return o&&!i&&n!==undefined&&n.length>0?Object.fromEntries(n.map((e=>[`${o}:${e}`,(0,r.cloneDeep)(c)]))):{[e]:c}};n.mergeScopeObject=(e,t)=>{const r={methods:(0,n.getUniqueArrayItems)([...e.methods,...t.methods]),notifications:(0,n.getUniqueArrayItems)([...e.notifications,...t.notifications]),accounts:(0,n.getUniqueArrayItems)([...e.accounts,...t.accounts])};return(e.rpcDocuments||t.rpcDocuments)&&(r.rpcDocuments=(0,n.getUniqueArrayItems)([...e.rpcDocuments??[],...t.rpcDocuments??[]])),(e.rpcEndpoints||t.rpcEndpoints)&&(r.rpcEndpoints=(0,n.getUniqueArrayItems)([...e.rpcEndpoints??[],...t.rpcEndpoints??[]])),r};n.mergeNormalizedScopes=(e,t)=>{const r={};return Object.entries(e).forEach((([e,s])=>{const a=e,o=t[a];r[a]=o?(0,n.mergeScopeObject)(s,o):s})),Object.entries(t).forEach((([t,n])=>{const s=t;e[s]||(r[s]=n)})),r};n.mergeInternalScopes=(e,t)=>{const s=(0,r.cloneDeep)(e);return Object.entries(t).forEach((([e,t])=>{const r=e,a=s[r];s[r]=a?{accounts:(0,n.getUniqueArrayItems)([...a.accounts,...t.accounts])}:t})),s};n.normalizeAndMergeScopes=e=>{let t={};return Object.keys(e).forEach((r=>{const s=(0,n.normalizeScope)(r,e[r]);t=(0,n.mergeNormalizedScopes)(t,s)})),t}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/transform.cjs"}],[2206,{"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isWalletScope=n.parseScopeString=void 0;const r=e("@metamask/utils");n.parseScopeString=e=>(0,r.isCaipNamespace)(e)?{namespace:e}:(0,r.isCaipChainId)(e)?(0,r.parseCaipChainId)(e):{};n.isWalletScope=e=>{const{namespace:t}=(0,n.parseScopeString)(e);return t===r.KnownCaipNamespace.Wallet}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/types.cjs"}],[2207,{"./types.cjs":2206,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getValidScopes=n.isValidScope=void 0;const r=e("@metamask/utils"),s=e("./types.cjs");n.isValidScope=(e,t)=>{const{namespace:n,reference:a}=(0,s.parseScopeString)(e);if(!n)return!1;const{references:o,methods:i,notifications:c,accounts:l,rpcDocuments:d,rpcEndpoints:u,...h}=t;if(!i||!c)return!1;if(!("wallet"===n||a||o&&0!==o.length))return!1;if(o){if(a)return!1;if(!o.every((e=>(0,r.isCaipReference)(e))))return!1}if(!i.every((e=>"string"==typeof e&&""!==e.trim())))return!1;return!!c.every((e=>"string"==typeof e&&""!==e.trim()))&&!(Object.keys(h).length>0)};n.getValidScopes=(e,t)=>{const r={};for(const[t,s]of Object.entries(e||{}))(0,n.isValidScope)(t,s)&&(r[t]={accounts:[],...s});const s={};for(const[e,r]of Object.entries(t||{}))(0,n.isValidScope)(e,r)&&(s[e]={accounts:[],...r});return{validRequiredScopes:r,validOptionalScopes:s}}}}},{package:"@metamask/multichain-api-middleware>@metamask/chain-agnostic-permission",file:"node_modules/@metamask/multichain-api-middleware/node_modules/@metamask/chain-agnostic-permission/dist/scope/validation.cjs"}],[221,{"../../../../shared/constants/time":5827,"../../../../shared/modules/fetch-with-timeout":5908,"./trust-signals-util":223},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.scanAddress=l,n.scanAddressAndAddToCache=async function(e,t,n){const r=t.getAddressSecurityAlertResponse(e);if(r)return r;const s=(0,o.getChainId)(n),a=await l(s,e);return t.addAddressSecurityAlertResponse(e,a),a};var r,s=e("../../../../shared/constants/time"),a=(r=e("../../../../shared/modules/fetch-with-timeout"))&&r.__esModule?r:{default:r},o=e("./trust-signals-util");const i=5*s.SECOND,c="address/evm/scan";async function l(e,t){const n="https://security-alerts.api.cx.metamask.io";const r=`${n}/${c}`,s={chain:e,address:t},o=await(0,a.default)(i)(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});return await o.json()}}}},{package:"$root$",file:"app/scripts/lib/trust-signals/security-alerts-api.ts"}],[222,{"../../../../shared/modules/transaction.utils":5926,"../ppom/security-alerts-api":166,"./security-alerts-api":221,"./trust-signals-util":223},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createTrustSignalsMiddleware=function(e,t,n,c,l){return async(d,u,h)=>{try{if(!(0,o.isSecurityAlertsEnabledByUser)(c)||!(0,s.isSecurityAlertsAPIEnabled)())return;(0,o.isEthSendTransaction)(d)?(!function(e,t,n){if(!(0,o.hasValidTransactionParams)(e))return;const{to:r}=e.params[0];(0,a.scanAddressAndAddToCache)(r,t,n).catch((e=>{console.error("[createTrustSignalsMiddleware] error scanning address for transaction:",e)}))}(d,t,e),i(d,n)):(0,o.isEthSignTypedData)(d)?(!function(e,t,n){var s;if(!(0,o.hasValidTypedDataParams)(e))return;const i=(0,r.parseTypedDataMessage)("string"==typeof e.params[1]?e.params[1]:JSON.stringify(e.params[1])),c=null===(s=i.domain)||void 0===s?void 0:s.verifyingContract;if(!c)return;(0,a.scanAddressAndAddToCache)(c,t,n).catch((e=>{console.error("[createTrustSignalsMiddleware] error scanning address for signature:",e)}))}(d,t,e),i(d,n)):((0,o.isConnected)(d,l)||(0,o.connectScreenHasBeenPrompted)(d))&&i(d,n)}catch(e){console.error("[createTrustSignalsMiddleware] error: ",e)}finally{h()}}};var r=e("../../../../shared/modules/transaction.utils"),s=e("../ppom/security-alerts-api"),a=e("./security-alerts-api"),o=e("./trust-signals-util");function i(e,t){e.origin&&t.scanUrl(e.origin).catch((e=>{console.error("[createTrustSignalsMiddleware] error:",e)}))}}}},{package:"$root$",file:"app/scripts/lib/trust-signals/trust-signals-middleware.ts"}],[223,{"../../../../shared/constants/app":5798,"../../../../shared/constants/network":5813,"../../../../shared/modules/selectors/networks":5921,"./types":224},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.connectScreenHasBeenPrompted=function(e){return e.method===a.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS||e.method===a.MESSAGE_TYPE.WALLET_REQUEST_PERMISSIONS},n.getChainId=function(e){var t;const n=null===(t=(0,s.getProviderConfig)({metamask:e.state}))||void 0===t?void 0:t.chainId;if(!n)throw new Error("Chain ID not found");return function(e){return{[r.CHAIN_IDS.ARBITRUM]:o.SupportedEVMChain.Arbitrum,[r.CHAIN_IDS.AVALANCHE]:o.SupportedEVMChain.Avalanche,[r.CHAIN_IDS.BASE]:o.SupportedEVMChain.Base,[r.CHAIN_IDS.BASE_SEPOLIA]:o.SupportedEVMChain.BaseSepolia,[r.CHAIN_IDS.BSC]:o.SupportedEVMChain.Bsc,[r.CHAIN_IDS.MAINNET]:o.SupportedEVMChain.Ethereum,[r.CHAIN_IDS.OPTIMISM]:o.SupportedEVMChain.Optimism,[r.CHAIN_IDS.POLYGON]:o.SupportedEVMChain.Polygon,[r.CHAIN_IDS.ZKSYNC_ERA]:o.SupportedEVMChain.Zksync,[r.CHAIN_IDS.ZK_SYNC_ERA_TESTNET]:o.SupportedEVMChain.ZksyncSepolia,"0x76adf1":o.SupportedEVMChain.Zora,[r.CHAIN_IDS.LINEA_MAINNET]:o.SupportedEVMChain.Linea,[r.CHAIN_IDS.BLAST]:o.SupportedEVMChain.Blast,[r.CHAIN_IDS.SCROLL]:o.SupportedEVMChain.Scroll,[r.CHAIN_IDS.SEPOLIA]:o.SupportedEVMChain.EthereumSepolia,"0x27bc86aa":o.SupportedEVMChain.Degen,[r.CHAIN_IDS.AVALANCHE_TESTNET]:o.SupportedEVMChain.AvalancheFuji,"0x343b":o.SupportedEVMChain.ImmutableZkevm,"0x34a1":o.SupportedEVMChain.ImmutableZkevmTestnet,[r.CHAIN_IDS.GNOSIS]:o.SupportedEVMChain.Gnosis,"0x1e0":o.SupportedEVMChain.Worldchain,"0x79a":o.SupportedEVMChain.SoneiumMinato,"0x7e4":o.SupportedEVMChain.Ronin,[r.CHAIN_IDS.APECHAIN_MAINNET]:o.SupportedEVMChain.ApeChain,"0x849ea":o.SupportedEVMChain.ZeroNetwork,[r.CHAIN_IDS.BERACHAIN]:o.SupportedEVMChain.Berachain,"0x138c5":o.SupportedEVMChain.BerachainBartio,[r.CHAIN_IDS.INK]:o.SupportedEVMChain.Ink,[r.CHAIN_IDS.INK_SEPOLIA]:o.SupportedEVMChain.InkSepolia,"0xab5":o.SupportedEVMChain.Abstract,"0x2b74":o.SupportedEVMChain.AbstractTestnet,"0x74c":o.SupportedEVMChain.Soneium,[r.CHAIN_IDS.UNICHAIN]:o.SupportedEVMChain.Unichain,[r.CHAIN_IDS.SEI]:o.SupportedEVMChain.Sei,[r.CHAIN_IDS.FLOW]:o.SupportedEVMChain.FlowEvm}[e.toLowerCase()]}(n)},n.hasValidTransactionParams=function(e){if(!("params"in e)||!e.params)return!1;if(!Array.isArray(e.params)||0===e.params.length)return!1;const t=e.params[0];return"object"==typeof t&&null!==t&&"to"in t},n.hasValidTypedDataParams=function(e){if(!("params"in e)||!e.params)return!1;if(!Array.isArray(e.params)||e.params.length<2)return!1;return e.params[1]!==undefined&&null!==e.params[1]},n.isConnected=function(e,t){if(!e.origin||e.method!==a.MESSAGE_TYPE.ETH_ACCOUNTS)return!1;const n=t(e.origin);return Array.isArray(n)&&n.length>0},n.isEthSendTransaction=function(e){return e.method===a.MESSAGE_TYPE.ETH_SEND_TRANSACTION},n.isEthSignTypedData=function(e){return e.method===a.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA||e.method===a.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V1||e.method===a.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V3||e.method===a.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V4},n.isSecurityAlertsEnabledByUser=function(e){const{securityAlertsEnabled:t}=e.state;return t};var r=e("../../../../shared/constants/network"),s=e("../../../../shared/modules/selectors/networks"),a=e("../../../../shared/constants/app"),o=e("./types")}}},{package:"$root$",file:"app/scripts/lib/trust-signals/trust-signals-util.ts"}],[225,{"../../../../shared/constants/app":5798,"../../../../shared/constants/verification":5831,"../../../../shared/modules/selectors/networks":5921,"@ethersproject/hash":587,"@ethersproject/wallet":654,"@metamask/rpc-errors":2524,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createTxVerificationMiddleware=function(e,t=i.TRUSTED_SIGNERS){return function(n,d,u,h){if(n.method!==c.MESSAGE_TYPE.ETH_SEND_TRANSACTION||!Array.isArray(n.params)||!function(e){return(0,o.isObject)(e[0])&&"string"==typeof e[0].data&&"string"==typeof e[0].from&&"string"==typeof e[0].to&&"string"==typeof e[0].value&&(!(0,o.hasProperty)(e[0],"chainId")||"string"==typeof e[0].chainId&&e[0].chainId.startsWith("0x"))}(n.params))return u();const p=n.params[0],m="string"==typeof p.chainId?p.chainId.toLowerCase():(0,l.getCurrentChainId)({metamask:e.state}),f=(0,i.getExperience)(p.to.toLowerCase(),m);if(!f||!i.EXPERIENCES_TO_VERIFY.includes(f))return u();const g=`0x${p.data.slice(-i.TX_SIG_LEN)}`,b=(0,s.verifyMessage)(function(e){const t={to:(0,r.hashMessage)(e.to.toLowerCase()),from:(0,r.hashMessage)(e.from.toLowerCase()),data:(0,r.hashMessage)(e.data.toLowerCase().slice(0,e.data.length-i.TX_SIG_LEN)),value:(0,r.hashMessage)(e.value.toLowerCase())};return(0,r.hashMessage)(JSON.stringify(t))}(p),g);return b!==t[f]?h(a.rpcErrors.invalidParams("Invalid transaction signature.")):u()}};var r=e("@ethersproject/hash"),s=e("@ethersproject/wallet"),a=e("@metamask/rpc-errors"),o=e("@metamask/utils"),i=e("../../../../shared/constants/verification"),c=e("../../../../shared/constants/app"),l=e("../../../../shared/modules/selectors/networks")}}},{package:"$root$",file:"app/scripts/lib/tx-verification/tx-verification-middleware.ts"}],[227,{"../../development/build/constants":443,"../../shared/constants/app":5798,"../../shared/constants/bridge":5799,"../../shared/constants/hardware-wallets":5806,"../../shared/constants/keyring":5807,"../../shared/constants/logs":5809,"../../shared/constants/metametrics":5810,"../../shared/constants/multichain/networks":5812,"../../shared/constants/network":5813,"../../shared/constants/onboarding":5816,"../../shared/constants/permissions":5817,"../../shared/constants/swaps":5825,"../../shared/constants/time":5827,"../../shared/constants/tokens":5828,"../../shared/constants/transaction":5829,"../../shared/constants/urls":5830,"../../shared/lib/accounts":5834,"../../shared/lib/accounts/solana-wallet-snap":5837,"../../shared/lib/fetch-with-cache":5874,"../../shared/lib/metamask-controller-utils":5879,"../../shared/lib/snaps/snaps":5887,"../../shared/lib/storage-helpers":5888,"../../shared/lib/token-util":5891,"../../shared/lib/trace":5892,"../../shared/lib/transactions-controller-utils":5894,"../../shared/lib/translate":5897,"../../shared/modules/environment":5905,"../../shared/modules/mv3.utils":5913,"../../shared/modules/network.utils":5914,"../../shared/modules/selectors":5920,"../../shared/modules/selectors/networks":5921,"../../shared/modules/string-utils":5924,"../../shared/modules/transaction.utils":5926,"../../shared/notifications":5928,"./constants/stream":9,"./controller-init/accounts/account-tree-controller-init":10,"./controller-init/assets":12,"./controller-init/confirmations/ppom-controller-init":16,"./controller-init/confirmations/transaction-controller-init":17,"./controller-init/defi-positions/defi-positions-controller-init":18,"./controller-init/delegation/delegation-controller-init":19,"./controller-init/identity/authentication-controller-init":20,"./controller-init/identity/user-storage-controller-init":21,"./controller-init/institutional-snap/institutional-snap-controller-init":22,"./controller-init/multichain":61,"./controller-init/notifications/notification-services-controller-init":68,"./controller-init/notifications/notification-services-push-controller-init":69,"./controller-init/seedless-onboarding/seedless-onboarding-controller-init":70,"./controller-init/smart-transactions/smart-transactions-controller-init":71,"./controller-init/snaps":74,"./controller-init/utils":82,"./controllers/account-order":83,"./controllers/account-tracker-controller":84,"./controllers/alert-controller":85,"./controllers/app-metadata":86,"./controllers/app-state-controller":87,"./controllers/decrypt-message":88,"./controllers/encryption-public-key":89,"./controllers/metametrics-controller":91,"./controllers/metametrics-data-deletion/metametrics-data-deletion":92,"./controllers/network-order":93,"./controllers/onboarding":94,"./controllers/permissions":98,"./controllers/preferences-controller":101,"./controllers/swaps":105,"./detect-multiple-instances":108,"./lib/AccountIdentitiesPetnamesBridge":119,"./lib/AddressBookPetnamesBridge":120,"./lib/ComposableObservableStore":121,"./lib/PatchStore":123,"./lib/SnapsNameProvider":124,"./lib/WeakRefObjectMap":125,"./lib/approval/utils":126,"./lib/backup":127,"./lib/createDupeReqFilterStream":128,"./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware":129,"./lib/createLoggerMiddleware":130,"./lib/createMainFrameOriginMiddleware":131,"./lib/createMetaRPCHandler":132,"./lib/createMetamaskMiddleware":133,"./lib/createOnboardingMiddleware":134,"./lib/createOriginMiddleware":135,"./lib/createOriginThrottlingMiddleware":136,"./lib/createRPCMethodTrackingMiddleware":137,"./lib/createTabIdMiddleware":138,"./lib/createTracingMiddleware":139,"./lib/encryptor-factory":142,"./lib/hardware-keyring-builder-factory":149,"./lib/multichain/address":153,"./lib/network-controller/messenger-action-handlers":154,"./lib/network-controller/utils":155,"./lib/offscreen-bridge/lattice-offscreen-keyring":157,"./lib/offscreen-bridge/ledger-offscreen-bridge":158,"./lib/offscreen-bridge/trezor-offscreen-bridge":159,"./lib/open-update-tab-and-reload":160,"./lib/ppom/ppom-middleware":163,"./lib/ppom/ppom-util":164,"./lib/rpc-method-middleware":183,"./lib/segment":186,"./lib/signature/util":190,"./lib/snap-keyring":192,"./lib/snap-keyring/keyring-snaps-permissions":193,"./lib/state-utils":200,"./lib/stream-utils":205,"./lib/transaction/containers/util":207,"./lib/transaction/decode/util":213,"./lib/transaction/eip5792":215,"./lib/transaction/metrics":218,"./lib/transaction/transaction-relay":219,"./lib/transaction/util":220,"./lib/trust-signals/trust-signals-middleware":222,"./lib/tx-verification/tx-verification-middleware":225,"./lib/util":226,"./services/data-deletion-service":432,"./services/oauth/oauth-service":438,"./services/oauth/web-authenticator-factory":440,"@ethersproject/abi":558,"@keystonehq/metamask-airgapped-keyring":764,"@metamask/accounts-controller":1415,"@metamask/address-book-controller":1418,"@metamask/announcement-controller":1420,"@metamask/approval-controller":1423,"@metamask/assets-controllers":1457,"@metamask/base-controller":1476,"@metamask/bridge-controller":1483,"@metamask/bridge-status-controller":1508,"@metamask/chain-agnostic-permission":1542,"@metamask/controller-utils":1559,"@metamask/ens-controller":1592,"@metamask/error-reporting-service":1594,"@metamask/eth-json-rpc-filters":1648,"@metamask/eth-json-rpc-filters/subscriptionManager":1650,"@metamask/eth-json-rpc-middleware":1662,"@metamask/eth-ledger-bridge-keyring":1723,"@metamask/eth-sig-util":1777,"@metamask/eth-trezor-keyring":1943,"@metamask/gas-fee-controller":2009,"@metamask/json-rpc-engine":2027,"@metamask/json-rpc-middleware-stream":2031,"@metamask/keyring-api":2077,"@metamask/keyring-controller":2084,"@metamask/logging-controller":2163,"@metamask/metamask-eth-abis":2181,"@metamask/multichain-api-middleware":2187,"@metamask/name-controller":2309,"@metamask/network-controller":2321,"@metamask/notification-services-controller/notification-services":2337,"@metamask/obs-store":2378,"@metamask/obs-store/dist/asStream":2377,"@metamask/permission-controller":2385,"@metamask/permission-log-controller":2394,"@metamask/phishing-controller":2398,"@metamask/remote-feature-flag-controller":2517,"@metamask/rpc-errors":2524,"@metamask/scure-bip39/dist/wordlists/english":2528,"@metamask/seedless-onboarding-controller":2544,"@metamask/selected-network-controller":2549,"@metamask/signature-controller":2551,"@metamask/snaps-controllers":2619,"@metamask/snaps-rpc-methods":2683,"@metamask/transaction-controller":2925,"@metamask/user-operation-controller":2952,"@metamask/utils":2974,"@sentry/browser":3091,"await-semaphore":3936,buffer:4106,"eth-chainlist":4307,"eth-lattice-keyring":4312,events:4454,lodash:4912,loglevel:4920,nanoid:5021,"readable-stream":5277},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){Object.defineProperty(n,"__esModule",{value:!0}),n.default=n.METAMASK_CONTROLLER_EVENTS=void 0;var r=mn(e("events")),s=e("readable-stream"),a=e("@metamask/assets-controllers"),o=e("@metamask/json-rpc-engine"),i=e("@metamask/json-rpc-middleware-stream"),c=e("@metamask/obs-store"),l=e("@metamask/obs-store/dist/asStream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),h=e("@metamask/keyring-controller"),p=mn(e("@metamask/eth-json-rpc-filters")),m=mn(e("@metamask/eth-json-rpc-filters/subscriptionManager")),f=e("@metamask/rpc-errors"),g=e("await-semaphore"),b=mn(e("loglevel")),C=e("@metamask/eth-trezor-keyring"),y=e("@metamask/eth-ledger-bridge-keyring"),w=mn(e("eth-lattice-keyring")),S=e("eth-chainlist"),v=e("@keystonehq/metamask-airgapped-keyring"),k=e("nanoid"),T=e("@sentry/browser"),P=e("@metamask/address-book-controller"),E=e("@metamask/approval-controller"),M=e("@metamask/base-controller"),A=e("@metamask/ens-controller"),I=e("@metamask/phishing-controller"),N=e("@metamask/announcement-controller"),_=e("@metamask/network-controller"),O=e("@metamask/gas-fee-controller"),R=e("@metamask/permission-controller"),x=e("@metamask/selected-network-controller"),j=e("@metamask/logging-controller"),B=e("@metamask/permission-log-controller"),F=e("@metamask/snaps-controllers"),$=e("@metamask/snaps-rpc-methods"),D=e("@metamask/controller-utils"),L=e("@metamask/accounts-controller"),U=e("@metamask/remote-feature-flag-controller"),K=e("@metamask/signature-controller"),H=e("@metamask/scure-bip39/dist/wordlists/english"),q=e("@metamask/name-controller"),V=e("@metamask/user-operation-controller"),G=e("@metamask/bridge-controller"),W=e("@metamask/transaction-controller"),z=e("@ethersproject/abi"),J=e("@metamask/metamask-eth-abis"),Y=e("@metamask/keyring-api"),Q=e("@metamask/utils"),X=e("@metamask/eth-sig-util"),Z=e("@metamask/notification-services-controller/notification-services"),ee=e("@metamask/multichain-api-middleware"),te=e("@metamask/chain-agnostic-permission"),ne=e("@metamask/bridge-status-controller"),re=e("@metamask/error-reporting-service"),se=e("@metamask/seedless-onboarding-controller"),ae=e("../../shared/constants/transaction"),oe=e("../../shared/constants/swaps"),ie=e("../../shared/constants/network"),ce=e("../../shared/constants/hardware-wallets"),le=e("../../shared/constants/keyring"),de=e("../../shared/constants/permissions"),ue=e("../../shared/notifications"),he=e("../../shared/constants/time"),pe=e("../../shared/constants/app"),me=e("../../shared/constants/metametrics"),fe=e("../../shared/constants/logs"),ge=e("../../shared/lib/storage-helpers"),be=e("../../shared/lib/token-util"),Ce=e("../../shared/modules/string-utils"),ye=e("../../shared/modules/transaction.utils"),we=e("../../shared/constants/tokens"),Se=e("../../shared/lib/metamask-controller-utils"),ve=e("../../shared/modules/mv3.utils"),ke=e("../../shared/modules/network.utils"),Te=e("../../shared/modules/selectors"),Pe=e("../../shared/constants/urls"),Ee=e("../../shared/lib/transactions-controller-utils"),Me=e("../../shared/modules/selectors/networks"),Ae=e("../../shared/lib/trace"),Ie=e("../../development/build/constants"),Ne=mn(e("../../shared/lib/fetch-with-cache")),_e=e("../../shared/constants/multichain/networks"),Oe=e("../../shared/constants/bridge"),Re=e("../../shared/lib/accounts"),xe=e("../../shared/lib/accounts/solana-wallet-snap"),je=e("../../shared/constants/onboarding"),Be=e("../../shared/lib/translate"),Fe=e("../../shared/modules/environment"),$e=e("../../shared/lib/snaps/snaps"),De=e("./lib/transaction/metrics"),Le=e("./lib/snap-keyring/keyring-snaps-permissions"),Ue=e("./lib/SnapsNameProvider"),Ke=e("./lib/AddressBookPetnamesBridge"),He=e("./lib/AccountIdentitiesPetnamesBridge"),qe=e("./lib/ppom/ppom-middleware"),Ve=e("./lib/trust-signals/trust-signals-middleware"),Ge=e("./detect-multiple-instances"),We=mn(e("./lib/ComposableObservableStore")),ze=mn(e("./controllers/account-tracker-controller")),Je=mn(e("./lib/createDupeReqFilterStream")),Ye=mn(e("./lib/createLoggerMiddleware")),Qe=e("./lib/rpc-method-middleware"),Xe=mn(e("./lib/createOriginMiddleware")),Ze=mn(e("./lib/createMainFrameOriginMiddleware")),et=mn(e("./lib/createTabIdMiddleware")),tt=e("./controllers/network-order"),nt=e("./controllers/account-order"),rt=mn(e("./lib/createOnboardingMiddleware")),st=e("./lib/stream-utils"),at=e("./controllers/preferences-controller"),ot=e("./controllers/app-state-controller"),it=e("./controllers/alert-controller"),ct=mn(e("./controllers/onboarding")),lt=mn(e("./lib/backup")),dt=mn(e("./controllers/decrypt-message")),ut=mn(e("./controllers/swaps")),ht=mn(e("./controllers/metametrics-controller")),pt=e("./lib/segment"),mt=mn(e("./lib/createMetaRPCHandler")),ft=e("./lib/util"),gt=mn(e("./lib/createMetamaskMiddleware")),bt=e("./lib/hardware-keyring-builder-factory"),Ct=mn(e("./controllers/encryption-public-key")),yt=mn(e("./controllers/app-metadata")),wt=e("./controllers/permissions"),St=e("./controllers/metametrics-data-deletion/metametrics-data-deletion"),vt=e("./services/data-deletion-service"),kt=mn(e("./lib/createRPCMethodTrackingMiddleware")),Tt=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),Pt=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),Et=e("./lib/snap-keyring"),Mt=e("./lib/encryptor-factory"),At=e("./lib/transaction/util"),It=e("./lib/signature/util"),Nt=e("./lib/offscreen-bridge/lattice-offscreen-keyring"),_t=e("./lib/WeakRefObjectMap"),Ot=e("./constants/stream"),Rt=e("./lib/tx-verification/tx-verification-middleware"),xt=e("./lib/ppom/ppom-util"),jt=mn(e("./lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware")),Bt=e("./lib/multichain/address"),Ft=e("./lib/transaction/decode/util"),$t=mn(e("./lib/createTracingMiddleware")),Dt=mn(e("./lib/createOriginThrottlingMiddleware")),Lt=e("./lib/PatchStore"),Ut=e("./lib/state-utils"),Kt=e("./lib/approval/utils"),Ht=e("./controller-init/institutional-snap/institutional-snap-controller-init"),qt=e("./controller-init/multichain"),Vt=e("./controller-init/assets"),Gt=e("./controller-init/confirmations/transaction-controller-init"),Wt=e("./controller-init/confirmations/ppom-controller-init"),zt=e("./controller-init/smart-transactions/smart-transactions-controller-init"),Jt=e("./controller-init/utils"),Yt=e("./controller-init/snaps"),Qt=e("./controller-init/identity/authentication-controller-init"),Xt=e("./controller-init/identity/user-storage-controller-init"),Zt=e("./controller-init/defi-positions/defi-positions-controller-init"),en=e("./lib/transaction/eip5792"),tn=e("./controller-init/notifications/notification-services-controller-init"),nn=e("./controller-init/notifications/notification-services-push-controller-init"),rn=e("./controller-init/delegation/delegation-controller-init"),sn=e("./lib/network-controller/messenger-action-handlers"),an=e("./lib/network-controller/utils"),on=e("./lib/transaction/transaction-relay"),cn=e("./lib/open-update-tab-and-reload"),ln=e("./controller-init/accounts/account-tree-controller-init"),dn=mn(e("./services/oauth/oauth-service")),un=e("./services/oauth/web-authenticator-factory"),hn=e("./controller-init/seedless-onboarding/seedless-onboarding-controller-init"),pn=e("./lib/transaction/containers/util");function mn(e){return e&&e.__esModule?e:{default:e}}function fn(e,t){(function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,t),t.add(e)}function gn(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bn(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}n.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",DECRYPT_MESSAGE_MANAGER_UPDATE_BADGE:"DecryptMessageManager:updateBadge",ENCRYPTION_PUBLIC_KEY_MANAGER_UPDATE_BADGE:"EncryptionPublicKeyManager:updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange",APP_STATE_UNLOCK_CHANGE:"AppStateController:unlockChange",METAMASK_NOTIFICATIONS_LIST_UPDATED:"NotificationServicesController:notificationsListUpdated",METAMASK_NOTIFICATIONS_MARK_AS_READ:"NotificationServicesController:markNotificationsAsRead"};const Cn="eip-1193",yn="caip-multichain",wn={[Ie.ENVIRONMENT.DEVELOPMENT]:U.EnvironmentType.Development,[Ie.ENVIRONMENT.RELEASE_CANDIDATE]:U.EnvironmentType.ReleaseCandidate,[Ie.ENVIRONMENT.PRODUCTION]:U.EnvironmentType.Production},Sn={flask:U.DistributionType.Flask,main:U.DistributionType.Main,beta:U.DistributionType.Beta,experimental:U.DistributionType.Main};var vn=new WeakSet;class kn extends r.default{constructor(e){var t;super(),fn(this,vn),gn(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:n,networkClientId:r})=>{switch(t){case D.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:r});case D.ERC721:case D.ERC1155:return this.nftController.watchNft(e,t,n,r);default:throw new Error(`Asset type ${t} not supported`)}})),gn(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),gn(this,"updateCaveat",((e,t,n,r)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,n,r)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),gn(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw b.default.error(e.message),e}})),gn(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw b.default.error(e.message),e}})),gn(this,"setEnabledNetworks",((e,t)=>{try{this.networkOrderController.setEnabledNetworks(e,t)}catch(e){throw b.default.error(e.message),e}})),gn(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw b.default.error(e.message),e}})),gn(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),gn(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),gn(this,"resolvePendingApproval",(async(e,t,n)=>{try{await this.approvalController.accept(e,t,n)}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}})),gn(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new f.JsonRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*he.MILLISECOND),this.opts=e,this.requestSafeReload=e.requestSafeReload??(()=>Promise.resolve()),this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const r=e.initState||{},s="13.0.1";this.recordFirstTimeInfo(r),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.offscreenPromise=e.offscreenPromise??Promise.resolve(),this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.initializeChainlist(),this.controllerMessenger=new M.Messenger,this.loggingController=new j.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController",allowedActions:[],allowedEvents:[]}),state:r.LoggingController}),this.currentMigrationVersion=e.currentMigrationVersion,this.store=new We.default({state:r,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new g.Mutex,this.syncSeedlessGlobalPasswordMutex=new g.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&this.loggingController.add({type:j.LogType.GenericLog,data:{event:fe.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:s}})})),this.appMetadataController=new yt.default({state:r.AppMetadataController,messenger:this.controllerMessenger.getRestricted({name:"AppMetadataController",allowedActions:[],allowedEvents:[]}),currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:s}),this.approvalController=new E.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[D.ApprovalType.PersonalSign,D.ApprovalType.EthSignTypedData,D.ApprovalType.Transaction,D.ApprovalType.WatchAsset,D.ApprovalType.EthGetEncryptionPublicKey,D.ApprovalType.EthDecrypt,pe.SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage]});const o=this.controllerMessenger.getRestricted({name:"ErrorReportingService",allowedActions:[],allowedEvents:[]});new re.ErrorReportingService({messenger:o,captureException:T.captureException});const i=this.controllerMessenger.getRestricted({name:"NetworkController",allowedEvents:[],allowedActions:["ErrorReportingService:captureException"]});let c=r.NetworkController;const l=[D.ChainId["megaeth-testnet"],D.ChainId["monad-testnet"]];if(!c){c=(0,_.getDefaultNetworkControllerState)(l);const e=c.networkConfigurationsByChainId;let t;Object.values(e).forEach((e=>{const t=e.rpcEndpoints[0].networkClientId;(0,Q.hasProperty)(D.BlockExplorerUrl,t)&&(e.blockExplorerUrls=[D.BlockExplorerUrl[t]]),e.defaultBlockExplorerUrlIndex=0})),e[ie.CHAIN_IDS.MAINNET].rpcEndpoints[0].failoverUrls=(0,ie.getFailoverUrlsForInfuraNetwork)("ethereum-mainnet"),e[ie.CHAIN_IDS.LINEA_MAINNET].rpcEndpoints[0].failoverUrls=(0,ie.getFailoverUrlsForInfuraNetwork)("linea-mainnet"),e[ie.CHAIN_IDS.BASE].rpcEndpoints[0].failoverUrls=(0,ie.getFailoverUrlsForInfuraNetwork)("base-mainnet"),t=e[ie.CHAIN_IDS.MAINNET],c.selectedNetworkClientId=t.rpcEndpoints[t.defaultRpcEndpointIndex].networkClientId}c.networkConfigurationsByChainId&&!Object.values(c.networkConfigurationsByChainId).flatMap((e=>e.rpcEndpoints.map((e=>e.networkClientId)))).includes(c.selectedNetworkClientId)&&((0,T.captureException)(new Error(`NetworkController state is invalid: \`selectedNetworkClientId\` '${c.selectedNetworkClientId}' does not refer to an RPC endpoint within a network configuration`)),c.selectedNetworkClientId=c.networkConfigurationsByChainId[ie.CHAIN_IDS.MAINNET].rpcEndpoints[0].networkClientId),this.networkController=new _.NetworkController({messenger:i,state:c,infuraProjectId:e.infuraProjectId,getBlockTrackerOptions:()=>({pollingInterval:20*he.SECOND,retryTimeout:20*he.SECOND}),getRpcServiceOptions:e=>{const t={fetch:globalThis.fetch.bind(globalThis),btoa:globalThis.btoa.bind(globalThis)};return(0,an.getIsQuicknodeEndpointUrl)(e)?{...t,policyOptions:{maxRetries:4,maxConsecutiveFailures:70}}:{...t,policyOptions:{maxRetries:4,maxConsecutiveFailures:35}}},additionalDefaultNetworks:l}),i.subscribe("NetworkController:rpcEndpointUnavailable",(async({chainId:t,endpointUrl:n,error:r})=>{(0,sn.onRpcEndpointUnavailable)({chainId:t,endpointUrl:n,error:r,infuraProjectId:e.infuraProjectId,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),metaMetricsId:this.metaMetricsController.state.metaMetricsId})})),i.subscribe("NetworkController:rpcEndpointDegraded",(async({chainId:t,endpointUrl:n})=>{(0,sn.onRpcEndpointDegraded)({chainId:t,endpointUrl:n,infuraProjectId:e.infuraProjectId,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),metaMetricsId:this.metaMetricsController.state.metaMetricsId})})),this.networkController.initializeProvider(),this.multichainSubscriptionManager=new ee.MultichainSubscriptionManager({getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController)}),this.multichainMiddlewareManager=new ee.MultichainMiddlewareManager,this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkVersions={};const d=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange","SnapKeyring:accountAssetListUpdated","SnapKeyring:accountBalancesUpdated","SnapKeyring:accountTransactionsUpdated","MultichainNetworkController:networkDidChange"],allowedActions:["KeyringController:getState","KeyringController:getKeyringsByType"]});this.accountsController=new L.AccountsController({messenger:d,state:r.AccountsController});const p=this.controllerMessenger.getRestricted({name:"PreferencesController",allowedActions:["AccountsController:setSelectedAccount","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","NetworkController:getState"],allowedEvents:["AccountsController:stateChange"]});this.preferencesController=new at.PreferencesController({state:{currentLocale:e.initLangCode??"",...r.PreferencesController},messenger:p});const m=this.controllerMessenger.getRestricted({name:"TokenListController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]});this.tokenListController=new a.TokenListController({chainId:bn(vn,this,Mn).call(this,{metamask:this.networkController.state}),preventPollingOnNetworkRestart:!bn(vn,this,En).call(this,this.preferencesController.state),messenger:m,state:r.TokenListController});const S=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","AccountsController:getSelectedAccount","AccountsController:getAccount","AccountsController:listAccounts"],allowedEvents:["NetworkController:networkDidChange","AccountsController:selectedEvmAccountChange","PreferencesController:stateChange","TokenListController:stateChange","NetworkController:stateChange","KeyringController:accountRemoved"]});this.tokensController=new a.TokensController({state:r.TokensController,provider:this.provider,messenger:S,chainId:bn(vn,this,Mn).call(this)});const k=this.controllerMessenger.getRestricted({name:"MetaMetricsController",allowedActions:["PreferencesController:getState","NetworkController:getState","NetworkController:getNetworkClientById"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]});this.metaMetricsController=new ht.default({state:r.MetaMetricsController,messenger:k,segment:pt.segment,version:"13.0.1",environment:"production",extension:this.extension,captureException:T.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const $=new vt.DataDeletionService,H=this.controllerMessenger.getRestricted({name:"MetaMetricsDataDeletionController",allowedActions:["MetaMetricsController:getState"],allowedEvents:[]});this.metaMetricsDataDeletionController=new St.MetaMetricsDataDeletionController({dataDeletionService:$,messenger:H,state:r.metaMetricsDataDeletionController});const z=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),J=oe.GAS_API_BASE_URL;this.gasFeeController=new O.GasFeeController({state:r.GasFeeController,interval:1e4,messenger:z,clientId:oe.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{i.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${J}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${J}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>bn(vn,this,Mn).call(this)===ie.CHAIN_IDS.BSC,getChainId:()=>bn(vn,this,Mn).call(this)}),this.appStateController=new ot.AppStateController({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),state:r.AppStateController,onInactiveTimeout:()=>this.setLocked(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,"PreferencesController:getState"],allowedEvents:["KeyringController:qrKeyringStateChange","PreferencesController:stateChange"]}),extension:this.extension});const Y=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new a.CurrencyRateController({includeUsdRate:!0,messenger:Y,state:r.CurrencyController});const X=this.currencyRateController.fetchMultiExchangeRate.bind(this.currencyRateController);this.currencyRateController.fetchMultiExchangeRate=(...e)=>this.preferencesController.state.useCurrencyRateCheck?X(...e):{conversionRate:null,usdConversionRate:null};const Z=this.controllerMessenger.getRestricted({name:"TokenBalancesController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokensController:getState","PreferencesController:getState","AccountsController:getSelectedAccount","AccountsController:listAccounts"],allowedEvents:["PreferencesController:stateChange","TokensController:stateChange","NetworkController:stateChange","KeyringController:accountRemoved"]});this.tokenBalancesController=new a.TokenBalancesController({messenger:Z,state:r.TokenBalancesController,interval:3e4});const te=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new I.PhishingController({messenger:te,state:r.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined});const se=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new N.AnnouncementController({messenger:se,allAnnouncements:ue.UI_NOTIFICATIONS,state:r.AnnouncementController});const ae=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange","NetworkController:networkRemoved"],allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","NetworkController:setActiveNetwork"]});let ce=r.NetworkOrderController;this.networkOrderController=new tt.NetworkOrderController({messenger:ae,state:ce});const le=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new nt.AccountOrderController({messenger:le,state:r.AccountOrderController});const ge=this.controllerMessenger.getRestricted({name:"RatesController"});this.multichainRatesController=new a.RatesController({state:r.MultichainRatesController,messenger:ge,includeUsdRate:!0,fetchMultiExchangeRate:a.fetchMultiExchangeRate}),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,ft.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:n}=e,{useCurrencyRateCheck:r}=t;r&&!n?this.tokenRatesController.enable():!r&&n&&this.tokenRatesController.disable()}),this.preferencesController.state)),this.ensController=new A.EnsController({messenger:this.controllerMessenger.getRestricted({name:"EnsController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:[]}),onNetworkDidChange:i.subscribe.bind(i,"NetworkController:networkDidChange")});const be=this.controllerMessenger.getRestricted({name:"OnboardingController",allowedActions:[],allowedEvents:[]});this.onboardingController=new ct.default({messenger:be,state:r.OnboardingController}),this.oauthService=new dn.default({env:{googleClientId:"795351133007-6d0s31utj13knv440fgjo2ur93241gb6.apps.googleusercontent.com",appleClientId:"io.metamask.appleloginclient.prod"},webAuthenticator:(0,un.webAuthenticatorFactory)(),bufferedTrace:this.metaMetricsController.bufferedTrace.bind(this.metaMetricsController),bufferedEndTrace:this.metaMetricsController.bufferedEndTrace.bind(this.metaMetricsController)});let Ce=[(0,h.keyringBuilderFactory)(v.MetaMaskKeyring)];const ye=null===(t=this.opts.overrides)||void 0===t?void 0:t.keyrings;if(!1===ve.isManifestV3){const e=[(null==ye?void 0:ye.lattice)||w.default,v.MetaMaskKeyring],t=[{keyring:(null==ye?void 0:ye.trezor)||C.TrezorKeyring,bridge:(null==ye?void 0:ye.trezorBridge)||C.TrezorConnectBridge},{keyring:(null==ye?void 0:ye.oneKey)||C.OneKeyKeyring,bridge:(null==ye?void 0:ye.oneKeyBridge)||C.TrezorConnectBridge},{keyring:(null==ye?void 0:ye.ledger)||y.LedgerKeyring,bridge:(null==ye?void 0:ye.ledgerBridge)||y.LedgerIframeBridge}];Ce=e.map((e=>(0,h.keyringBuilderFactory)(e))),t.forEach((e=>Ce.push((0,bt.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else Ce.push((0,bt.hardwareKeyringBuilderFactory)(C.TrezorKeyring,(null==ye?void 0:ye.trezorBridge)||Tt.TrezorOffscreenBridge),(0,bt.hardwareKeyringBuilderFactory)(C.OneKeyKeyring,(null==ye?void 0:ye.oneKey)||Tt.TrezorOffscreenBridge),(0,bt.hardwareKeyringBuilderFactory)(y.LedgerKeyring,(null==ye?void 0:ye.ledgerBridge)||Pt.LedgerOffscreenBridge),(0,h.keyringBuilderFactory)(Nt.LatticeKeyringOffscreen));const we=this.controllerMessenger.getRestricted({name:"SnapKeyring",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress","AccountsController:setAccountName","AccountsController:listMultichainAccounts","SnapController:handleRequest","SnapController:get","SnapController:isMinimumPlatformVersion","PreferencesController:getState"]}),Se=async()=>{await this.keyringController.persistAllKeyrings(),await this.accountsController.updateAccounts()};Ce.push((0,Et.snapKeyringBuilder)(we,{persistKeyringHelper:()=>Se(),removeAccountHelper:e=>this.removeAccount(e),trackEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}));const ke=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new h.KeyringController({cacheEncryptionKey:!0,keyringBuilders:Ce,state:r.KeyringController,encryptor:e.encryptor||(0,Mt.encryptorFactory)(6e5),messenger:ke}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new R.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:r.PermissionController,caveatSpecifications:(0,wt.getCaveatSpecifications)({listAccounts:this.accountsController.listAccounts.bind(this.accountsController),findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),isNonEvmScopeSupported:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:isSupportedScope"),getNonEvmAccountAddresses:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:getSupportedAccounts")}),permissionSpecifications:{...(0,wt.getPermissionSpecifications)(),...this.getSnapPermissionSpecifications()},unrestrictedMethods:wt.unrestrictedMethods}),this.selectedNetworkController=new x.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getState","NetworkController:getSelectedNetworkClient","PermissionController:hasPermissions","PermissionController:getSubjectNames"],allowedEvents:["NetworkController:stateChange","PermissionController:stateChange"]}),state:r.SelectedNetworkController,useRequestQueuePreference:!0,onPreferencesStateChange:()=>{},domainProxyMap:new _t.WeakRefObjectMap}),this.permissionLogController=new B.PermissionLogController({messenger:this.controllerMessenger.getRestricted({name:"PermissionLogController"}),restrictedMethods:new Set(Object.keys(de.RestrictedMethods)),state:r.PermissionLogController}),this.subjectMetadataController=new R.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:r.SubjectMetadataController,subjectCacheLimit:100});const Pe=this.controllerMessenger.getRestricted({name:"MultichainRouter",allowedActions:["SnapController:getAll","SnapController:handleRequest",`${this.permissionController.name}:getPermissions`,"AccountsController:listMultichainAccounts"],allowedEvents:[]});this.multichainRouter=new F.MultichainRouter({messenger:Pe,withSnapKeyring:async e=>e({keyring:await this.getSnapKeyring()})}),this.accountTrackerController=new ze.default({state:{accounts:{}},messenger:this.controllerMessenger.getRestricted({name:"AccountTrackerController",allowedActions:["AccountsController:getSelectedAccount","NetworkController:getState","NetworkController:getNetworkClientById","OnboardingController:getState","PreferencesController:getState"],allowedEvents:["AccountsController:selectedEvmAccountChange","OnboardingController:stateChange","KeyringController:accountRemoved"]}),provider:this.provider,blockTracker:this.blockTracker,getNetworkIdentifier:e=>{const{type:t,rpcUrl:n}=e??(0,Me.getProviderConfig)({metamask:this.networkController.state});return t===ie.NETWORK_TYPES.RPC?n:t}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.state;e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.controllerMessenger.subscribe(`${this.onboardingController.name}:stateChange`,(0,ft.previousValueComparator)((async(e,t)=>{const{completedOnboarding:n}=e,{completedOnboarding:r,firstTimeFlowType:s}=t;if(!n&&r){const{address:e}=this.accountsController.getSelectedAccount();s===je.FirstTimeFlowType.socialImport?await this._importAccountsWithBalances():await this._addAccountsWithBalance(),this.postOnboardingInitialization(),this.triggerNetworkrequests(),await this.tokenDetectionController.detectTokens({selectedAddress:e})}}),this.onboardingController.state));const Ee=this.controllerMessenger.getRestricted({name:"TokenDetectionController",allowedActions:["AccountsController:getAccount","AccountsController:getSelectedAccount","KeyringController:getState","NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getState","PreferencesController:getState","TokenListController:getState","TokensController:getState","TokensController:addDetectedTokens"],allowedEvents:["AccountsController:selectedEvmAccountChange","KeyringController:lock","KeyringController:unlock","NetworkController:networkDidChange","PreferencesController:stateChange","TokenListController:stateChange","TransactionController:transactionConfirmed"]});this.tokenDetectionController=new a.TokenDetectionController({messenger:Ee,getBalancesInSingleCall:(...e)=>this.assetsContractController.getBalancesInSingleCall(...e),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),useAccountsAPI:!0,platform:"extension"});const Ie=this.controllerMessenger.getRestricted({name:"AddressBookController",allowedActions:[],allowedEvents:[]});this.addressBookController=new P.AddressBookController({messenger:Ie,state:r.AddressBookController}),this.alertController=new it.AlertController({state:r.AlertController,messenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new lt.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})},this.decryptMessageController=new dt.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`],allowedEvents:["DecryptMessageManager:stateChange","DecryptMessageManager:unapprovedMessage"]}),managerMessenger:this.controllerMessenger.getRestricted({name:"DecryptMessageManager"}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Ct.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`],allowedEvents:["EncryptionPublicKeyManager:stateChange","EncryptionPublicKeyManager:unapprovedMessage"]}),managerMessenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyManager"}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new K.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.accountsController.name}:getState`,`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`,`${this.networkController.name}:getNetworkClientById`]}),trace:Ae.trace,decodingApiUrl:"https://signature-insights.api.cx.metamask.io/v1",isDecodeSignatureRequestEnabled:()=>this.preferencesController.state.useTransactionSimulations}),this.signatureController.hub.on("cancelWithReason",(({metadata:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:me.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})}));const _e=this.controllerMessenger.getRestricted({name:"SwapsController",allowedActions:["NetworkController:getState","NetworkController:getNetworkClientById","TokenRatesController:getState"],allowedEvents:[]});this.swapsController=new ut.default({messenger:_e,getBufferedGasLimit:async(e,t)=>{const{gas:n,simulationFails:r}=await this.txController.estimateGasBuffered(e.txParams,t,bn(vn,this,An).call(this));return{gasLimit:n,simulationFails:r}},getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getLayer1GasFee:(...e)=>this.txController.getLayer1GasFee(...e),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},r.SwapsController);const Re=this.controllerMessenger.getRestricted({name:G.BRIDGE_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedMultichainAccount","SnapController:handleRequest","NetworkController:getState","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId","TokenRatesController:getState","MultichainAssetsRatesController:getState","RemoteFeatureFlagController:getState","CurrencyRateController:getState"],allowedEvents:[]});this.bridgeController=new G.BridgeController({messenger:Re,clientId:G.BridgeClientId.EXTENSION,getLayer1GasFee:(...e)=>this.txController.getLayer1GasFee(...e),fetchFn:async(e,{cacheOptions:t,functionName:n,...r})=>"fetchBridgeTokens"===n?await(0,Ne.default)({url:e,fetchOptions:{method:"GET",...r},cacheOptions:t,functionName:n}):await(0,D.handleFetch)(e,{method:"GET",...r}),trackMetaMetricsFn:(e,t)=>{const n=(Date.now()+Math.random()).toString();this.metaMetricsController.trackEvent.bind(this.metaMetricsController)({category:G.UNIFIED_SWAP_BRIDGE_EVENT_CATEGORY,event:e,properties:{...t??{},environmentType:(0,ft.getEnvironmentType)(),actionId:n}})},traceFn:(...e)=>(0,Ae.trace)(...e),config:{customBridgeApiBaseUrl:Oe.BRIDGE_API_BASE_URL}});const xe=this.controllerMessenger.getRestricted({name:ne.BRIDGE_STATUS_CONTROLLER_NAME,allowedActions:["AccountsController:getSelectedMultichainAccount","NetworkController:getNetworkClientById","NetworkController:findNetworkClientIdByChainId","NetworkController:getState","BridgeController:getBridgeERC20Allowance","BridgeController:trackUnifiedSwapBridgeEvent","BridgeController:stopPollingForQuotes","GasFeeController:getState","AccountsController:getAccountByAddress","SnapController:handleRequest","TransactionController:getState","RemoteFeatureFlagController:getState"],allowedEvents:["MultichainTransactionsController:transactionConfirmed","TransactionController:transactionFailed","TransactionController:transactionConfirmed"]});this.bridgeStatusController=new ne.BridgeStatusController({messenger:xe,state:r.BridgeStatusController,fetchFn:async(e,t)=>await(0,D.handleFetch)(e,{method:"GET",...t}),addTransactionFn:(...e)=>this.txController.addTransaction(...e),addTransactionBatchFn:(...e)=>this.txController.addTransactionBatch(...e),estimateGasFeeFn:(...e)=>this.txController.estimateGasFee(...e),updateTransactionFn:(...e)=>this.txController.updateTransaction(...e),config:{customBridgeApiBaseUrl:Oe.BRIDGE_API_BASE_URL},traceFn:(...e)=>(0,Ae.trace)(...e)});const Be=()=>this.preferencesController.state.useExternalNameSources;this.nameController=new q.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new q.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new q.EtherscanNameProvider({isEnabled:Be}),new q.TokenNameProvider({isEnabled:Be}),new q.LensNameProvider({isEnabled:Be}),new Ue.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:r.NameController});const Fe=this.controllerMessenger.getRestricted({name:"PetnamesBridge",allowedEvents:["NameController:stateChange","AccountsController:stateChange","AddressBookController:stateChange"],allowedActions:["AccountsController:listAccounts"]});new Ke.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:Fe}).init(),new He.AccountIdentitiesPetnamesBridge({nameController:this.nameController,messenger:Fe}).init(),this.userOperationController=new V.UserOperationController({entrypoint:null,getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById","KeyringController:prepareUserOperation","KeyringController:patchUserOperation","KeyringController:signUserOperation"]}),state:r.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),i.subscribe("NetworkController:networkDidChange",(()=>{this.accountTrackerController.updateAccounts()})),this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,ft.previousValueComparator)(((e,t)=>{const{useExternalServices:n}=e,{useExternalServices:r}=t;r&&!n?(this.remoteFeatureFlagController.enable(),this.remoteFeatureFlagController.updateRemoteFeatureFlags()):!r&&n&&this.remoteFeatureFlagController.disable()}),this.preferencesController.state));const $e=this.controllerMessenger.getRestricted({name:"RemoteFeatureFlagController",allowedActions:[],allowedEvents:[]});$e.subscribe("RemoteFeatureFlagController:stateChange",(e=>{e?(console.log("isRpcFailoverEnabled = ",e,", enabling RPC failover"),this.networkController.enableRpcFailover()):(console.log("isRpcFailoverEnabled = ",e,", disabling RPC failover"),this.networkController.disableRpcFailover())}),(e=>e.remoteFeatureFlags.walletFrameworkRpcFailoverEnabled)),this.remoteFeatureFlagController=new U.RemoteFeatureFlagController({messenger:$e,fetchInterval:9e5,disabled:!this.preferencesController.state.useExternalServices,getMetaMetricsId:()=>this.metaMetricsController.getMetaMetricsId(),clientConfigApiService:new U.ClientConfigApiService({fetch:globalThis.fetch.bind(globalThis),config:{client:U.ClientType.Extension,distribution:this._getConfigForRemoteFeatureFlagRequest().distribution,environment:this._getConfigForRemoteFeatureFlagRequest().environment}})});const De=[this.networkController,this.preferencesController,this.gasFeeController,this.onboardingController,this.keyringController,this.metaMetricsController,this.accountsController],Le={ExecutionService:Yt.ExecutionServiceInit,InstitutionalSnapController:Ht.InstitutionalSnapControllerInit,RateLimitController:Yt.RateLimitControllerInit,SnapsRegistry:Yt.SnapsRegistryInit,CronjobController:Yt.CronjobControllerInit,SnapController:Yt.SnapControllerInit,SnapInsightsController:Yt.SnapInsightsControllerInit,SnapInterfaceController:Yt.SnapInterfaceControllerInit,WebSocketService:Yt.WebSocketServiceInit,PPOMController:Wt.PPOMControllerInit,TransactionController:Gt.TransactionControllerInit,SmartTransactionsController:zt.SmartTransactionsControllerInit,NftController:Vt.NftControllerInit,AssetsContractController:Vt.AssetsContractControllerInit,NftDetectionController:Vt.NftDetectionControllerInit,TokenRatesController:Vt.TokenRatesControllerInit,MultichainAssetsController:qt.MultichainAssetsControllerInit,MultichainAssetsRatesController:qt.MultichainAssetsRatesControllerInit,MultichainBalancesController:qt.MultichainBalancesControllerInit,MultichainTransactionsController:qt.MultichainTransactionsControllerInit,MultichainNetworkController:qt.MultichainNetworkControllerInit,AuthenticationController:Qt.AuthenticationControllerInit,UserStorageController:Xt.UserStorageControllerInit,NotificationServicesController:tn.NotificationServicesControllerInit,NotificationServicesPushController:nn.NotificationServicesPushControllerInit,DeFiPositionsController:Zt.DeFiPositionsControllerInit,DelegationController:rn.DelegationControllerInit,AccountTreeController:ln.AccountTreeControllerInit,SeedlessOnboardingController:hn.SeedlessOnboardingControllerInit},{controllerApi:qe,controllerMemState:Ve,controllerPersistedState:Je,controllersByName:Ye}=bn(vn,this,In).call(this,{existingControllers:De,initFunctions:Le,initState:r});this.controllerApi=qe,this.controllerMemState=Ve,this.controllerPersistedState=Je,this.controllersByName=Ye,this.cronjobController=Ye.CronjobController,this.rateLimitController=Ye.RateLimitController,this.snapController=Ye.SnapController,this.snapInsightsController=Ye.SnapInsightsController,this.snapInterfaceController=Ye.SnapInterfaceController,this.snapsRegistry=Ye.SnapsRegistry,this.ppomController=Ye.PPOMController,this.txController=Ye.TransactionController,this.smartTransactionsController=Ye.SmartTransactionsController,this.nftController=Ye.NftController,this.nftDetectionController=Ye.NftDetectionController,this.assetsContractController=Ye.AssetsContractController,this.multichainAssetsController=Ye.MultichainAssetsController,this.multichainBalancesController=Ye.MultichainBalancesController,this.multichainTransactionsController=Ye.MultichainTransactionsController,this.multichainAssetsRatesController=Ye.MultichainAssetsRatesController,this.tokenRatesController=Ye.TokenRatesController,this.multichainNetworkController=Ye.MultichainNetworkController,this.authenticationController=Ye.AuthenticationController,this.userStorageController=Ye.UserStorageController,this.delegationController=Ye.DelegationController,this.notificationServicesController=Ye.NotificationServicesController,this.notificationServicesPushController=Ye.NotificationServicesPushController,this.deFiPositionsController=Ye.DeFiPositionsController,this.accountWalletController=Ye.AccountTreeController,this.seedlessOnboardingController=Ye.SeedlessOnboardingController,this.notificationServicesController.init(),this.snapController.init(),this.cronjobController.init(),this.controllerMessenger.subscribe("TransactionController:transactionStatusUpdated",(({transactionMeta:e})=>{this._onFinishedTransaction(e)})),this.controllerMessenger.subscribe("NotificationServicesPushController:onNewNotifications",(e=>{this.metaMetricsController.trackEvent({category:me.MetaMetricsEventCategory.PushNotifications,event:me.MetaMetricsEventName.PushNotificationReceived,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.controllerMessenger.subscribe("NotificationServicesPushController:pushNotificationClicked",(e=>{this.metaMetricsController.trackEvent({category:me.MetaMetricsEventCategory.PushNotifications,event:me.MetaMetricsEventName.PushNotificationClicked,properties:{notification_id:e.id,notification_type:e.type,chain_id:null==e?void 0:e.chain_id}})})),this.metamaskMiddleware=(0,gt.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${s}`},version:s,getAccounts:({origin:e})=>{if(e===pe.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?this.getPermittedAccounts(e):[]},processTransaction:(e,t)=>(0,At.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processTypedMessage:(...e)=>(0,It.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV3:(...e)=>(0,It.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processTypedMessageV4:(...e)=>(0,It.addTypedMessage)({signatureController:this.signatureController,signatureParams:e}),processPersonalMessage:(...e)=>(0,It.addPersonalMessage)({signatureController:this.signatureController,signatureParams:e}),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===W.TransactionStatus.submitted)),processSendCalls:en.processSendCalls.bind(null,{addTransaction:this.txController.addTransaction.bind(this.txController),addTransactionBatch:this.txController.addTransactionBatch.bind(this.txController),getDismissSmartAccountSuggestionEnabled:()=>this.preferencesController.state.preferences.dismissSmartAccountSuggestionEnabled,isAtomicBatchSupported:this.txController.isAtomicBatchSupported.bind(this.txController),validateSecurity:(e,t,n)=>(0,xt.validateRequestWithPPOM)({chainId:n,ppomController:this.ppomController,request:t,securityAlertId:e,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this)})},this.controllerMessenger),getCallsStatus:en.getCallsStatus.bind(null,this.controllerMessenger),getCapabilities:en.getCapabilities.bind(null,{getDismissSmartAccountSuggestionEnabled:()=>this.preferencesController.state.preferences.dismissSmartAccountSuggestionEnabled,getIsSmartTransaction:e=>(0,Te.getIsSmartTransaction)(this._getMetaMaskState(),e),isAtomicBatchSupported:this.txController.isAtomicBatchSupported.bind(this.txController),isRelaySupported:on.isRelaySupported},this.controllerMessenger)}),this.on("update",(e=>this._onStateUpdate(e)));const Qe={AccountTracker:this.accountTrackerController,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController,BridgeController:this.bridgeController,BridgeStatusController:this.bridgeStatusController,EnsController:this.ensController,ApprovalController:this.approvalController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,MultichainNetworkController:this.multichainNetworkController,NetworkController:this.networkController,AlertController:this.alertController,OnboardingController:this.onboardingController,SeedlessOnboardingController:this.seedlessOnboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,DeFiPositionsController:this.deFiPositionsController,...Qe,...Je}),this.memStore=new We.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController,AppMetadataController:this.appMetadataController,MultichainAssetsController:this.multichainAssetsController,MultichainBalancesController:this.multichainBalancesController,MultichainTransactionsController:this.multichainTransactionsController,MultichainAssetsRatesController:this.multichainAssetsRatesController,TokenRatesController:this.tokenRatesController,MultichainNetworkController:this.multichainNetworkController,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController,MetaMetricsController:this.metaMetricsController,MetaMetricsDataDeletionController:this.metaMetricsDataDeletionController,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController,OnboardingController:this.onboardingController,SeedlessOnboardingController:this.seedlessOnboardingController,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,TokenBalancesController:this.tokenBalancesController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,MultichainRatesController:this.multichainRatesController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,SnapInterfaceController:this.snapInterfaceController,SnapInsightsController:this.snapInsightsController,NameController:this.nameController,UserOperationController:this.userOperationController,AuthenticationController:this.authenticationController,UserStorageController:this.userStorageController,NotificationServicesController:this.notificationServicesController,NotificationServicesPushController:this.notificationServicesPushController,RemoteFeatureFlagController:this.remoteFeatureFlagController,DeFiPositionsController:this.deFiPositionsController,PhishingController:this.phishingController,...Qe,...Ve},controllerMessenger:this.controllerMessenger});const Xe=[this.accountTrackerController.resetState.bind(this.accountTrackerController),this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState.bind(this.swapsController),this.bridgeController.resetState.bind(this.bridgeController),this.ensController.resetState.bind(this.ensController),this.approvalController.clear.bind(this.approvalController)];ve.isManifestV3?!0===n&&(this.resetStates(Xe),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Xe);!this.isUnlocked()&&this.onboardingController.state.completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.setupMultichainDataAndSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(Ge.onMessageReceived),(0,Ge.checkForMultipleVersionsRunning)(),this.onboardingController.state.completedOnboarding&&this.postOnboardingInitialization()}getInfuraFeatureFlags(){(0,Ne.default)({url:"https://swap.api.cx.metamask.io/featureFlags",cacheRefreshTime:20*he.MINUTE}).then(this.onFeatureFlagResponseReceived).catch((e=>{b.default.warn("Feature flag endpoint is unreachable",e)}))}onFeatureFlagResponseReceived(e){const{multiChainAssets:t={}}=e,{pollInterval:n}=t;n>0&&this.tokenBalancesController.setIntervalLength(n*he.SECOND)}postOnboardingInitialization(){const{usePhishDetect:e}=this.preferencesController.state;this.networkController.lookupNetwork(),e&&this.phishingController.maybeUpdateState()}triggerNetworkrequests(){this.tokenDetectionController.enable(),this.getInfuraFeatureFlags(),(0,Y.isEvmAccountType)(this.accountsController.getSelectedMultichainAccount().type)||this.multichainRatesController.start()}stopNetworkRequests(){this.txController.stopIncomingTransactionPolling(),this.tokenDetectionController.disable(),this.multichainRatesController.stop()}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(le.KeyringType.snap);return e||(await this.keyringController.addNewKeyring(le.KeyringType.snap),[e]=this.keyringController.getKeyringsByType(le.KeyringType.snap)),e}trackInsightSnapView(e){this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.InsightSnapViewed,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:e}})}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){return await this.controllerMessenger.call("SnapController:handleRequest",e)}getLocale(){const{currentLocale:e}=this.preferencesController.state;return e}getPreferences(){const{preferences:e,securityAlertsEnabled:t,useCurrencyRateCheck:n,useTransactionSimulations:r,useTokenDetection:s,useMultiAccountBalanceChecker:a,openSeaEnabled:o,useNftDetection:i}=this.preferencesController.state;return{privacyMode:e.privacyMode,showTestnets:e.showTestNetworks,securityAlertsEnabled:t,useCurrencyRateCheck:n,useTransactionSimulations:r,useTokenDetection:s,useMultiAccountBalanceChecker:a,openSeaEnabled:o,useNftDetection:i}}getSnapPermissionSpecifications(){return{...(0,$.buildSnapEndowmentSpecifications)(Object.keys(de.ExcludedSnapEndowments)),...(0,$.buildSnapRestrictedMethodSpecifications)(Object.keys(de.ExcludedSnapPermissions),{getPreferences:()=>{const e=this.getLocale(),t=this.currencyRateController.state.currentCurrency,{privacyMode:n,securityAlertsEnabled:r,useCurrencyRateCheck:s,useTransactionSimulations:a,useTokenDetection:o,useMultiAccountBalanceChecker:i,openSeaEnabled:c,useNftDetection:l,showTestnets:d}=this.getPreferences();return{locale:e,currency:t,hideBalances:n,useSecurityAlerts:r,useExternalPricingData:s,simulateOnChainActions:a,useTokenDetection:o,batchCheckBalances:i,displayNftMedia:c,useNftDetection:l,showTestnets:d}},clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:async e=>{if(!e)return this.getPrimaryKeyringMnemonic();try{const{type:t,mnemonic:n}=await this.controllerMessenger.call("KeyringController:withKeyring",{id:e},(async({keyring:e})=>({type:e.type,mnemonic:e.mnemonic})));if(t!==h.KeyringTypes.hd||!n)throw new Error(`Entropy source with ID "${e}" not found.`);return n}catch{throw new Error(`Entropy source with ID "${e}" not found.`)}},getMnemonicSeed:async e=>{if(!e)return this.getPrimaryKeyringMnemonicSeed();try{const{type:t,seed:n}=await this.controllerMessenger.call("KeyringController:withKeyring",{id:e},(async({keyring:e})=>({type:e.type,seed:e.seed})));if(t!==h.KeyringTypes.hd||!n)throw new Error(`Entropy source with ID "${e}" not found.`);return n}catch{throw new Error(`Entropy source with ID "${e}" not found.`)}},getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>{const{message:n,title:r,footerLink:s}=t,a={interfaceId:t.content,message:n,title:r,footerLink:s};return this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,a)},updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.state;e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.state;return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface"),getInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:getInterface"),getClientCryptography:()=>({}),getSnapKeyring:this.getSnapKeyring.bind(this)})}}setupControllerEventSubscriptions(){let e,t;try{var n;t=null===(n=this.accountsController.getSelectedMultichainAccount(_e.MultichainNetworks.SOLANA))||void 0===n?void 0:n.address}catch{}this.controllerMessenger.subscribe("PreferencesController:stateChange",(0,ft.previousValueComparator)((async(e,t)=>{const{currentLocale:n}=t;await(0,Be.updateCurrentLocale)(n),bn(vn,this,Pn).call(this,t,e)}),this.preferencesController.state)),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,wt.diffMap)(e,t);for(const[e,t]of n.entries())this._notifyAccountsChange(e,t)}),wt.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,wt.getChangedAuthorizations)(e,t),r=(0,wt.getRemovedAuthorizations)(e,t);for(const[e,t]of r.entries()){const n=(0,te.getSessionScopes)(t,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)});Object.entries(n).forEach((([t,n])=>{n.notifications.includes("eth_subscription")&&n.methods.includes("eth_subscribe")&&this.removeMultichainApiEthSubscriptionMiddleware({scope:t,origin:e})}))}for(const[e,t]of n.entries()){const n=(0,te.getSessionScopes)(t,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)});Object.entries(n).forEach((([t,n])=>{n.notifications.includes("eth_subscription")&&n.methods.includes("eth_subscribe")?Object.values(this.connections[e]??{}).forEach((({tabId:n})=>{this.addMultichainApiEthSubscriptionMiddleware({scope:t,origin:e,tabId:n})})):this.removeMultichainApiEthSubscriptionMiddleware({scope:t,origin:e})})),this._notifyAuthorizationChange(e,t)}}),wt.getAuthorizedScopesByOrigin),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{(0,u.uniq)([...t.keys(),...e.keys()]).forEach((n=>{var r,s;const a=t.get(n),o=e.get(n),i=Boolean(null==a||null===(r=a.sessionProperties)||void 0===r?void 0:r[te.KnownSessionProperties.SolanaAccountChangedNotifications]),c=Boolean(null==o||null===(s=o.sessionProperties)||void 0===s?void 0:s[te.KnownSessionProperties.SolanaAccountChangedNotifications]);if(!i&&!c)return;const l=(a?(0,te.getPermittedAccountsForScopes)(a,[_e.MultichainNetworks.SOLANA,_e.MultichainNetworks.SOLANA_DEVNET,_e.MultichainNetworks.SOLANA_TESTNET]):[]).map((e=>{const{address:t}=(0,Q.parseCaipAccountId)(e);return t})),d=(0,u.uniq)(l),[h]=this.sortMultichainAccountsByLastSelected(d),p=(o?(0,te.getPermittedAccountsForScopes)(o,[_e.MultichainNetworks.SOLANA,_e.MultichainNetworks.SOLANA_DEVNET,_e.MultichainNetworks.SOLANA_TESTNET]):[]).map((e=>{const{address:t}=(0,Q.parseCaipAccountId)(e);return t})),m=(0,u.uniq)(p),[f]=this.sortMultichainAccountsByLastSelected(m);h!==f&&this._notifySolanaAccountChange(n,f?[f]:[])}))}),wt.getAuthorizedScopesByOrigin),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async e=>{if(e.type===Y.SolAccountType.DataAccount&&e.address!==t){t=e.address;const n=(0,wt.getOriginsWithSessionProperty)(this.permissionController.state,te.KnownSessionProperties.SolanaAccountChangedNotifications),r=(0,wt.getPermittedAccountsForScopesByOrigin)(this.permissionController.state,[_e.MultichainNetworks.SOLANA,_e.MultichainNetworks.SOLANA_DEVNET,_e.MultichainNetworks.SOLANA_TESTNET]);if(r.size>0)for(const[t,s]of r.entries()){s.map((e=>{const{address:t}=(0,Q.parseCaipAccountId)(e);return t})).includes(e.address)&&n[t]&&this._notifySolanaAccountChange(t,[e.address])}}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const n=(0,wt.diffMap)(e,t);for(const[e,t]of n.entries()){const n=this.selectedNetworkController.getNetworkClientIdForDomain(e),r=this.networkController.getNetworkConfigurationByNetworkClientId(n);if(!r){b.default.warn(`No network configuration found for clientId: ${n}`);continue}const{chainId:s}=r;if(t.length>0&&!t.includes(s)){const n=this.networkController.findNetworkClientIdByChainId(t[0]);this.networkController.setActiveNetwork(n),this.selectedNetworkController.setNetworkClientIdForDomain(e,n)}}}),wt.getPermittedChainsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkRemoved",(({chainId:e})=>{const t=(0,Q.toCaipChainId)("eip155",(0,Q.hexToBigInt)(e).toString(10));this.removeAllScopePermissions(t)})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallStarted`,((e,t,n)=>{var r;const s=null===(r=this._getSnapMetadata(e))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:n?me.MetaMetricsEventName.SnapUpdateStarted:me.MetaMetricsEventName.SnapInstallStarted,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstallFailed`,((e,t,n,r)=>{var s;const a=r.includes("User rejected the request."),o=n?me.MetaMetricsEventName.SnapUpdateFailed:me.MetaMetricsEventName.SnapInstallFailed,i=n?me.MetaMetricsEventName.SnapUpdateRejected:me.MetaMetricsEventName.SnapInstallRejected,c=null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:a?i:o,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,origin:t,snap_category:c}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t,n)=>{var r;if(n)return;const s=e.id,a=null===(r=this._getSnapMetadata(s))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.SnapInstalled,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:s,version:e.version,origin:t,snap_category:a}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,n,r)=>{var s;if(r)return;const a=e.id,o=null===(s=this._getSnapMetadata(a))||void 0===s?void 0:s.category;this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.SnapUpdated,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:a,old_version:t,new_version:e.version,origin:n,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(de.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const n=this.notificationServicesController.getNotificationsByType(Z.TRIGGER_TYPES.SNAP).filter((t=>t.data.origin===e.id)).map((e=>e.id));this.notificationServicesController.deleteNotificationsById(n);const r=e.id,s=null===(t=this._getSnapMetadata(r))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.SnapUninstalled,category:me.MetaMetricsEventCategory.Snaps,properties:{snap_id:r,version:e.version,snap_category:s}})}))}setupMultichainDataAndSubscriptions(){this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(e=>{0===this.activeControllerConnections||(0,Y.isEvmAccountType)(e.type)?this.multichainRatesController.stop():this.multichainRatesController.start()})),this.controllerMessenger.subscribe("CurrencyRateController:stateChange",(({currentCurrency:e})=>{e!==this.multichainRatesController.state.fiatCurrency&&this.multichainRatesController.setFiatCurrency(e)}))}addMultichainApiEthSubscriptionMiddleware({scope:e,origin:t,tabId:n}){const r=this.multichainSubscriptionManager.subscribe({scope:e,origin:t,tabId:n});this.multichainMiddlewareManager.addMiddleware({scope:e,origin:t,tabId:n,middleware:r.middleware})}removeMultichainApiEthSubscriptionMiddleware({scope:e,origin:t}){this.multichainMiddlewareManager.removeMiddlewareByScopeAndOrigin(e,t),this.multichainSubscriptionManager.unsubscribeByScopeAndOrigin(e,t)}createPublicConfigStore(){const e=new c.ObservableStore,t=async({isUnlocked:e})=>{const{chainId:t,networkVersion:n,isConnected:r}=await this.getProviderNetworkState();return{isUnlocked:e,chainId:t,networkVersion:r?n:"loading"}},n=async n=>{var r;(null===(r=n.networksMetadata[n.selectedNetworkClientId])||void 0===r?void 0:r.status)===ie.NetworkStatus.Available&&e.putState(await t(n))};return this.on("update",n),n(this.getState()),e}async getProviderState(e){const t=await this.getProviderNetworkState(e),n={};if(ve.isManifestV3){var r;const{chrome:e}=globalThis;n.extensionId=null==e||null===(r=e.runtime)||void 0===r?void 0:r.id}return{isUnlocked:!0,accounts:this.getPermittedAccounts(e),...n,...t}}async getProviderNetworkState(e=x.METAMASK_DOMAIN){const t=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e),n=this.controllerMessenger.call("NetworkController:getNetworkClientById",t),{chainId:r}=n.configuration,{completedOnboarding:s}=this.onboardingController.state;let a=this.deprecatedNetworkVersions[t];if(a===undefined&&s){try{const e=await n.provider.request({method:"net_version"});a=(0,ke.convertNetworkId)(e)}catch(e){console.error(e),a=null}this.deprecatedNetworkVersions[t]=a}const o=this.networkController.state.networksMetadata[t];return{chainId:r,networkVersion:a??"loading",isConnected:(null==o?void 0:o.status)===ie.NetworkStatus.Available}}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),n=this.memStore.getFlatState();return{isInitialized:t,...(0,Ut.sanitizeUIState)(n)}}getApi(){const{accountsController:e,addressBookController:t,alertController:n,appStateController:r,keyringController:s,nftController:a,nftDetectionController:o,currencyRateController:i,tokenBalancesController:c,tokenDetectionController:l,ensController:d,tokenListController:u,gasFeeController:h,metaMetricsController:p,networkController:m,multichainNetworkController:f,announcementController:g,onboardingController:b,permissionController:C,preferencesController:y,tokensController:w,smartTransactionsController:S,txController:v,backup:k,approvalController:T,phishingController:P,tokenRatesController:E,accountTrackerController:M,authenticationController:A,userStorageController:I,notificationServicesController:N,notificationServicesPushController:_,deFiPositionsController:O}=this;return{getState:this.getState.bind(this),setCurrentCurrency:i.setCurrentCurrency.bind(i),setUseBlockie:y.setUseBlockie.bind(y),setUsePhishDetect:y.setUsePhishDetect.bind(y),setUseMultiAccountBalanceChecker:y.setUseMultiAccountBalanceChecker.bind(y),setUseSafeChainsListValidation:y.setUseSafeChainsListValidation.bind(y),setUseTokenDetection:y.setUseTokenDetection.bind(y),setUseNftDetection:y.setUseNftDetection.bind(y),setUse4ByteResolution:y.setUse4ByteResolution.bind(y),setUseCurrencyRateCheck:y.setUseCurrencyRateCheck.bind(y),setOpenSeaEnabled:y.setOpenSeaEnabled.bind(y),getProviderConfig:()=>(0,Me.getProviderConfig)({metamask:this.networkController.state}),grantPermissionsIncremental:this.permissionController.grantPermissionsIncremental.bind(this.permissionController),grantPermissions:this.permissionController.grantPermissions.bind(this.permissionController),setSecurityAlertsEnabled:y.setSecurityAlertsEnabled.bind(y),setAddSnapAccountEnabled:y.setAddSnapAccountEnabled.bind(y),setUseExternalNameSources:y.setUseExternalNameSources.bind(y),setUseTransactionSimulations:y.setUseTransactionSimulations.bind(y),setIpfsGateway:y.setIpfsGateway.bind(y),setIsIpfsGatewayEnabled:y.setIsIpfsGatewayEnabled.bind(y),setUseAddressBarEnsResolution:y.setUseAddressBarEnsResolution.bind(y),setParticipateInMetaMetrics:p.setParticipateInMetaMetrics.bind(p),setDataCollectionForMarketing:p.setDataCollectionForMarketing.bind(p),setMarketingCampaignCookieId:p.setMarketingCampaignCookieId.bind(p),setCurrentLocale:y.setCurrentLocale.bind(y),setServiceWorkerKeepAlivePreference:y.setServiceWorkerKeepAlivePreference.bind(y),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),getCode:this.getCode.bind(this),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getNextAvailableAccountName:e.getNextAvailableAccountName.bind(e),getAccountsBySnapId:e=>(0,Et.getAccountsBySnapId)(this.getSnapKeyring.bind(this),e),checkIsSeedlessPasswordOutdated:this.checkIsSeedlessPasswordOutdated.bind(this),syncPasswordAndUnlockWallet:this.syncPasswordAndUnlockWallet.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:s.submitQRCryptoHDKey.bind(s),submitQRHardwareCryptoAccount:s.submitQRCryptoAccount.bind(s),cancelSyncQRHardware:s.cancelQRSynchronization.bind(s),submitQRHardwareSignature:s.submitQRSignature.bind(s),cancelQRHardwareSignRequest:s.cancelQRSignRequest.bind(s),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setActiveNetwork:async e=>await this.multichainNetworkController.setActiveNetwork(e),getNetworksWithTransactionActivityByAccounts:this.multichainNetworkController.getNetworksWithTransactionActivityByAccounts.bind(this.multichainNetworkController),setActiveNetworkConfigurationId:e=>{this.networkController.setActiveNetwork(e)},setNetworkClientIdForDomain:(e,t)=>this.selectedNetworkController.setNetworkClientIdForDomain(e,t),rollbackToPreviousProvider:m.rollbackToPreviousProvider.bind(m),addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),removeNetwork:this.multichainNetworkController.removeNetwork.bind(this.multichainNetworkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getNetworkConfigurationByNetworkClientId:this.networkController.getNetworkConfigurationByNetworkClientId.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id)},toggleExternalServices:this.toggleExternalServices.bind(this),addToken:w.addToken.bind(w),updateTokenType:w.updateTokenType.bind(w),setFeatureFlag:y.setFeatureFlag.bind(y),setPreference:y.setPreference.bind(y),addKnownMethodData:y.addKnownMethodData.bind(y),setDismissSeedBackUpReminder:y.setDismissSeedBackUpReminder.bind(y),setOverrideContentSecurityPolicyHeader:y.setOverrideContentSecurityPolicyHeader.bind(y),setAdvancedGasFee:y.setAdvancedGasFee.bind(y),setTheme:y.setTheme.bind(y),setSnapsAddSnapAccountModalDismissed:y.setSnapsAddSnapAccountModalDismissed.bind(y),setManageInstitutionalWallets:y.setManageInstitutionalWallets.bind(y),setSelectedInternalAccount:e=>{this.accountsController.getAccount(e)&&this.accountsController.setSelectedAccount(e)},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{const n=this.accountsController.getAccountByAddress(e);if(n===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(n.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),getTokenStandardAndDetailsByChain:this.getTokenStandardAndDetailsByChain.bind(this),addNft:a.addNft.bind(a),addNftVerifyOwnership:a.addNftVerifyOwnership.bind(a),removeAndIgnoreNft:a.removeAndIgnoreNft.bind(a),removeNft:a.removeNft.bind(a),checkAndUpdateAllNftsOwnershipStatus:a.checkAndUpdateAllNftsOwnershipStatus.bind(a),checkAndUpdateSingleNftOwnershipStatus:a.checkAndUpdateSingleNftOwnershipStatus.bind(a),getNFTContractInfo:a.getNFTContractInfo.bind(a),isNftOwner:a.isNftOwner.bind(a),updateIncomingTransactions:v.updateIncomingTransactions.bind(v),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:r.setLastActiveTime.bind(r),setCurrentExtensionPopupId:r.setCurrentExtensionPopupId.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setSurveyLinkLastClickedOrClosed:r.setSurveyLinkLastClickedOrClosed.bind(r),setOnboardingDate:r.setOnboardingDate.bind(r),setLastViewedUserSurvey:r.setLastViewedUserSurvey.bind(r),setRampCardClosed:r.setRampCardClosed.bind(r),setNewPrivacyPolicyToastClickedOrClosed:r.setNewPrivacyPolicyToastClickedOrClosed.bind(r),setNewPrivacyPolicyToastShownDate:r.setNewPrivacyPolicyToastShownDate.bind(r),setSnapsInstallPrivacyWarningShownStatus:r.setSnapsInstallPrivacyWarningShownStatus.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setIsUpdateAvailable:r.setIsUpdateAvailable.bind(r),setUpdateModalLastDismissedAt:r.setUpdateModalLastDismissedAt.bind(r),setLastUpdatedAt:r.setLastUpdatedAt.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowPermissionsTour:r.setShowPermissionsTour.bind(r),setShowAccountBanner:r.setShowAccountBanner.bind(r),setShowNetworkBanner:r.setShowNetworkBanner.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),getLastInteractedConfirmationInfo:r.getLastInteractedConfirmationInfo.bind(r),setLastInteractedConfirmationInfo:r.setLastInteractedConfirmationInfo.bind(r),updateSlides:r.updateSlides.bind(r),removeSlide:r.removeSlide.bind(r),setEnableEnforcedSimulations:r.setEnableEnforcedSimulations.bind(r),setEnableEnforcedSimulationsForTransaction:r.setEnableEnforcedSimulationsForTransaction.bind(r),tryReverseResolveAddress:d.reverseResolveAddress.bind(d),startOAuthLogin:this.oauthService.startOAuthLogin.bind(this.oauthService),authenticate:this.seedlessOnboardingController.authenticate.bind(this.seedlessOnboardingController),resetOAuthLoginState:this.seedlessOnboardingController.clearState.bind(this.seedlessOnboardingController),createSeedPhraseBackup:this.createSeedPhraseBackup.bind(this),storeKeyringEncryptionKey:this.seedlessOnboardingController.storeKeyringEncryptionKey.bind(this.seedlessOnboardingController),restoreSocialBackupAndGetSeedPhrase:this.restoreSocialBackupAndGetSeedPhrase.bind(this),syncSeedPhrases:this.syncSeedPhrases.bind(this),socialSyncChangePassword:this.seedlessOnboardingController.changePassword.bind(this.seedlessOnboardingController),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),generateNewMnemonicAndAddToVault:this.generateNewMnemonicAndAddToVault.bind(this),importMnemonicToVault:this.importMnemonicToVault.bind(this),exportAccount:this.exportAccount.bind(this),keyringChangePassword:this.keyringController.changePassword.bind(this.keyringController),exportEncryptionKey:this.keyringController.exportEncryptionKey.bind(this.keyringController),updateTransaction:v.updateTransaction.bind(v),approveTransactionsWithSameNonce:v.approveTransactionsWithSameNonce.bind(v),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),estimateGasFee:v.estimateGasFee.bind(v),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,At.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1})),addTransactionAndWaitForPublish:(e,t)=>(0,At.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0})),createTransactionEventFragment:De.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),setTransactionActive:v.setTransactionActive.bind(v),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:b.setSeedPhraseBackedUp.bind(b),completeOnboarding:b.completeOnboarding.bind(b),setFirstTimeFlowType:b.setFirstTimeFlowType.bind(b),setAlertEnabledness:n.setAlertEnabledness.bind(n),setUnconnectedAccountAlertShown:n.setUnconnectedAccountAlertShown.bind(n),setWeb3ShimUsageAlertDismissed:n.setWeb3ShimUsageAlertDismissed.bind(n),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,wt.getPermissionBackgroundApiMethods)({permissionController:C,approvalController:T,accountsController:e,networkController:m,multichainNetworkController:f}),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),disconnectOriginFromSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disconnectOrigin"),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),setEnabledNetworks:this.setEnabledNetworks.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await P.maybeUpdateState(),P.test(e)),deleteInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:deleteInterface"),updateInterfaceState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterfaceState"),fetchAndSetQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:fetchAndSetQuotes"),setSelectedQuoteAggId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSelectedQuoteAggId"),resetSwapsState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetSwapsState"),setSwapsTokens:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTokens"),clearSwapsQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:clearSwapsQuotes"),setApproveTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setApproveTxId"),setTradeTxId:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setTradeTxId"),setSwapsTxGasPrice:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasPrice"),setSwapsTxGasLimit:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxGasLimit"),setSwapsTxMaxFeePerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePerGas"),setSwapsTxMaxFeePriorityPerGas:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsTxMaxFeePriorityPerGas"),safeRefetchQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:safeRefetchQuotes"),stopPollingForQuotes:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:stopPollingForQuotes"),setBackgroundSwapRouteState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setBackgroundSwapRouteState"),resetPostFetchState:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:resetPostFetchState"),setSwapsErrorKey:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsErrorKey"),setInitialGasEstimate:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setInitialGasEstimate"),setCustomApproveTxData:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setCustomApproveTxData"),setSwapsLiveness:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsLiveness"),setSwapsFeatureFlags:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsFeatureFlags"),setSwapsUserFeeLevel:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsUserFeeLevel"),setSwapsQuotesPollingLimitEnabled:this.controllerMessenger.call.bind(this.controllerMessenger,"SwapsController:setSwapsQuotesPollingLimitEnabled"),[G.BridgeBackgroundAction.RESET_STATE]:this.controllerMessenger.call.bind(this.controllerMessenger,`${G.BRIDGE_CONTROLLER_NAME}:${G.BridgeBackgroundAction.RESET_STATE}`),[G.BridgeUserAction.UPDATE_QUOTE_PARAMS]:this.controllerMessenger.call.bind(this.controllerMessenger,`${G.BRIDGE_CONTROLLER_NAME}:${G.BridgeUserAction.UPDATE_QUOTE_PARAMS}`),[G.BridgeBackgroundAction.TRACK_METAMETRICS_EVENT]:this.controllerMessenger.call.bind(this.controllerMessenger,`${G.BRIDGE_CONTROLLER_NAME}:${G.BridgeBackgroundAction.TRACK_METAMETRICS_EVENT}`),[ne.BridgeStatusAction.SUBMIT_TX]:this.controllerMessenger.call.bind(this.controllerMessenger,`${ne.BRIDGE_STATUS_CONTROLLER_NAME}:${ne.BridgeStatusAction.SUBMIT_TX}`),fetchSmartTransactionFees:S.getFees.bind(S),clearSmartTransactionFees:S.clearFees.bind(S),submitSignedTransactions:S.submitSignedTransactions.bind(S),cancelSmartTransaction:S.cancelSmartTransaction.bind(S),fetchSmartTransactionsLiveness:S.fetchLiveness.bind(S),updateSmartTransaction:S.updateSmartTransaction.bind(S),setStatusRefreshInterval:S.setStatusRefreshInterval.bind(S),trackMetaMetricsEvent:p.trackEvent.bind(p),trackMetaMetricsPage:p.trackPage.bind(p),createEventFragment:p.createEventFragment.bind(p),updateEventFragment:p.updateEventFragment.bind(p),finalizeEventFragment:p.finalizeEventFragment.bind(p),trackInsightSnapView:this.trackInsightSnapView.bind(this),addEventBeforeMetricsOptIn:p.addEventBeforeMetricsOptIn.bind(p),bufferedTrace:p.bufferedTrace.bind(p),bufferedEndTrace:p.bufferedEndTrace.bind(p),rejectAllPendingApprovals:this.rejectAllPendingApprovals.bind(this),rejectPendingApproval:this.rejectPendingApproval,requestUserApproval:T.addAndShowApprovalRequest.bind(T),resolvePendingApproval:this.resolvePendingApproval,resetViewedNotifications:g.resetViewed.bind(g),updateViewedNotifications:g.updateViewed.bind(g),currencyRateStartPolling:i.startPolling.bind(i),currencyRateStopPollingByPollingToken:i.stopPollingByPollingToken.bind(i),tokenRatesStartPolling:E.startPolling.bind(E),tokenRatesStopPollingByPollingToken:E.stopPollingByPollingToken.bind(E),accountTrackerStartPolling:M.startPollingByNetworkClientId.bind(M),accountTrackerStopPollingByPollingToken:M.stopPollingByPollingToken.bind(M),tokenDetectionStartPolling:l.startPolling.bind(l),tokenDetectionStopPollingByPollingToken:l.stopPollingByPollingToken.bind(l),tokenListStartPolling:u.startPolling.bind(u),tokenListStopPollingByPollingToken:u.stopPollingByPollingToken.bind(u),tokenBalancesStartPolling:c.startPolling.bind(c),tokenBalancesStopPollingByPollingToken:c.stopPollingByPollingToken.bind(c),deFiStartPolling:O.startPolling.bind(O),deFiStopPolling:O.stopPollingByPollingToken.bind(O),gasFeeStartPolling:h.startPolling.bind(h),gasFeeStopPollingByPollingToken:h.stopPollingByPollingToken.bind(h),getGasFeeTimeEstimate:h.getTimeEstimate.bind(h),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),updateThrottledOriginState:r.updateThrottledOriginState.bind(r),backupUserData:k.backupUserData.bind(k),restoreUserData:k.restoreUserData.bind(k),detectTokens:l.detectTokens.bind(l),fetchHistoricalPricesForAsset:(...e)=>this.multichainAssetsRatesController.fetchHistoricalPricesForAsset(...e),detectNfts:o.detectNfts.bind(o),addDetectedTokens:w.addDetectedTokens.bind(w),addImportedTokens:w.addTokens.bind(w),ignoreTokens:w.ignoreTokens.bind(w),getBalancesInSingleCall:(...e)=>this.assetsContractController.getBalancesInSingleCall(...e),performSignIn:A.performSignIn.bind(A),performSignOut:A.performSignOut.bind(A),getUserProfileMetaMetrics:A.getUserProfileMetaMetrics.bind(A),setIsBackupAndSyncFeatureEnabled:I.setIsBackupAndSyncFeatureEnabled.bind(I),syncInternalAccountsWithUserStorage:I.syncInternalAccountsWithUserStorage.bind(I),setHasAccountSyncingSyncedAtLeastOnce:I.setHasAccountSyncingSyncedAtLeastOnce.bind(I),setIsAccountSyncingReadyToBeDispatched:I.setIsAccountSyncingReadyToBeDispatched.bind(I),deleteAccountSyncingDataFromUserStorage:I.performDeleteStorageAllFeatureEntries.bind(I),syncContactsWithUserStorage:I.syncContactsWithUserStorage.bind(I),checkAccountsPresence:N.checkAccountsPresence.bind(N),createOnChainTriggers:N.createOnChainTriggers.bind(N),disableAccounts:N.disableAccounts.bind(N),enableAccounts:N.enableAccounts.bind(N),fetchAndUpdateMetamaskNotifications:N.fetchAndUpdateMetamaskNotifications.bind(N),deleteNotificationsById:N.deleteNotificationsById.bind(N),getNotificationsByType:N.getNotificationsByType.bind(N),markMetamaskNotificationsAsRead:N.markMetamaskNotificationsAsRead.bind(N),setFeatureAnnouncementsEnabled:N.setFeatureAnnouncementsEnabled.bind(N),enablePushNotifications:_.enablePushNotifications.bind(_),disablePushNotifications:_.disablePushNotifications.bind(_),enableMetamaskNotifications:N.enableMetamaskNotifications.bind(N),disableMetamaskNotifications:N.disableNotificationServices.bind(N),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController),createSnapAccount:async(e,t,n)=>{const r=await this.getSnapKeyring();return await r.createAccount(e,t,n)},multichainUpdateBalance:e=>this.multichainBalancesController.updateBalance(e),multichainUpdateTransactions:e=>this.multichainTransactionsController.updateTransactionsForAccount(e),decodeTransactionData:e=>(0,Ft.decodeTransactionData)({...e,provider:this.provider}),createMetaMetricsDataDeletionTask:this.metaMetricsDataDeletionController.createMetaMetricsDataDeletionTask.bind(this.metaMetricsDataDeletionController),updateDataDeletionTaskStatus:this.metaMetricsDataDeletionController.updateDataDeletionTaskStatus.bind(this.metaMetricsDataDeletionController),endTrace:Ae.endTrace,isRelaySupported:on.isRelaySupported,openUpdateTabAndReload:()=>(0,cn.openUpdateTabAndReload)(this.requestSafeReload.bind(this)),requestSafeReload:this.requestSafeReload.bind(this),applyTransactionContainersExisting:(e,t)=>(0,pn.applyTransactionContainersExisting)({containerTypes:t,messenger:this.controllerMessenger,transactionId:e,updateEditableParams:this.txController.updateEditableParams.bind(this.txController)})}}rejectOriginPendingApprovals(e){(0,Kt.rejectOriginApprovals)({approvalController:this.approvalController,deleteInterface:e=>this.controllerMessenger.call("SnapInterfaceController:deleteInterface",e),origin:e})}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,n){var r,s,a,o;const i=bn(vn,this,Mn).call(this),{tokensChainsCache:c}=this.tokenListController.state,l=(null==c||null===(r=c[i])||void 0===r?void 0:r.data)||{},{allTokens:d}=this.tokensController.state,u=(null==d||null===(s=d[i])||void 0===s?void 0:s[t])||[],h={...we.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{},...l[null==e?void 0:e.toLowerCase()]||{},...u.find((({address:t})=>(0,Ce.isEqualCaseInsensitive)(t,e)))||{}},p=(0,Ce.isEqualCaseInsensitive)(h.standard,ae.TokenStandard.ERC20)||!0===h.erc20,m=!(n||(0,Ce.isEqualCaseInsensitive)(h.standard,ae.TokenStandard.ERC1155)||(0,Ce.isEqualCaseInsensitive)(h.standard,ae.TokenStandard.ERC721)||h.erc721),f=h.decimals!==undefined&&h.symbol;let g;if(p||m&&f)try{const n=t?await(0,be.fetchTokenBalance)(e,t,this.provider):undefined;g={address:e,balance:n,standard:ae.TokenStandard.ERC20,decimals:h.decimals,symbol:h.symbol}}catch(e){b.default.warn(`Failed to get token balance. Error: ${e}`)}if(g===undefined)try{g=await this.assetsContractController.getTokenStandardAndDetails(e,t,n)}catch(e){b.default.warn(`Failed to get token standard and details. Error: ${e}`)}if(g){if((0,Ce.isEqualCaseInsensitive)(g.standard,ae.TokenStandard.ERC1155))try{const r=await(0,be.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;g={...g,balance:s}}catch(e){b.default.warn("Failed to get token balance. Error:",e)}}return{...g,decimals:null===(a=g)||void 0===a||null===(a=a.decimals)||void 0===a?void 0:a.toString(10),balance:null===(o=g)||void 0===o||null===(o=o.balance)||void 0===o?void 0:o.toString(10)}}async getTokenStandardAndDetailsByChain(e,t,n,r){var s,a,o,i;const{tokensChainsCache:c}=this.tokenListController.state,l=(null==c||null===(s=c[r])||void 0===s?void 0:s.data)||{},{allTokens:d}=this.tokensController.state,u=this.accountsController.getSelectedAccount(),h=(null==d||null===(a=d[r])||void 0===a?void 0:a[u.address])||[];let p={};r===ie.CHAIN_IDS.MAINNET&&(p=we.STATIC_MAINNET_TOKEN_LIST[null==e?void 0:e.toLowerCase()]||{});const m=l[null==e?void 0:e.toLowerCase()]||{},f=h.find((({address:t})=>(0,Ce.isEqualCaseInsensitive)(t,e)))||{},g={...p,...m,...f},C=(0,Ce.isEqualCaseInsensitive)(g.standard,ae.TokenStandard.ERC20)||!0===g.erc20,y=!(n||(0,Ce.isEqualCaseInsensitive)(g.standard,ae.TokenStandard.ERC1155)||(0,Ce.isEqualCaseInsensitive)(g.standard,ae.TokenStandard.ERC721)||g.erc721),w=g.decimals!==undefined&&g.symbol;let S;if(C||y&&w)try{let n=0;bn(vn,this,Mn).call(this)===r&&(n=await(0,be.fetchTokenBalance)(e,t,this.provider)),S={address:e,balance:n,standard:ae.TokenStandard.ERC20,decimals:g.decimals,symbol:g.symbol}}catch(e){b.default.warn(`Failed to get token balance. Error: ${e}`)}if(S===undefined)try{var v,k;const s=null===(v=this.networkController)||void 0===v||null===(v=v.state)||void 0===v||null===(v=v.networkConfigurationsByChainId)||void 0===v||null===(v=v[r])||void 0===v||null===(v=v.rpcEndpoints[null===(k=this.networkController)||void 0===k||null===(k=k.state)||void 0===k||null===(k=k.networkConfigurationsByChainId)||void 0===k||null===(k=k[r])||void 0===k?void 0:k.defaultRpcEndpointIndex])||void 0===v?void 0:v.networkClientId;S=await this.assetsContractController.getTokenStandardAndDetails(e,t,n,s)}catch(e){b.default.warn(`Failed to get token standard and details. Error: ${e}`)}if(S){if((0,Ce.isEqualCaseInsensitive)(S.standard,ae.TokenStandard.ERC1155))try{const r=await(0,be.fetchERC1155Balance)(e,t,n,this.provider),s=null!=r&&r._hex?parseInt(r._hex,16).toString():null;S={...S,balance:s}}catch(e){b.default.warn("Failed to get token balance. Error:",e)}}return{...S,decimals:null===(o=S)||void 0===o||null===(o=o.decimals)||void 0===o?void 0:o.toString(10),balance:null===(i=S)||void 0===i||null===(i=i.balance)||void 0===i?void 0:i.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createSeedPhraseBackup(e,n,r){let s=!1;try{var a,o;null===(a=(o=this.metaMetricsController).bufferedTrace)||void 0===a||a.call(o,{name:Ae.TraceName.OnboardingCreateKeyAndBackupSrp,op:Ae.TraceOperation.OnboardingSecurityOp});const i=t.from(n),c=this._convertMnemonicToWordlistIndices(i);await this.seedlessOnboardingController.createToprfKeyAndBackupSeedPhrase(e,c,r),s=!0,await this.syncKeyringEncryptionKey()}catch(e){var i,c,l,d;const t=e instanceof Error?e.message:"Unknown error";throw null===(i=(c=this.metaMetricsController).bufferedTrace)||void 0===i||i.call(c,{name:Ae.TraceName.OnboardingCreateKeyAndBackupSrpError,op:Ae.TraceOperation.OnboardingError,tags:{errorMessage:t}}),null===(l=(d=this.metaMetricsController).bufferedEndTrace)||void 0===l||l.call(d,{name:Ae.TraceName.OnboardingCreateKeyAndBackupSrpError}),b.default.error("[createSeedPhraseBackup] error",e),e}finally{var u,h;null===(u=(h=this.metaMetricsController).bufferedEndTrace)||void 0===u||u.call(h,{name:Ae.TraceName.OnboardingCreateKeyAndBackupSrp,data:{success:s}})}}async fetchAllSecretData(e){let t=!1;try{var n,r;null===(n=(r=this.metaMetricsController).bufferedTrace)||void 0===n||n.call(r,{name:Ae.TraceName.OnboardingFetchSrps,op:Ae.TraceOperation.OnboardingSecurityOp});const s=await this.seedlessOnboardingController.fetchAllSecretData(e);return t=!0,s}catch(e){var s,a,o,i;const t=e instanceof Error?e.message:"Unknown error";throw null===(s=(a=this.metaMetricsController).bufferedTrace)||void 0===s||s.call(a,{name:Ae.TraceName.OnboardingFetchSrpsError,op:Ae.TraceOperation.OnboardingError,tags:{errorMessage:t}}),null===(o=(i=this.metaMetricsController).bufferedEndTrace)||void 0===o||o.call(i,{name:Ae.TraceName.OnboardingFetchSrpsError}),e}finally{var c,l;null===(c=(l=this.metaMetricsController).bufferedEndTrace)||void 0===c||c.call(l,{name:Ae.TraceName.OnboardingFetchSrps,data:{success:t}})}}async syncPasswordAndUnlockWallet(e){let t=!1;const n=this.onboardingController.getIsSocialLoginFlow(),r=!!n&&await this.seedlessOnboardingController.checkIsPasswordOutdated({skipCache:!1});if(!n||!r)return await this.submitPassword(e),n&&this.seedlessOnboardingController.revokeRefreshToken(e).catch((e=>{b.default.error("error while revoking seedless refresh token",e)})),t=!0,t;const s=await this.syncSeedlessGlobalPasswordMutex.acquire();try{const n=await this.keyringController.verifyPassword(e).then((()=>!0)).catch((e=>{if(e.message.includes("Incorrect password"))return!1;throw b.default.error("error while verifying keyring password",e.message),e}));if(await this.seedlessOnboardingController.submitGlobalPassword({globalPassword:e,maxKeyChainLength:20}).then((()=>{t=!0})).catch((e=>{if(b.default.error(`error while submitting global password: ${e.message} , isKeyringPasswordValid: ${n}`),e instanceof se.RecoveryError){if((null==e?void 0:e.message)===se.SeedlessOnboardingControllerErrorMessage.IncorrectPassword&&n)throw new Error(se.SeedlessOnboardingControllerErrorMessage.OutdatedPassword);throw new f.JsonRpcError(-32603,e.message,e.data)}if(e.message!==se.SeedlessOnboardingControllerErrorMessage.MaxKeyChainLengthExceeded)throw e;t=!1})),!t)return await this.seedlessOnboardingController.refreshAuthTokens(),await this.restoreSocialBackupAndGetSeedPhrase(e),t;const r=await this.seedlessOnboardingController.loadKeyringEncryptionKey();await this.submitEncryptionKey(r);let s=!1;try{var a,o;await this.seedlessOnboardingController.syncLatestGlobalPassword({globalPassword:e}),null===(a=(o=this.metaMetricsController).bufferedTrace)||void 0===a||a.call(o,{name:Ae.TraceName.OnboardingResetPassword,op:Ae.TraceOperation.OnboardingSecurityOp}),await this.keyringController.changePassword(e),s=!0,await this.syncKeyringEncryptionKey(),await this.seedlessOnboardingController.checkIsPasswordOutdated({skipCache:!0}),this.seedlessOnboardingController.revokeRefreshToken(e).catch((e=>{b.default.error("error while revoking seedless refresh token",e)}))}catch(e){var i,c,l,d;const t=e instanceof Error?e.message:"Unknown error";throw null===(i=(c=this.metaMetricsController).bufferedTrace)||void 0===i||i.call(c,{name:Ae.TraceName.OnboardingResetPasswordError,op:Ae.TraceOperation.OnboardingError,tags:{errorMessage:t}}),null===(l=(d=this.metaMetricsController).bufferedEndTrace)||void 0===l||l.call(d,{name:Ae.TraceName.OnboardingResetPasswordError}),await this.setLocked(),e}finally{var u,h;null===(u=(h=this.metaMetricsController).bufferedEndTrace)||void 0===u||u.call(h,{name:Ae.TraceName.OnboardingResetPassword,data:{success:s}})}return t}finally{s()}}async syncKeyringEncryptionKey(){const e=await this.keyringController.exportEncryptionKey();await this.seedlessOnboardingController.storeKeyringEncryptionKey(e)}async checkIsSeedlessPasswordOutdated(e=!1){const t=this.onboardingController.getIsSocialLoginFlow(),{completedOnboarding:n}=this.onboardingController.state;if(!t||!n)return!1;return await this.seedlessOnboardingController.checkIsPasswordOutdated({skipCache:e})}async syncSeedPhrases(){if(!this.onboardingController.getIsSocialLoginFlow())throw new Error("Syncing seed phrases is only available for social login flow");const[e,...n]=await this.fetchAllSecretData();if(!e)throw new Error("No root SRP found");for(const e of n){if(!this.seedlessOnboardingController.getSecretDataBackupState(e.data,e.type)){if(e.type===se.SecretType.PrivateKey){await this.importAccountWithStrategy("privateKey",[(0,Q.bytesToHex)(e.data)],{shouldCreateSocialBackup:!1,shouldSelectAccount:!1});continue}const n=this._convertEnglishWordlistIndicesToCodepoints(e.data),r=t.from(n).toString("utf8");await this.importMnemonicToVault(r,{shouldCreateSocialBackup:!1,shouldSelectAccount:!1,shouldImportSolanaAccount:!0})}}}async addNewSeedPhraseBackup(e,n,r=!0){const s=t.from(e,"utf8"),a=this._convertMnemonicToWordlistIndices(s);if(r){let e=!1;try{var o,i;null===(o=(i=this.metaMetricsController).bufferedTrace)||void 0===o||o.call(i,{name:Ae.TraceName.OnboardingAddSrp,op:Ae.TraceOperation.OnboardingSecurityOp}),await this.seedlessOnboardingController.addNewSecretData(a,se.SecretType.Mnemonic,{keyringId:n}),e=!0}catch(e){var c,l,d,u;const t=e instanceof Error?e.message:"Unknown error";throw null===(c=(l=this.metaMetricsController).bufferedTrace)||void 0===c||c.call(l,{name:Ae.TraceName.OnboardingAddSrpError,op:Ae.TraceOperation.OnboardingError,tags:{errorMessage:t}}),null===(d=(u=this.metaMetricsController).bufferedEndTrace)||void 0===d||d.call(u,{name:Ae.TraceName.OnboardingAddSrpError}),e}finally{var h,p;null===(h=(p=this.metaMetricsController).bufferedEndTrace)||void 0===h||h.call(p,{name:Ae.TraceName.OnboardingAddSrp,data:{success:e}})}}else this.seedlessOnboardingController.updateBackupMetadataState({keyringId:n,data:a,type:se.SecretType.Mnemonic})}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{return await this.keyringController.createNewVaultAndKeychain(e),this.keyringController.state.keyrings[0]}finally{t()}}async importMnemonicToVault(e,n={shouldCreateSocialBackup:!0,shouldSelectAccount:!0,shouldImportSolanaAccount:!0}){const{shouldCreateSocialBackup:r,shouldSelectAccount:s,shouldImportSolanaAccount:a}=n,o=await this.createVaultMutex.acquire();try{if(this.keyringController.getKeyringsByType(h.KeyringTypes.hd).some((n=>t.from(this._convertEnglishWordlistIndicesToCodepoints(n.mnemonic)).toString("utf8")===e)))throw new Error("This Secret Recovery Phrase has already been imported.");const{id:n}=await this.keyringController.addNewKeyring(h.KeyringTypes.hd,{mnemonic:e,numberOfAccounts:1}),[o]=await this.keyringController.withKeyring({id:n},(async({keyring:e})=>e.getAccounts()));if(this.onboardingController.getIsSocialLoginFlow())try{await this.addNewSeedPhraseBackup(e,n,r)}catch(e){throw await this.keyringController.removeAccount(o),e}if(s){const e=this.accountsController.getAccountByAddress(o);this.accountsController.setSelectedAccount(e.id)}return{newAccountAddress:o,discoveredAccounts:await this._addAccountsWithBalance(n,a)}}finally{o()}}async restoreSeedPhrasesToVault(e){if(!this.onboardingController.getIsSocialLoginFlow())return;const n=!1,r=!1;for(const s of e){if(this.seedlessOnboardingController.getSecretDataBackupState(s.data,s.type))continue;if(s.type===se.SecretType.PrivateKey){await this.importAccountWithStrategy("privateKey",[(0,Q.bytesToHex)(s.data)],{shouldCreateSocialBackup:n,shouldSelectAccount:r});continue}const e=this._convertEnglishWordlistIndicesToCodepoints(s.data),a=t.from(e).toString("utf8");await this.importMnemonicToVault(a,{shouldCreateSocialBackup:n,shouldSelectAccount:r,shouldImportSolanaAccount:false})}}async restoreSocialBackupAndGetSeedPhrase(e){try{const[n,...r]=await this.fetchAllSecretData(e),s=this._convertEnglishWordlistIndicesToCodepoints(n.data),a=t.from(s).toString("utf8"),o=Array.from(t.from(a,"utf8").values());return await this.createNewVaultAndRestore(e,o),r.length>0&&await this.restoreSeedPhrasesToVault(r),a}catch(e){if(b.default.error("Error restoring social backup and getting seed phrase",e),e instanceof se.RecoveryError)throw new f.JsonRpcError(-32603,e.message,e.data);throw e}}async generateNewMnemonicAndAddToVault(){const e=await this.createVaultMutex.acquire();try{const{id:e}=await this.keyringController.addNewKeyring(h.KeyringTypes.hd),[t]=await this.keyringController.withKeyring({id:e},(async({keyring:e})=>e.getAccounts())),n=this.accountsController.getAccountByAddress(t);return this.accountsController.setSelectedAccount(n.id),t}finally{e()}}async createNewVaultAndRestore(e,n){const r=await this.createVaultMutex.acquire();try{const{completedOnboarding:r}=this.onboardingController.state,s=t.from(n);this.permissionController.clearState(),await this.snapController.clearState(),this.accountOrderController.updateHiddenAccountsList([]),this.accountTrackerController.clearAccounts(),this.txController.clearUnapprovedTransactions(),r&&this.tokenDetectionController.enable();const a=this._convertMnemonicToWordlistIndices(s);if(await this.keyringController.createNewVaultAndRestore(e,a),await this.accountsController.updateAccounts(),this.accountWalletController.init(),r&&(await this._addAccountsWithBalance(),bn(vn,this,Tn).call(this,{name:ce.HardwareDeviceNames.ledger},(async e=>this.setLedgerTransportPreference(e)))),(0,Fe.getIsSeedlessOnboardingFeatureEnabled)()){if(this.onboardingController.getIsSocialLoginFlow()){const e=this.keyringController.state.keyrings[0].metadata.id;this.seedlessOnboardingController.updateBackupMetadataState({keyringId:e,data:a,type:se.SecretType.Mnemonic}),await this.syncKeyringEncryptionKey()}}}finally{r()}}async _getMultichainWalletSnapClient(e){const t=await this.getSnapKeyring(),n=this.controllerMessenger;return new Re.MultichainWalletSnapClient(e,t,n)}async _addAccountsWithBalance(e,t=!0){try{await this.userStorageController.setHasAccountSyncingSyncedAtLeastOnce(!1),await this.userStorageController.setIsAccountSyncingReadyToBeDispatched(!1);const s=bn(vn,this,Mn).call(this),a=e?{id:e}:{type:h.KeyringTypes.hd},{accounts:o,entropySource:i}=await this.keyringController.withKeyring(a,(async({keyring:e,metadata:t})=>({accounts:await e.getAccounts(),entropySource:t.id})));let c=o[o.length-1];for(let e=o.length;;e++){if("0x0"===await this.getBalance(c,this.provider)){var n,r;await this.tokenDetectionController.detectTokens({chainIds:[s],selectedAddress:c});const t=null===(n=this.tokensController.state.allTokens)||void 0===n||null===(n=n[s])||void 0===n?void 0:n[c],a=null===(r=this.tokensController.state.allDetectedTokens)||void 0===r||null===(r=r[s])||void 0===r?void 0:r[c];if(0===((null==t?void 0:t.length)??0)&&0===((null==a?void 0:a.length)??0)){1!==e&&await this.removeAccount(c);break}}c=await this.keyringController.withKeyring(a,(async({keyring:e})=>{const[t]=await e.addAccounts(1);return t}))}const l={bitcoin:0,solana:0};if(t){const e=await this._getMultichainWalletSnapClient(xe.SOLANA_WALLET_SNAP_ID),t=Y.SolScope.Mainnet,n=await e.discoverAccounts(i,t);l.solana=n.length,0===n.length&&await this._addSnapAccount(i,e,{scope:t})}return l}catch(e){return b.default.warn(`Failed to add accounts with balance. Error: ${e}`),{bitcoin:0,solana:0}}finally{await this.userStorageController.setHasAccountSyncingSyncedAtLeastOnce(!0),await this.userStorageController.setIsAccountSyncingReadyToBeDispatched(!0)}}async _importAccountsWithBalances(){const{keyrings:e}=this.keyringController.state;for(const{metadata:t}of e){await this.keyringController.withKeyring({id:t.id},(async({keyring:e})=>e.type===h.KeyringTypes.hd))&&await this._addAccountsWithBalance(t.id,true)}}async _addSnapAccount(e,t,n={}){let r=e;try{if(!r){r=await this.keyringController.withKeyring({type:h.KeyringTypes.hd},(async({metadata:e})=>e.id))}return await t.createAccount({...n,entropySource:r},{displayConfirmation:!1,displayAccountNameSuggestion:!1,setSelectedAccount:!1})}catch(e){return b.default.warn(`Failed to add Snap account. Error: ${e}`),(0,T.captureException)(e),null}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>H.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>H.wordlist[e])).join(" "))}async getBalance(e,t){const n=this.accountTrackerController.state.accountsByChainId[bn(vn,this,Mn).call(this)],r=null==n?void 0:n[e];if(r&&r.balance)return r.balance;try{return await t.request({method:"eth_getBalance",params:[e,"latest"]})||"0x0"}catch(e){throw b.default.error(e),e}}async submitPassword(e){await this.submitPasswordOrEncryptionKey({password:e})}async submitEncryptionKey(e){await this.submitPasswordOrEncryptionKey({encryptionKey:e})}async submitPasswordOrEncryptionKey({password:e,encryptionKey:t}){const{completedOnboarding:n}=this.onboardingController.state,r=this.onboardingController.getIsSocialLoginFlow();await this.offscreenPromise,t?await this.keyringController.submitEncryptionKey(t):(await this.keyringController.submitPassword(e),r&&await this.seedlessOnboardingController.submitPassword(e));try{await this.blockTracker.checkForLatestBlock()}catch(e){b.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),this.accountWalletController.init(),n&&bn(vn,this,Tn).call(this,{name:ce.HardwareDeviceNames.ledger},(async e=>this.setLedgerTransportPreference(e)))}async _loginUser(e){try{await this.submitPassword(e),await this.accountTrackerController.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKeyFromSessionStorage(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:n}=this.keyringController.state;if(JSON.parse(n).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(le.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}getPrimaryKeyringMnemonicSeed(){const[e]=this.keyringController.getKeyringsByType(le.KeyringType.hdKeyTree);if(!e.seed)throw new Error("Primary keyring mnemonic unavailable.");return e.seed}async attemptLedgerTransportCreation(){return await bn(vn,this,Tn).call(this,{name:ce.HardwareDeviceNames.ledger},(async e=>e.attemptMakeApp()))}async connectHardware(e,t,n){return bn(vn,this,Tn).call(this,{name:e,hdPath:n},(async n=>{e===ce.HardwareDeviceNames.ledger&&await this.setLedgerTransportPreference(n);let r=[];switch(t){case-1:r=await n.getPreviousPage();break;case 1:r=await n.getNextPage();break;default:r=await n.getFirstPage()}const s=await this.keyringController.getAccounts(),a=[...new Set(s.concat(r.map((e=>e.address.toLowerCase()))))];return this.accountTrackerController.syncWithAddresses(a),r}))}async checkHardwareStatus(e,t){return bn(vn,this,Tn).call(this,{name:e,hdPath:t},(async e=>e.isUnlocked()))}async getHardwareTypeForMetric(e){return await this.keyringController.withKeyring({address:e},(({keyring:e})=>ce.HardwareKeyringType[e.type]))}async forgetDevice(e){return bn(vn,this,Tn).call(this,{name:e},(async e=>{for(const t of e.accounts)this._onAccountRemoved(t);return e.forgetDevice(),!0}))}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case le.KeyringType.trezor:case le.KeyringType.oneKey:case le.KeyringType.lattice:case le.KeyringType.qr:case le.KeyringType.ledger:return"hardware";case le.KeyringType.imported:return"imported";case le.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){return this.keyringController.withKeyring({address:e},(async({keyring:e})=>{switch(e.type){case le.KeyringType.trezor:case le.KeyringType.oneKey:return e.getModel();case le.KeyringType.qr:return e.getName();case le.KeyringType.ledger:return ce.HardwareDeviceNames.ledger;case le.KeyringType.lattice:return ce.HardwareDeviceNames.lattice;default:return undefined}}))}getAccountLabel(e,t,n){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${n||""}`.trim()}async unlockHardwareWalletAccount(e,t,n,r){const{address:s}=await bn(vn,this,Tn).call(this,{name:t,hdPath:n},(async n=>{n.setAccountToUnlock(e);const[s]=await n.addAccounts(1);return{address:(0,X.normalize)(s),label:this.getAccountLabel(t===ce.HardwareDeviceNames.qr?n.getName():t,e,r)}}));this.preferencesController.setSelectedAddress(s);const a=this.accountsController.listAccounts(),{identities:o}=this.preferencesController.state;return{unlockedAccount:s,identities:o,accounts:a}}async addNewAccount(e,t){const n=await this.keyringController.getAccounts(),r=t?{id:t}:{type:h.KeyringTypes.hd},s=await this.keyringController.withKeyring(r,(async({keyring:t})=>{if(t.type!==h.KeyringTypes.hd)throw new Error("Cannot add account to non-HD keyring");const r=await t.getAccounts();if(e&&e!==r.length){if(e>r.length)throw new Error("Account out of sequence");const t=r[e];if(!t)throw new Error(`Can't find account at index ${e}`);return t}const[s]=await t.addAccounts(1);if(n.includes(s))throw await t.removeAccount(s),new Error(`Cannot add duplicate ${s} account`);return s}));return n.includes(s)||this.preferencesController.setSelectedAddress(s),s}async getSeedPhrase(e,t){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e,t))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address,t=bn(vn,this,Mn).call(this);return this.txController.wipeTransactions({address:e,chainId:t}),this.smartTransactionsController.wipeSmartTransactions({address:e,ignoreNetwork:!1}),this.bridgeStatusController.wipeBridgeStatus({address:e,ignoreNetwork:!1}),this.networkController.resetConnection(),e}captureKeyringTypesWithMissingIdentities(e=[],t=[]){const n=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),r=e.length,s=this.accountTrackerController.state.accountsByChainId[bn(vn,this,Mn).call(this)],a=Object.keys(s||{}).length;(0,T.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${r} identities, and the ${n} keyrings included accounts with missing identities. Meanwhile, there are ${a} accounts in the account tracker.`))}sortEvmAccountsByLastSelected(e){const t=this.accountsController.listAccounts();return this.sortAddressesWithInternalAccounts(e,t)}sortMultichainAccountsByLastSelected(e){const t=this.accountsController.listMultichainAccounts();return this.sortAddressesWithInternalAccounts(e,t)}sortAddressesWithInternalAccounts(e,t){return e.sort(((n,r)=>{const s=t.find((e=>e.address.toLowerCase()===n.toLowerCase())),a=t.find((e=>e.address.toLowerCase()===r.toLowerCase()));if(!s)throw this.captureKeyringTypesWithMissingIdentities(t,e),new Error(`Missing identity for address: "${n}".`);if(!a)throw this.captureKeyringTypesWithMissingIdentities(t,e),new Error(`Missing identity for address: "${r}".`);return s.metadata.lastSelected===a.metadata.lastSelected?0:s.metadata.lastSelected===undefined?1:a.metadata.lastSelected===undefined?-1:a.metadata.lastSelected-s.metadata.lastSelected}))}getPermittedAccounts(e,{ignoreLock:t}={}){let n;try{n=this.permissionController.getCaveat(e,te.Caip25EndowmentPermissionName,te.Caip25CaveatType)}catch(e){if(e instanceof R.PermissionDoesNotExistError)return[];throw e}if(!this.isUnlocked()&&!t)return[];const r=(0,te.getEthAccounts)(n.value);return this.sortEvmAccountsByLastSelected(r)}removeAllScopePermissions(e){this.permissionController.updatePermissionsByCaveat(te.Caip25CaveatType,(t=>te.Caip25CaveatMutators[te.Caip25CaveatType].removeScope(t,e)))}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(te.Caip25CaveatType,(t=>te.Caip25CaveatMutators[te.Caip25CaveatType].removeAccount(t,e)))}async removeAccount(e){return this._onAccountRemoved(e),await this.keyringController.removeAccount(e),e}async importAccountWithStrategy(e,t,n={shouldCreateSocialBackup:!0,shouldSelectAccount:!0}){const{shouldCreateSocialBackup:r,shouldSelectAccount:s}=n,a=await this.keyringController.importAccountWithStrategy(e,t);if(this.onboardingController.getIsSocialLoginFlow()){const{id:e,privateKey:t}=await this.keyringController.withKeyring({address:a},(async({keyring:e,metadata:t})=>{const n=await e.exportAccount(a);return{id:t.id,privateKey:n}}));try{await this.addNewPrivateKeyBackup(t,e,r)}catch(e){throw await this.keyringController.removeAccount(a),e}}s&&this.preferencesController.setSelectedAddress(a)}async addNewPrivateKeyBackup(e,t,n=!0){const r=(0,Q.hexToBytes)((0,Q.add0x)(e));n?await this.seedlessOnboardingController.addNewSecretData(r,se.SecretType.PrivateKey,{keyringId:t}):this.seedlessOnboardingController.updateBackupMetadataState({keyringId:t,data:r,type:se.SecretType.PrivateKey})}async requestPermissionApproval(e,t,n={}){const r=(0,k.nanoid)();return this.approvalController.addAndShowApprovalRequest({id:r,origin:e,requestData:{metadata:{id:r,origin:e},permissions:t,...n},type:R.MethodNames.RequestPermissions})}async requestApprovalPermittedChainsPermission(e,t){const n=(0,te.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{},sessionProperties:{},isMultichainOrigin:!1},[t]);await this.permissionController.requestPermissionsIncremental({origin:e},{[te.Caip25EndowmentPermissionName]:{caveats:[{type:te.Caip25CaveatType,value:n}]}})}async requestPermittedChainsPermissionIncremental({origin:e,chainId:t,autoApprove:n,metadata:r}){const s=(0,te.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{},sessionProperties:{},isMultichainOrigin:!1},[t]);if(!n){let t;return r&&(t={metadata:r}),void await this.permissionController.requestPermissionsIncremental({origin:e},{[te.Caip25EndowmentPermissionName]:{caveats:[{type:te.Caip25CaveatType,value:s}]}},t)}await this.permissionController.grantPermissionsIncremental({subject:{origin:e},approvedPermissions:{[te.Caip25EndowmentPermissionName]:{caveats:[{type:te.Caip25CaveatType,value:s}]}}})}getCaip25PermissionFromLegacyPermissions(e,t={}){var n,r;const s=(0,u.pick)(t,[de.RestrictedMethods.eth_accounts,wt.PermissionNames.permittedChains]);s[de.RestrictedMethods.eth_accounts]||(s[de.RestrictedMethods.eth_accounts]={}),s[wt.PermissionNames.permittedChains]||(s[wt.PermissionNames.permittedChains]={});const a=(null===(n=s[de.RestrictedMethods.eth_accounts])||void 0===n||null===(n=n.caveats)||void 0===n||null===(n=n.find((e=>e.type===de.CaveatTypes.restrictReturnedAccounts)))||void 0===n?void 0:n.value)??[],o=(null===(r=s[wt.PermissionNames.permittedChains])||void 0===r||null===(r=r.caveats)||void 0===r||null===(r=r.find((e=>e.type===de.CaveatTypes.restrictNetworkSwitching)))||void 0===r?void 0:r.value)??[],i=(0,te.setPermittedEthChainIds)({requiredScopes:{},optionalScopes:{"wallet:eip155":{accounts:[]}},sessionProperties:{},isMultichainOrigin:!1},o),c=(0,te.setEthAccounts)(i,a);return{[te.Caip25EndowmentPermissionName]:{caveats:[{type:te.Caip25CaveatType,value:c}]}}}getNonEvmSupportedMethods(e){return this.controllerMessenger.call("MultichainRouter:getSupportedMethods",e)}notifySolanaAccountChangedForCurrentAccount(e){let t;try{t=this.permissionController.getCaveat(e,te.Caip25EndowmentPermissionName,te.Caip25CaveatType)}catch{}if(!t)return;const n=t.value.sessionProperties[te.KnownSessionProperties.SolanaAccountChangedNotifications],r=(0,te.getSessionScopes)(t.value,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)}),s=r[_e.MultichainNetworks.SOLANA]||r[_e.MultichainNetworks.SOLANA_DEVNET]||r[_e.MultichainNetworks.SOLANA_TESTNET];if(n&&s){const{accounts:t}=s,n=t.map((e=>{const{address:t}=(0,Q.parseCaipAccountId)(e);return t})),[r]=this.sortMultichainAccountsByLastSelected(n);r&&this._notifySolanaAccountChange(e,[r])}}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:n,...r}){var s;const a=(null==n?void 0:n.networkClientId)??(null==t?void 0:t.networkClientId),{chainId:o}=this.networkController.getNetworkConfigurationByNetworkClientId(a);return{internalAccounts:this.accountsController.listAccounts(),dappRequest:n,networkClientId:a,selectedAccount:this.accountsController.getAccountByAddress(e.from),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,chainId:o,ppomController:this.ppomController,securityAlertsEnabled:null===(s=this.preferencesController.state)||void 0===s?void 0:s.securityAlertsEnabled,updateSecurityAlertResponse:this.updateSecurityAlertResponse.bind(this),...r}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,n){await this.txController.stopTransaction(e,t,n);return this.getState()}async createSpeedUpTransaction(e,t,n){await this.txController.speedUpTransaction(e,t,n);return this.getState()}async estimateGas(e){return new Promise(((t,n)=>{this.provider.request({method:"eth_estimateGas",params:[e]}).then((e=>t(e.toString(16)))).catch((e=>n(e)))}))}async updateSecurityAlertResponse(e,t,n){return await(0,xt.updateSecurityAlertResponse)({appStateController:this.appStateController,messenger:this.controllerMessenger,method:e,securityAlertId:t,securityAlertResponse:n,signatureController:this.signatureController,transactionController:this.txController})}getHDEntropyIndex(){const e=this.accountsController.getSelectedAccount(),t=this.keyringController.state.keyrings.filter((e=>e.type===h.KeyringTypes.hd)).findIndex((t=>t.accounts.includes(e.address)));return-1===t?undefined:t}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunicationEip1193({connectionStream:e,sender:t,subjectType:n}){if(t.url&&this.onboardingController.state.completedOnboarding&&this.preferencesController.state.usePhishDetect){const{hostname:n}=new URL(t.url);this.phishingController.maybeUpdateState();const r=this.phishingController.test(t.url);if(null!=r&&r.result)return this.sendPhishingWarning(e,n),void this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.PhishingPageDisplayed,category:me.MetaMetricsEventCategory.Phishing,properties:{url:n}})}let r;r=n||(t.id&&t.id!==this.extension.runtime.id?R.SubjectType.Extension:R.SubjectType.Website);const s=(0,st.setupMultiplex)(e);s.ignoreStream(Ot.METAMASK_CAIP_MULTICHAIN_PROVIDER),this.setupProviderConnectionEip1193(s.createStream(Ot.METAMASK_EIP_1193_PROVIDER),t,r),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupUntrustedCommunicationCaip({connectionStream:e,sender:t,subjectType:n}){let r;r=n||(t.id&&t.id!==this.extension.runtime.id?R.SubjectType.Extension:R.SubjectType.Website),this.setupProviderConnectionCaip(e,t,r)}setupTrustedCommunication(e,t){const n=(0,st.setupMultiplex)(e);this.setupControllerConnection(n.createStream("controller")),this.setupProviderConnectionEip1193(n.createStream("provider"),t,R.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.state;if(!t)return;const n=(0,st.setupMultiplex)(e).createStream("metamask-phishing-safelist");n.on("data",(0,mt.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},n))}setUpCookieHandlerCommunication({connectionStream:e}){const{metaMetricsId:t,dataCollectionForMarketing:n,participateInMetaMetrics:r}=this.metaMetricsController.state;if(t&&n&&r){const t=(0,st.setupMultiplex)(e).createStream(Ot.METAMASK_COOKIE_HANDLER);t.on("data",(0,mt.default)({getCookieFromMarketingPage:this.getCookieFromMarketingPage.bind(this)},t))}}getCookieFromMarketingPage(e){const{ga_client_id:t}=e;this.metaMetricsController.setMarketingCampaignCookieId(t)}sendPhishingWarning(e,t){(0,st.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=new Lt.PatchStore(this.memStore);let n=!1;const r=()=>{if(!(0,st.isStreamWritable)(e)||!n)return;const r=t.flushPendingPatches();e.write({jsonrpc:"2.0",method:"sendUpdate",params:[r]})},a={...this.getApi(),...this.controllerApi,startPatches:()=>{n=!0,r()},getStatePatches:()=>t.flushPendingPatches()};this.on("update",r),this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,mt.default)(a,e));const o=()=>{(0,st.isStreamWritable)(e)&&e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?o():this.once("startUISync",o);const i=()=>{e.mmFinished||(this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.mmFinished=!0,this.removeListener("update",r),t.destroy())};e.mmFinished=!1,(0,s.finished)(e,i),e.once("close",i),e.once("end",i)}setupProviderConnectionEip1193(e,t,n){let r,a;r=n===R.SubjectType.Internal?pe.ORIGIN_METAMASK:n===R.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:R.SubjectType.Extension}),t.tab&&t.tab.id&&(a=t.tab.id);let o=r;t.tab&&t.tab.url&&(o=new URL(t.tab.url).origin);const c=this.setupProviderEngineEip1193({origin:r,sender:t,subjectType:n,tabId:a,mainFrameOrigin:o}),l=(0,Je.default)(),d=(0,i.createEngineStream)({engine:c}),u=this.addConnection(r,{tabId:a,apiType:Cn,engine:c});(0,s.pipeline)(e,l,d,e,(e=>{var t;c.destroy(),u&&this.removeConnection(r,u),!e||null!==(t=e.message)&&void 0!==t&&t.match("Premature close")||b.default.error(e)})),n!==R.SubjectType.Internal&&this._notifyChainChangeForConnection({engine:c},r)}setupProviderConnectionCaip(e,t,n){let r,a;r=n===R.SubjectType.Internal?pe.ORIGIN_METAMASK:n===R.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:r,extensionId:t.id,subjectType:R.SubjectType.Extension}),t.tab&&t.tab.id&&(a=t.tab.id);const o=this.setupProviderEngineCaip({origin:r,sender:t,subjectType:n,tabId:a}),c=(0,Je.default)(),l=(0,i.createEngineStream)({engine:o}),d=this.addConnection(r,{tabId:a,apiType:yn,engine:o});setTimeout((()=>this.notifySolanaAccountChangedForCurrentAccount(r)),500),(0,s.pipeline)(e,c,l,e,(e=>{var t;o.destroy(),d&&this.removeConnection(r,d),!e||null!==(t=e.message)&&void 0!==t&&t.match("Premature close")||b.default.error(e)}))}setupCommonMiddlewareHooks(e){return{addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),getCaveat:({target:t,caveatType:n})=>{try{return this.permissionController.getCaveat(e,t,n)}catch(e){if(!(e instanceof R.PermissionDoesNotExistError))throw e}return undefined},requestPermittedChainsPermissionIncrementalForOrigin:t=>this.requestPermittedChainsPermissionIncremental({...t,origin:e}),addNetwork:this.networkController.addNetwork.bind(this.networkController),updateNetwork:this.networkController.updateNetwork.bind(this.networkController),setActiveNetwork:async t=>{await this.networkController.setActiveNetwork(t),this.permissionController.hasPermission(e,te.Caip25EndowmentPermissionName)&&this.selectedNetworkController.setNetworkClientIdForDomain(e,t)},getNetworkConfigurationByChainId:this.networkController.getNetworkConfigurationByChainId.bind(this.networkController),setTokenNetworkFilter:e=>{const{tokenNetworkFilter:t}=this.preferencesController.getPreferences();e&&1===Object.keys(t).length&&this.preferencesController.setPreference("tokenNetworkFilter",{[e]:!0})},setEnabledNetworks:(e,t)=>{this.networkOrderController.setEnabledNetworks(e,t)},getEnabledNetworks:e=>this.networkOrderController.state.enabledNetworkMap[e]||{},getCurrentChainIdForDomain:e=>{const t=this.selectedNetworkController.getNetworkClientIdForDomain(e),{chainId:n}=this.networkController.getNetworkConfigurationByNetworkClientId(t);return n},getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController),rejectApprovalRequestsForOrigin:()=>this.rejectOriginPendingApprovals(e)}}setupProviderEngineEip1193({origin:e,subjectType:t,sender:n,tabId:r,mainFrameOrigin:s}){const a=new o.JsonRpcEngine;a.push((0,Xe.default)({origin:e})),s&&a.push((0,Ze.default)({mainFrameOrigin:s})),a.push((0,x.createSelectedNetworkMiddleware)(this.controllerMessenger));const i=this.selectedNetworkController.getProviderAndBlockTracker(e),c=(0,p.default)(i),l=(0,m.default)(i);return l.events.on("notification",(e=>a.emit("notification",e))),r&&a.push((0,et.default)({tabId:r})),a.push((0,Ye.default)({origin:e})),a.push(this.permissionLogController.createMiddleware()),e===Pe.BaseUrl.Portfolio&&a.push((0,Rt.createTxVerificationMiddleware)(this.networkController)),a.push((0,$t.default)()),a.push((0,Dt.default)({getThrottledOriginState:this.appStateController.getThrottledOriginState.bind(this.appStateController),updateThrottledOriginState:this.appStateController.updateThrottledOriginState.bind(this.appStateController)})),a.push((0,qe.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.accountsController,this.updateSecurityAlertResponse.bind(this))),a.push((0,Ve.createTrustSignalsMiddleware)(this.networkController,this.appStateController,this.phishingController,this.preferencesController,this.getPermittedAccounts.bind(this))),a.push((0,kt.default)({getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHDEntropyIndex:this.getHDEntropyIndex.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController,metaMetricsController:this.metaMetricsController})),a.push((0,Qe.createUnsupportedMethodMiddleware)()),t===R.SubjectType.Snap&&(0,$e.isSnapPreinstalled)(e)&&a.push((0,$.createPreinstalledSnapsMiddleware)({getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getAllEvmAccounts:()=>this.controllerMessenger.call("AccountsController:listAccounts").map((e=>e.address)),grantPermissions:t=>this.controllerMessenger.call("PermissionController:grantPermissions",{approvedPermissions:t,subject:{origin:e}})})),a.push((0,Qe.createEthAccountsMethodMiddleware)({getAccounts:this.getPermittedAccounts.bind(this,e)})),t!==R.SubjectType.Internal&&a.push(this.permissionController.createPermissionMiddleware({origin:e})),t===R.SubjectType.Website&&a.push((0,rt.default)({location:n.url,registerOnboarding:this.onboardingController.registerOnboarding})),a.push((0,jt.default)({messenger:this.controllerMessenger.getRestricted({name:"EvmMethodsToNonEvmAccountFilterMessenger",allowedActions:["AccountsController:getSelectedAccount"]})})),a.push((0,Qe.createEip1193MethodMiddleware)({subjectType:t,...this.setupCommonMiddlewareHooks(e),metamaskState:this.getState(),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getCaip25PermissionFromLegacyPermissionsForOrigin:this.getCaip25PermissionFromLegacyPermissions.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),requestPermissionsForOrigin:t=>this.permissionController.requestPermissions({origin:e},t,{metadata:{isEip1193Request:!0}}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},updateCaveat:this.permissionController.updateCaveat.bind(this.permissionController,e),hasApprovalRequestsForOrigin:()=>this.approvalController.has({origin:e})})),a.push((0,$.createSnapsMethodMiddleware)(t===R.SubjectType.Snap,{clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState",e),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState",e),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),invokeSnap:this.permissionController.executeRestrictedMethod.bind(this.permissionController,e,de.RestrictedMethods.wallet_snap),getIsLocked:()=>!this.appStateController.isUnlocked(),getIsActive:()=>this._isClientOpen,getInterfaceState:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).state,getInterfaceContext:(...t)=>this.controllerMessenger.call("SnapInterfaceController:getInterface",e,...t).context,createInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:createInterface",e),updateInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:updateInterface",e),resolveInterface:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapInterfaceController:resolveInterface",e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),trackError:e=>(0,T.captureException)(e),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),openWebSocket:this.controllerMessenger.call.bind(this.controllerMessenger,"WebSocketService:open",e),closeWebSocket:this.controllerMessenger.call.bind(this.controllerMessenger,"WebSocketService:close",e),getWebSockets:this.controllerMessenger.call.bind(this.controllerMessenger,"WebSocketService:getAll",e),sendWebSocketMessage:this.controllerMessenger.call.bind(this.controllerMessenger,"WebSocketService:sendMessage",e),getCurrencyRate:e=>{const t=this.multichainRatesController.state.rates[e],{fiatCurrency:n}=this.multichainRatesController.state;return t?{...t,currency:n}:undefined},getEntropySources:()=>this.controllerMessenger.call("KeyringController:getState").keyrings.map(((e,t)=>e.type===h.KeyringTypes.hd?{id:e.metadata.id,name:e.metadata.name,type:"mnemonic",primary:0===t}:null)).filter(Boolean),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),scheduleBackgroundEvent:t=>this.controllerMessenger.call("CronjobController:schedule",{...t,snapId:e}),cancelBackgroundEvent:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:cancel",e),getBackgroundEvents:this.controllerMessenger.call.bind(this.controllerMessenger,"CronjobController:get",e),getNetworkConfigurationByChainId:this.controllerMessenger.call.bind(this.controllerMessenger,"NetworkController:getNetworkConfigurationByChainId"),getNetworkClientById:this.controllerMessenger.call.bind(this.controllerMessenger,"NetworkController:getNetworkClientById"),startTrace:Ae.trace,endTrace:Ae.endTrace,handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,Le.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),a.push(c),a.push(l.middleware),a.push(this.metamaskMiddleware),a.push((0,d.providerAsMiddleware)(i.provider)),a}setupProviderEngineCaip({origin:e,sender:t,subjectType:n,tabId:r}){const s=new o.JsonRpcEngine;s.push((0,Xe.default)({origin:e})),r&&s.push((0,et.default)({tabId:r})),s.push((0,Ye.default)({origin:e})),s.push(((e,t,n,r)=>[pe.MESSAGE_TYPE.WALLET_CREATE_SESSION,pe.MESSAGE_TYPE.WALLET_INVOKE_METHOD,pe.MESSAGE_TYPE.WALLET_GET_SESSION,pe.MESSAGE_TYPE.WALLET_REVOKE_SESSION].includes(e.method)?n():r(f.rpcErrors.methodNotFound({data:{method:e.method}})))),s.push((0,kt.default)({getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHDEntropyIndex:this.getHDEntropyIndex.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController,metaMetricsController:this.metaMetricsController})),s.push(ee.multichainMethodCallValidatorMiddleware);const a=(0,Qe.makeMethodMiddlewareMaker)([ee.walletRevokeSession,ee.walletGetSession,ee.walletInvokeMethod,ee.walletCreateSession]);s.push(a({findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),listAccounts:this.accountsController.listAccounts.bind(this.accountsController),requestPermissionsForOrigin:(t,n={})=>this.permissionController.requestPermissions({origin:e},t,n),getCaveatForOrigin:this.permissionController.getCaveat.bind(this.permissionController,e),getSelectedNetworkClientId:()=>this.networkController.state.selectedNetworkClientId,revokePermissionForOrigin:this.permissionController.revokePermission.bind(this.permissionController,e),getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this),isNonEvmScopeSupported:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:isSupportedScope"),handleNonEvmRequestForOrigin:t=>this.controllerMessenger.call("MultichainRouter:handleRequest",{...t,origin:e}),getNonEvmAccountAddresses:this.controllerMessenger.call.bind(this.controllerMessenger,"MultichainRouter:getSupportedAccounts"),trackSessionCreatedEvent:e=>this.metaMetricsController.trackEvent({event:me.MetaMetricsEventName.PermissionsRequested,properties:{api_source:me.MetaMetricsRequestedThrough.MultichainApi,method:pe.MESSAGE_TYPE.WALLET_CREATE_SESSION,chain_id_list:(0,te.getAllScopesFromCaip25CaveatValue)(e)}})})),s.push((0,Qe.createUnsupportedMethodMiddleware)(new Set([...ie.UNSUPPORTED_RPC_METHODS,"eth_requestAccounts","eth_accounts"]))),n===R.SubjectType.Website&&s.push((0,rt.default)({location:t.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,Qe.createMultichainMethodMiddleware)({subjectType:n,...this.setupCommonMiddlewareHooks(e)})),s.push(this.metamaskMiddleware);try{const t=this.permissionController.getCaveat(e,te.Caip25EndowmentPermissionName,te.Caip25CaveatType),n=(0,te.getSessionScopes)(t.value,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)});Object.entries(n).forEach((([t,n])=>{n.notifications.includes("eth_subscription")&&n.methods.includes("eth_subscribe")&&this.addMultichainApiEthSubscriptionMiddleware({scope:t,origin:e,tabId:r})}))}catch(e){}return this.multichainSubscriptionManager.on("notification",((t,n,a)=>{e===t&&r===n&&s.emit("notification",a)})),s.push(this.multichainMiddlewareManager.generateMultichainMiddlewareForOriginAndTabId(e,r)),s.push((async(e,t,n,r)=>{const{provider:s}=this.networkController.getNetworkClientById(e.networkClientId);return t.result=await s.request(e),r()})),s}setupPublicConfig(e){const t=(0,l.storeAsStream)(this.publicConfigStore);(0,s.pipeline)(t,e,(e=>{var n;t.destroy(),!e||null!==(n=e.message)&&void 0!==n&&n.match("Premature close")||b.default.error(e)}))}addConnection(e,{tabId:t,apiType:n,engine:r}){if(e===pe.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const s=(0,k.nanoid)();return this.connections[e][s]={tabId:t,apiType:n,engine:r},s}removeConnection(e,t){const n=this.connections[e];n&&(delete n[t],0===Object.keys(n).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t,n){const r=this.connections[e];r&&Object.values(r).forEach((e=>{n&&e.apiType!==n||e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e,t){const n="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{if(!t||r.apiType===t)try{this.notifyConnection(r,await n(e))}catch(e){console.error(e)}}))}))}notifyConnection(e,t){try{e.engine&&e.engine.emit("notification",t)}catch(e){console.error(e)}}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,n=t.reduce(((e,{accounts:t})=>e.concat(t)),[]).filter(Bt.isEthAddress);n.length&&this.accountTrackerController.syncWithAddresses(n)}_onUnlock(){this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}_onAccountRemoved(e){this.removeAllAccountPermissions(e)}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async initializeChainlist(){const e=`cachedFetch:${ie.CHAIN_SPEC_URL}`,{cachedResponse:t}=await(0,ge.getStorageItem)(e)||{};t||await(0,ge.setStorageItem)(e,{cachedResponse:(0,S.rawChainData)(),cachedTime:0}),await(0,ft.initializeRpcProviderDomains)()}async getPendingNonce(e,t){const{nonceDetails:n,releaseLock:r}=await this.txController.getNonceLock(e,t),s=n.params.highestSuggested;return r(),s}async getNextNonce(e,t){const n=await this.txController.getNonceLock(e,t);return n.releaseLock(),n.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountBalance:(e,t)=>{var n;return null===(n=this.accountTrackerController.state.accountsByChainId)||void 0===n||null===(n=n[t])||void 0===n||null===(n=n[e])||void 0===n?void 0:n.balance},getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e)),getIsSmartTransaction:e=>(0,Te.getIsSmartTransaction)(this._getMetaMaskState(),e),getSmartTransactionByMinedTxHash:e=>this.smartTransactionsController.getSmartTransactionByMinedTxHash(e),getMethodData:e=>{if(!e)return null;const{knownMethodData:t,use4ByteResolution:n}=this.preferencesController.state,r=(0,ft.addHexPrefix)(e);return(0,ft.getMethodDataName)(t,n,r,this.preferencesController.addKnownMethodData.bind(this.preferencesController),this.provider)},getIsConfirmationAdvancedDetailsOpen:()=>this.preferencesController.state.preferences.showConfirmationAdvancedDetails,getHDEntropyIndex:this.getHDEntropyIndex.bind(this),getNetworkRpcUrl:e=>{try{var t;const r=this.networkController.findNetworkClientIdByChainId(e),s=this.networkController.getNetworkConfigurationByNetworkClientId(r);if(s.rpcUrl)return s.rpcUrl;if((null===(t=s.rpcEndpoints)||void 0===t?void 0:t.length)>0){var n;const e=s.defaultRpcEndpointIndex||0;return(null===(n=s.rpcEndpoints[e])||void 0===n?void 0:n.url)||s.rpcEndpoints[0].url}return"unknown"}catch(e){return console.error("Error getting RPC URL:",e),"unknown"}}},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}updateAccountBalanceForTransactionNetwork(e){const{networkClientId:t,txParams:{from:n}}=e;this.accountTrackerController.updateAccountByAddress({address:n,networkClientId:t})}toggleExternalServices(e){this.preferencesController.toggleExternalServices(e),this.tokenListController.updatePreventPollingOnNetworkRestart(!e),e?(this.tokenDetectionController.enable(),this.gasFeeController.enableNonRPCGasFeeApis()):(this.tokenDetectionController.disable(),this.gasFeeController.disableNonRPCGasFeeApis())}async setLedgerTransportPreference(e){const t=window.navigator.hid?ce.LedgerTransportTypes.webhid:ce.LedgerTransportTypes.u2f;return null!=e&&e.updateTransportMethod?e.updateTransportMethod(t).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t="13.0.1";e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e}onClientClosed(){try{this.gasFeeController.stopAllPolling(),this.currencyRateController.stopAllPolling(),this.tokenRatesController.stopAllPolling(),this.tokenDetectionController.stopAllPolling(),this.tokenListController.stopAllPolling(),this.tokenBalancesController.stopAllPolling(),this.appStateController.clearPollingTokens(),this.accountTrackerController.stopAllPolling(),this.deFiPositionsController.stopAllPolling()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=pe.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.state[t].forEach((e=>{this.gasFeeController.stopPollingByPollingToken(e),this.currencyRateController.stopPollingByPollingToken(e),this.tokenRatesController.stopPollingByPollingToken(e),this.tokenDetectionController.stopPollingByPollingToken(e),this.tokenListController.stopPollingByPollingToken(e),this.tokenBalancesController.stopPollingByPollingToken(e),this.accountTrackerController.stopPollingByPollingToken(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return(0,ft.getPlatform)()===pe.PLATFORM_FIREFOX||this.metaMetricsController.trackEvent({category:me.MetaMetricsEventCategory.Phishing,event:me.MetaMetricsEventName.ProceedAnywayClicked,properties:{url:e,referrer:{url:e}}},{excludeMetaMetricsId:!0}),this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){this.metaMetricsController.trackEvent({category:me.MetaMetricsEventCategory.Navigation,event:me.MetaMetricsEventName.PortfolioLinkClicked,properties:{location:"phishing_page",text:"Back to safety"}}),await this.platform.switchToAnotherURL(undefined,"https://portfolio.metamask.io/?metamaskEntry=phishing_page_portfolio_button")}setLocked(){return this.keyringController.setLocked()}rejectAllPendingApprovals(){(0,Kt.rejectAllApprovals)({approvalController:this.approvalController,deleteInterface:e=>this.controllerMessenger.call("SnapInterfaceController:deleteInterface",e)})}async getCode(e,t){const{provider:n}=this.networkController.getNetworkClientById(t);return await n.request({method:"eth_getCode",params:[e]})}async _onAccountChange(e){const t=(0,wt.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[n,r]of t.entries())r.includes(e)&&this._notifyAccountsChange(n,r)}_notifyAccountsChange(e,t){this.notifyConnections(e,{method:wt.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:this.getPermittedAccounts(e)},Cn),this.permissionLogController.updateAccountsHistory(e,t)}async _notifyAuthorizationChange(e,t){this.notifyConnections(e,{method:ee.MultichainApiNotifications.sessionChanged,params:{sessionScopes:(0,te.getSessionScopes)(t,{getNonEvmSupportedMethods:this.getNonEvmSupportedMethods.bind(this)})}},yn)}async _notifySolanaAccountChange(e,t){this.notifyConnections(e,{method:ee.MultichainApiNotifications.walletNotify,params:{scope:_e.MultichainNetworks.SOLANA,notification:{method:wt.NOTIFICATION_NAMES.accountsChanged,params:t}}},yn)}async _notifyChainChange(){this.notifyAllConnections((async e=>({method:wt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(e)})),Cn)}async _notifyChainChangeForConnection(e,t){this.notifyConnection(e,{method:wt.NOTIFICATION_NAMES.chainChanged,params:await this.getProviderNetworkState(t)})}async _onFinishedTransaction(e){if(![W.TransactionStatus.confirmed,W.TransactionStatus.failed].includes(e.status))return;const t=performance.now(),n=(0,Ae.trace)({name:Ae.TraceName.OnFinishedTransaction,startTime:performance.timeOrigin});(0,Ae.trace)({name:Ae.TraceName.OnFinishedTransaction,startTime:performance.timeOrigin,parentContext:n,data:{transactionMeta:e}}),await this._createTransactionNotifcation(e),await this._updateNFTOwnership(e),this._trackTransactionFailure(e),await this.tokenBalancesController.updateBalancesByChainId({chainId:e.chainId}),(0,Ae.endTrace)({name:Ae.TraceName.OnFinishedTransaction,timestamp:performance.timeOrigin+t})}async _createTransactionNotifcation(e){const{chainId:t}=e;let n={};if(t){var r,s;const e=null===(r=this.networkController.state.networkConfigurationsByChainId)||void 0===r?void 0:r[t];n={blockExplorerUrl:null==e||null===(s=e.blockExplorerUrls)||void 0===s?void 0:s[null==e?void 0:e.defaultBlockExplorerUrlIndex]}}try{await this.platform.showTransactionNotification(e,n)}catch(e){b.default.error("Failed to create transaction notification",e)}}async _updateNFTOwnership(e){var t,n;const{type:r,txParams:s,chainId:a,txReceipt:o}=e,i=this.accountsController.getSelectedAccount().address,{allNfts:c}=this.nftController.state,l=null==o?void 0:o.logs,d=r===W.TransactionType.contractInteraction&&l,u=(r===W.TransactionType.tokenMethodTransferFrom||r===W.TransactionType.tokenMethodSafeTransferFrom)&&s!==undefined;if(!d&&!u)return;const h=null===(t=this.networkController)||void 0===t||null===(t=t.state)||void 0===t||null===(t=t.networkConfigurationsByChainId)||void 0===t||null===(t=t[a])||void 0===t||null===(t=t.rpcEndpoints[null===(n=this.networkController)||void 0===n||null===(n=n.state)||void 0===n||null===(n=n.networkConfigurationsByChainId)||void 0===n||null===(n=n[a])||void 0===n?void 0:n.defaultRpcEndpointIndex])||void 0===t?void 0:t.networkClientId;if(u){var p;const{data:e,to:t,from:n}=s,r=(0,ye.parseStandardTokenTransactionData)(e),o=(0,be.getTokenIdParam)(r)??(0,Se.getTokenValueParam)(r),i=null==c||null===(p=c[n])||void 0===p||null===(p=p[a])||void 0===p?void 0:p.find((({address:e,tokenId:n})=>(0,Ce.isEqualCaseInsensitive)(e,t)&&n===o));i&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(i,!1,h,{userAddress:n})}else{const e=l.map((e=>{const t=e.topics&&e.topics[0]===Ee.TRANSFER_SINFLE_LOG_TOPIC_HASH,n=e.topics&&e.topics[0]===Ee.TOKEN_TRANSFER_LOG_TOPIC_HASH;let r;return t&&(r=e.topics&&e.topics[3]&&e.topics[3].match(null==i?void 0:i.slice(2))),n&&(r=e.topics&&e.topics[2]&&e.topics[2].match(null==i?void 0:i.slice(2))),{isERC1155NftTransfer:t,isERC721NftTransfer:n,isTransferToSelectedAddress:r,...e}}));if(0!==e.length){const t=[];e.forEach((e=>{if(e.isTransferToSelectedAddress&&(e.isERC1155NftTransfer||e.isERC721NftTransfer)){let n;n=e.isERC1155NftTransfer?new z.Interface(J.abiERC1155):new z.Interface(J.abiERC721);try{const r=n.parseLog({data:e.data,topics:e.topics});t.push({contract:e.address,...r})}catch(e){}}}));const n=[],r=[];t.forEach((e=>{var t;const s=(0,be.getTokenIdParam)(e),o=null==c||null===(t=c[i])||void 0===t||null===(t=t[a])||void 0===t?void 0:t.find((({address:t,tokenId:n})=>(0,Ce.isEqualCaseInsensitive)(t,e.contract)&&n===s));o?n.push(o):r.push({tokenId:s,...e})}));const s=n.map((async e=>this.nftController.checkAndUpdateSingleNftOwnershipStatus(e,!1,h,{selectedAddress:i})));await Promise.allSettled(s);const o=r.map((async e=>this.nftController.addNft(e.contract,e.tokenId,h)));await Promise.allSettled(o)}}}_trackTransactionFailure(e){var t,n;const{txReceipt:r}=e,s=this.getState(),{allTokens:a}=this.tokensController.state,o=this.accountsController.getSelectedAccount(),i=(null==a||null===(t=a[e.chainId])||void 0===t?void 0:t[o.address])||[];r&&"0x0"===r.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:me.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(n=e.simulationFails)||void 0===n?void 0:n.reason,numberOfTokens:i.length,numberOfAccounts:Object.keys(s.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===W.TransactionType.swap?this.controllerMessenger.publish("TransactionController:transactionNewSwap",{transactionMeta:t}):t.type===W.TransactionType.swapApproval&&this.controllerMessenger.publish("TransactionController:transactionNewSwapApproval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){const t={...e,txParams:{...e.txParams,from:this.accountsController.getSelectedAccount().address}};this.txController.state.transactions.some((e=>e.id===t.id))||this.txController.update((e=>{e.transactions.push(t)})),this.txController.updateTransaction(t,"Generated from user operation"),this.controllerMessenger.publish("TransactionController:transactionStatusUpdated",{transactionMeta:t})}_getMetaMaskState(){return{metamask:this.getState()}}_getConfigForRemoteFeatureFlagRequest(){return{distribution:Sn.main||U.DistributionType.Main,environment:wn.production||U.EnvironmentType.Development}}}async function Tn(e,t){var n,r,s,a,o;const i=null===(n=this.opts.overrides)||void 0===n?void 0:n.keyrings;let c=null;switch(e.name){case ce.HardwareDeviceNames.trezor:c=(null==i||null===(r=i.trezor)||void 0===r?void 0:r.type)||C.TrezorKeyring.type;break;case ce.HardwareDeviceNames.oneKey:c=(null==i||null===(s=i.oneKey)||void 0===s?void 0:s.type)||(null===C.OneKeyKeyring||void 0===C.OneKeyKeyring?void 0:C.OneKeyKeyring.type);break;case ce.HardwareDeviceNames.ledger:c=(null==i||null===(a=i.ledger)||void 0===a?void 0:a.type)||y.LedgerKeyring.type;break;case ce.HardwareDeviceNames.qr:c=v.MetaMaskKeyring.type;break;case ce.HardwareDeviceNames.lattice:c=(null==i||null===(o=i.lattice)||void 0===o?void 0:o.type)||w.default.type;break;default:throw new Error("MetamaskController:#withKeyringForDevice - Unknown device")}return this.keyringController.withKeyring({type:c},(async({keyring:n})=>{if(e.hdPath&&n.setHdPath&&n.setHdPath(e.hdPath),e.name===ce.HardwareDeviceNames.lattice&&(n.appName="MetaMask"),e.name===ce.HardwareDeviceNames.trezor||e.name===ce.HardwareDeviceNames.oneKey){const e=n.getModel();this.appStateController.setTrezorModel(e)}return n.network=(0,Me.getProviderConfig)({metamask:this.networkController.state}).type,await t(n)}),{createIfMissing:!0})}function Pn(e,t){const n=bn(vn,this,En).call(this,t),r=bn(vn,this,En).call(this,e);n!==r&&this.tokenListController.updatePreventPollingOnNetworkRestart(!r)}function En(e){const{useTokenDetection:t,useTransactionSimulations:n,preferences:r}=e??{},{petnamesEnabled:s}=r??{};return t||s||n}function Mn(){const e=bn(vn,this,An).call(this);return this.networkController.getNetworkClientById(e).configuration.chainId}function An(){return this.networkController.state.selectedNetworkClientId}function In({existingControllers:e,initFunctions:t,initState:n}){const r={getCronjobControllerStorageManager:()=>this.opts.cronjobControllerStorageManager,getFlatState:this.getState.bind(this),getGlobalChainId:bn(vn,this,Mn).bind(this),getGlobalNetworkClientId:bn(vn,this,An).bind(this),getPermittedAccounts:this.getPermittedAccounts.bind(this),getProvider:()=>this.provider,getStateUI:this._getMetaMaskState.bind(this),getTransactionMetricsRequest:this.getTransactionMetricsRequest.bind(this),updateAccountBalanceForTransactionNetwork:this.updateAccountBalanceForTransactionNetwork.bind(this),offscreenPromise:this.offscreenPromise,preinstalledSnaps:this.opts.preinstalledSnaps,persistedState:n,removeAllConnections:this.removeAllConnections.bind(this),setupUntrustedCommunicationEip1193:this.setupUntrustedCommunicationEip1193.bind(this),showNotification:this.platform._showNotification,getMetaMetricsId:this.metaMetricsController.getMetaMetricsId.bind(this.metaMetricsController),trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),refreshOAuthToken:this.oauthService.getNewRefreshToken.bind(this.oauthService),revokeAndGetNewRefreshToken:this.oauthService.revokeAndGetNewRefreshToken.bind(this.oauthService),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getHardwareTypeForMetric:this.getHardwareTypeForMetric.bind(this),trace:Ae.trace};return(0,Jt.initControllers)({baseControllerMessenger:this.controllerMessenger,existingControllers:e,initFunctions:t,initRequest:r})}n.default=kn}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[228,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:2,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[229,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:3,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[23,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){function r(e){return e.getRestricted({name:"AccountTreeController",allowedEvents:["AccountsController:accountAdded","AccountsController:accountRemoved"],allowedActions:["AccountsController:listMultichainAccounts","SnapController:get","KeyringController:getState"]})}Object.defineProperty(n,"__esModule",{value:!0}),n.getAccountTreeControllerInitMessenger=function(e){return r(e)},n.getAccountTreeControllerMessenger=r}}},{package:"$root$",file:"app/scripts/controller-init/messengers/accounts/account-tree-controller-messenger.ts"}],[230,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:4,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[231,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:5,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,n={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete n.vault,delete n.walletNicknames,delete n.config.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[232,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:6,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,n={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete n.KeyringController.selectedAccount,n}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[233,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:7,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[234,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:8,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[235,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:9,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,r.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[236,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:10,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,r.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[2363,{"./push-utils.cjs":2364},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createSubscribeToPushNotifications=n.deleteRegToken=n.createRegToken=void 0;var r=e("./push-utils.cjs");Object.defineProperty(n,"createRegToken",{enumerable:!0,get:function(){return r.createRegToken}}),Object.defineProperty(n,"deleteRegToken",{enumerable:!0,get:function(){return r.deleteRegToken}}),Object.defineProperty(n,"createSubscribeToPushNotifications",{enumerable:!0,get:function(){return r.createSubscribeToPushNotifications}})}}},{package:"@metamask/notification-services-controller",file:"node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/web/index.cjs"}],[2364,{"../../NotificationServicesController/index.cjs":2337,"../../shared/to-raw-notification.cjs":2368,"firebase/app":4504,"firebase/messaging":4505,"firebase/messaging/sw":4506,loglevel:4920},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.createSubscribeToPushNotifications=n.deleteRegToken=n.createRegToken=n.supportedCache=void 0;const s=e("firebase/app"),a=e("firebase/messaging"),o=e("firebase/messaging/sw"),i=r(e("loglevel")),c=e("../../NotificationServicesController/index.cjs"),l=e("../../shared/to-raw-notification.cjs");n.supportedCache=null;const d=async e=>{if(!await(async()=>(n.supportedCache??(n.supportedCache=await(0,o.isSupported)()),n.supportedCache))())return null;const t=await(async e=>{try{return(0,s.getApp)()}catch{const t={apiKey:e.apiKey,authDomain:e.authDomain,storageBucket:e.storageBucket,projectId:e.projectId,messagingSenderId:e.messagingSenderId,appId:e.appId,measurementId:e.measurementId};return(0,s.initializeApp)(t)}})(e);return(0,o.getMessaging)(t)};n.createRegToken=async function(e){try{const t=await d(e);if(!t)return null;return await(0,a.getToken)(t,{serviceWorkerRegistration:self.registration,vapidKey:e.vapidKey})}catch{return null}},n.deleteRegToken=async function(e){try{const t=await d(e);return!t||(await(0,a.deleteToken)(t),!0)}catch{return!1}},n.createSubscribeToPushNotifications=function(e){return async function(t){const n=await async function(e,t){const n=await d(e);if(!n)return null;const r=(0,o.onBackgroundMessage)(n,(async e=>{try{const n=e?.data?.data?JSON.parse(e?.data?.data):undefined;if(!n)return;const r=(0,l.toRawOnChainNotification)(n),s=c.Processors.processNotification(r);await t(s)}catch(t){throw i.default.error("Unable to send push notification:",{notification:e?.data?.data,error:t}),new Error("Unable to send push notification")}}));return()=>r()}(t,(async t=>{e.messenger.publish("NotificationServicesPushController:onNewNotifications",t),await e.onReceivedHandler(t)})),r=function(e){const t=t=>{const n=t?.notification?.data;e(t,n)};return self.addEventListener("notificationclick",t),()=>self.removeEventListener("notificationclick",t)}(((t,n)=>{e.messenger.publish("NotificationServicesPushController:pushNotificationClicked",n),e.onClickHandler(t,n)}));return()=>{n?.(),r()}}}}}},{package:"@metamask/notification-services-controller",file:"node_modules/@metamask/notification-services-controller/dist/NotificationServicesPushController/web/push-utils.cjs"}],[237,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:11,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[2374,{"./ObservableStore":2376},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.ComposedStore=void 0;const r=e("./ObservableStore");class s extends r.ObservableStore{constructor(e){super({}),this._children=e||{},Object.keys(this._children).forEach((e=>{const t=this._children[e];this._addChild(e,t)}))}_addChild(e,t){const n=t=>{const n=this.getState();n[e]=t,this.putState(n)};t.subscribe(n),n(t.getState())}}n.ComposedStore=s}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/ComposedStore.js"}],[2375,{"./ObservableStore":2376},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.MergedStore=void 0;const r=e("./ObservableStore");class s extends r.ObservableStore{constructor(e=[]){super({}),this._children=e,e.forEach((e=>this._addChild(e))),this._updateWholeState()}_addChild(e){e.subscribe((()=>this._updateWholeState()))}_updateWholeState(){const e=this._children.map((e=>e.getState())),t=Object.assign({},...e);this.putState(t)}}n.MergedStore=s}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/MergedStore.js"}],[2376,{"@metamask/safe-event-emitter":2526},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.ObservableStore=void 0;const s=r(e("@metamask/safe-event-emitter"));class a extends s.default{constructor(e){super(),e===undefined?this._state={}:this._state=e}getState(){return this._getState()}putState(e){this._putState(e),this.emit("update",e)}updateState(e){if(e&&"object"==typeof e){const t=this.getState();this.putState(Object.assign(Object.assign({},t),e))}else this.putState(e)}subscribe(e){this.on("update",e)}unsubscribe(e){this.removeListener("update",e)}_getState(){return this._state}_putState(e){this._state=e}}n.ObservableStore=a}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/ObservableStore.js"}],[2377,{"readable-stream":5277},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.storeAsStream=void 0;const r=e("readable-stream");class s extends r.Duplex{constructor(e){super({objectMode:!0}),this.resume(),this.handler=e=>this.push(e),this.obsStore=e,this.obsStore.subscribe(this.handler)}pipe(e,t){const n=super.pipe(e,t);return e.write(this.obsStore.getState()),n}_write(e,t,n){this.obsStore.putState(e),n()}_read(e){return undefined}_destroy(e,t){this.obsStore.unsubscribe(this.handler),super._destroy(e,t)}}n.storeAsStream=function(e){return new s(e)}}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/asStream.js"}],[2378,{"./ComposedStore":2374,"./MergedStore":2375,"./ObservableStore":2376,"./asStream":2377,"./transform":2379},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./asStream"),n),s(e("./ComposedStore"),n),s(e("./MergedStore"),n),s(e("./ObservableStore"),n),s(e("./transform"),n)}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/index.js"}],[2379,{"readable-stream":5277},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.storeTransformStream=void 0;const r=e("readable-stream");n.storeTransformStream=function(e){return new r.Transform({objectMode:!0,transform:(t,n,r)=>{try{const n=e(t);return r(undefined,n),undefined}catch(e){return r(e),undefined}}})}}}},{package:"@metamask/obs-store",file:"node_modules/@metamask/obs-store/dist/transform.js"}],[238,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:12,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[239,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:13,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:n}=t;n&&n.provider&&"testnet"===n.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/013.js"}],[2392,{"./enums.cjs":2393,"@metamask/base-controller":1476,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u,h=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},p=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.PermissionLogController=void 0;const m=e("@metamask/base-controller"),f=e("@metamask/utils"),g=e("./enums.cjs"),b={permissionHistory:{},permissionActivityLog:[]};class C extends m.BaseController{constructor({messenger:e,restrictedMethods:t,state:n}){super({messenger:e,name:"PermissionLogController",metadata:{permissionHistory:{persist:!0,anonymous:!1},permissionActivityLog:{persist:!1,anonymous:!1}},state:{...b,...n}}),r.add(this),s.set(this,void 0),h(this,s,t,"f")}updateAccountsHistory(e,t){if(0===t.length)return;const n={eth_accounts:{accounts:p(this,r,"m",a).call(this,t,Date.now())}};p(this,r,"m",l).call(this,e,n)}createMiddleware(){return(e,t,n)=>{const{origin:a,method:l}=e,u=l.startsWith(g.WALLET_PREFIX),h="eth_requestAccounts"===l;if(!g.LOG_IGNORE_METHODS.includes(l)&&(u||p(this,s,"f").has(l))||h){const s=p(this,r,"m",o).call(this,e,u),l=p(this,r,"m",d).call(this,e);n((e=>{const n=Date.now();p(this,r,"m",i).call(this,s,t,n),l&&!t.error&&t.result&&a&&p(this,r,"m",c).call(this,l,a,t.result,n,h),e()}))}else n()}}}n.PermissionLogController=C,s=new WeakMap,r=new WeakSet,a=function(e,t){return e.reduce(((e,n)=>({...e,[n]:t})),{})},o=function(e,t){const n={id:e.id,method:e.method,methodType:t?g.LOG_METHOD_TYPES.internal:g.LOG_METHOD_TYPES.restricted,origin:e.origin,requestTime:Date.now(),responseTime:null,success:null};return this.update((e=>{const t=[...e.permissionActivityLog,n];e.permissionActivityLog=t.length>g.LOG_LIMIT?t.slice(1):t})),n},i=function(e,t,n){e&&t&&this.update((r=>{r.permissionActivityLog=r.permissionActivityLog.map((r=>r.id===e.id?{...r,success:(0,f.hasProperty)(t,"result"),responseTime:n}:r))}))},c=function(e,t,n,s,o){let i;if(o){const e=n;i={eth_accounts:{accounts:p(this,r,"m",a).call(this,e,s),lastApproved:s}}}else{i=n.reduce(((t,n)=>{const o=n.parentCapability;if(!e.includes(o))return t;if("eth_accounts"===o){const e=p(this,r,"m",u).call(this,n);return{...t,[o]:{lastApproved:s,accounts:p(this,r,"m",a).call(this,e,s)}}}return{...t,[o]:{lastApproved:s}}}),{})}Object.keys(i).length>0&&p(this,r,"m",l).call(this,t,i)},l=function(e,t){const{permissionHistory:n}=this.state,r=n[e]??{},s={...r,...t},a=r.eth_accounts,o=t.eth_accounts;if(a&&o){const e=o.lastApproved??a.lastApproved;s.eth_accounts={lastApproved:e,accounts:{...a.accounts,...o.accounts}}}this.update((t=>{t.permissionHistory={...n,[e]:s}}))},d=function(e){const{method:t,params:n}=e;return"eth_requestAccounts"===t?["eth_accounts"]:t===`${g.WALLET_PREFIX}requestPermissions`&&n&&Array.isArray(n)&&n[0]&&"object"==typeof n[0]&&!Array.isArray(n[0])?Object.keys(n[0]):null},u=function(e){if("eth_accounts"!==e.parentCapability||!e.caveats)return[];const t=new Set;for(const n of e.caveats)if(n.type===g.CAVEAT_TYPES.restrictReturnedAccounts&&Array.isArray(n.value))for(const e of n.value)t.add(e);return[...t]}}}},{package:"@metamask/permission-log-controller",file:"node_modules/@metamask/permission-log-controller/dist/PermissionLogController.cjs"}],[2393,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r;Object.defineProperty(n,"__esModule",{value:!0}),n.LOG_LIMIT=n.LOG_METHOD_TYPES=n.LOG_IGNORE_METHODS=n.CAVEAT_TYPES=n.WALLET_PREFIX=void 0,n.WALLET_PREFIX="wallet_",n.CAVEAT_TYPES=Object.freeze({restrictReturnedAccounts:"restrictReturnedAccounts"}),n.LOG_IGNORE_METHODS=["wallet_registerOnboarding","wallet_watchAsset"],function(e){e.restricted="restricted",e.internal="internal"}(r||(n.LOG_METHOD_TYPES=r={})),n.LOG_LIMIT=100}}},{package:"@metamask/permission-log-controller",file:"node_modules/@metamask/permission-log-controller/dist/enums.cjs"}],[2394,{"./PermissionLogController.cjs":2392},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./PermissionLogController.cjs"),n)}}},{package:"@metamask/permission-log-controller",file:"node_modules/@metamask/permission-log-controller/dist/index.cjs"}],[24,{"./account-tree-controller-messenger":23,"./institutional-snap-controller-messenger":25},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"getAccountTreeControllerInitMessenger",{enumerable:!0,get:function(){return r.getAccountTreeControllerInitMessenger}}),Object.defineProperty(n,"getAccountTreeControllerMessenger",{enumerable:!0,get:function(){return r.getAccountTreeControllerMessenger}}),Object.defineProperty(n,"getInstitutionalSnapControllerMessenger",{enumerable:!0,get:function(){return s.getInstitutionalSnapControllerMessenger}});var r=e("./account-tree-controller-messenger"),s=e("./institutional-snap-controller-messenger")}}},{package:"$root$",file:"app/scripts/controller-init/messengers/accounts/index.ts"}],[240,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:14,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/014.js"}],[241,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/transaction-controller"),s=e("lodash");n.default={version:15,migrate(e){const t=(0,s.cloneDeep)(e);t.meta.version=15;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=n;t.TransactionController.transactions=e.map((e=>e.err?("Gave up submitting tx."===e.err.message&&(e.status=r.TransactionStatus.failed),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #15${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/015.js"}],[2412,{"./ppom-controller":2413},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.PPOMController=n.NETWORK_CACHE_DURATION=void 0;var r=e("./ppom-controller");Object.defineProperty(n,"NETWORK_CACHE_DURATION",{enumerable:!0,get:function(){return r.NETWORK_CACHE_DURATION}}),Object.defineProperty(n,"PPOMController",{enumerable:!0,get:function(){return r.PPOMController}})}}},{package:"@metamask/ppom-validator",file:"node_modules/@metamask/ppom-validator/dist/index.js"}],[2413,{"./ppom-storage":2414,"./util":2415,"@metamask/base-controller":2420,"@metamask/controller-utils":1559,"await-semaphore":3936},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u,h,p,m,f,g,b,C,y,w,S,v,k,T,P,E,M,A,I,N,_,O,R,x,j=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},B=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.PPOMController=n.NETWORK_CACHE_DURATION=void 0;const F=e("@metamask/base-controller"),$=e("@metamask/controller-utils"),D=e("await-semaphore"),L=e("./ppom-storage"),U=e("./util");n.NETWORK_CACHE_DURATION=6048e5;const K=["eth_call","eth_blockNumber","eth_createAccessList","eth_getLogs","eth_getFilterLogs","eth_getTransactionByHash","eth_chainId","eth_getBlockByHash","eth_getBlockByNumber","eth_getCode","eth_getStorageAt","eth_getBalance","eth_getTransactionCount","trace_call","trace_callMany","debug_traceCall","trace_filter"],H={versionInfo:{persist:!0,anonymous:!1},storageMetadata:{persist:!0,anonymous:!1}},q="PPOMController",V={headers:{"Content-Type":"application/json"}};class G extends F.BaseController{constructor({chainId:e,messenger:t,provider:n,storageBackend:C,securityAlertsEnabled:y,onPreferencesChange:w,ppomProvider:T,cdnBaseUrl:P,providerRequestLimit:E,state:M,blockaidPublicKey:A,nativeCrypto:I}){super({name:q,metadata:H,messenger:t,state:{versionInfo:M?.versionInfo??[],storageMetadata:M?.storageMetadata??[]}}),r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),c.set(this,void 0),l.set(this,void 0),d.set(this,void 0),u.set(this,0),h.set(this,void 0),p.set(this,void 0),m.set(this,{}),f.set(this,void 0),g.set(this,!1),b.set(this,undefined),j(this,h,(0,U.addHexPrefix)(e),"f"),j(this,a,n,"f"),j(this,c,T,"f"),j(this,o,new L.PPOMStorage({storageBackend:C,readMetadata:()=>[...this.state.storageMetadata],writeMetadata:e=>{this.update((t=>{t.storageMetadata=e}))}}),"f"),j(this,i,new D.Mutex,"f"),j(this,l,P,"f"),j(this,d,E??300,"f"),j(this,p,y,"f"),j(this,f,A,"f"),j(this,b,I,"f"),w(B(this,r,"m",S).bind(this)),B(this,r,"m",v).call(this),B(this,r,"m",k).call(this)}async usePPOM(e,t){const n=t??B(this,h,"f");if(!B(this,p,"f"))throw Error("User has securityAlertsEnabled set to false");if(!(0,U.blockaidValidationSupportedForNetwork)(n))throw Error(`Blockaid validation not available on network with chainId: ${n}`);return await B(this,i,"f").use((async()=>{const t=await B(this,r,"m",P).call(this,n);j(this,u,0,"f"),j(this,m,{},"f");return{...await e(t),providerRequestsCount:{...B(this,m,"f")}}}))}}n.PPOMController=G,s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,c=new WeakMap,l=new WeakMap,d=new WeakMap,u=new WeakMap,h=new WeakMap,p=new WeakMap,m=new WeakMap,f=new WeakMap,g=new WeakMap,b=new WeakMap,r=new WeakSet,C=async function(){if(B(this,p,"f")&&!B(this,g,"f")){const{ppomInit:e}=B(this,c,"f");await e("./ppom_bg.wasm"),j(this,g,!0,"f")}},y=function(){B(this,r,"m",T).call(this).catch((e=>{console.error(`Error in resetting ppom: ${e.message}`)}));const{storageMetadata:e}=this.state;this.update((e=>{e.versionInfo=[],e.storageMetadata=[]})),B(this,o,"f").deleteAllFiles(e).catch((e=>{console.error(`Error in deleting files: ${e.message}`)}))},w=function(e){const t=this.messagingSystem.call("NetworkController:getNetworkClientById",e.selectedNetworkClientId),{chainId:n}=t.configuration,s=(0,U.addHexPrefix)(n);s!==B(this,h,"f")&&(j(this,h,s,"f"),B(this,r,"m",T).call(this).catch((e=>{console.error(`Error in resetting ppom: ${e.message}`)})))},S=function(e){const t=e.securityAlertsEnabled;t!==B(this,p,"f")&&(j(this,p,t,"f"),t||B(this,r,"m",y).call(this))},v=function(){this.messagingSystem.registerActionHandler(`${q}:usePPOM`,this.usePPOM.bind(this))},k=function(){const e=B(this,r,"m",w).bind(this);this.messagingSystem.subscribe("NetworkController:networkDidChange",e)},T=async function(){await B(this,i,"f").use((async()=>{B(this,s,"f")&&(B(this,s,"f").free(),j(this,s,undefined,"f"))}))},P=async function(e){const t=await B(this,r,"m",E).call(this);let n;return(B(this,s,"f")===undefined||t)&&(n=await B(this,r,"m",x).call(this,e),B(this,h,"f")===e&&(B(this,s,"f")&&B(this,s,"f").free(),j(this,s,n,"f")),B(this,o,"f").syncMetadata(this.state.versionInfo).catch((e=>{console.error(`Error while trying to sync metadata: ${e.message}`)}))),n},E=async function(){const e=await B(this,r,"m",_).call(this);return!!e&&(this.update((t=>{t.versionInfo=e})),!0)},M=function(e,t){return e.find((e=>e.name===t.name&&e.chainId===t.chainId&&e.version===t.version&&e.checksum===t.checksum))},A=async function(e){const t=await Promise.all(e.map((async e=>{let t;try{t=await B(this,r,"m",I).call(this,e)}catch(t){console.error(`Error in getting file ${e.filePath}: ${t.message}`)}return t?[e.name,new Uint8Array(t)]:undefined})));return t?.filter((e=>e?.[1]!==undefined))},I=async function(e){const{storageMetadata:t}=this.state;if(B(this,r,"m",M).call(this,t,e))try{return await B(this,o,"f").readFile(e.name,e.chainId)}catch(e){console.error(`Error in reading file: ${e.message}`)}(0,U.checkFilePath)(e.filePath);const n=(0,U.constructURLHref)(B(this,l,"f"),e.filePath),s=await B(this,r,"m",O).call(this,n);return await(0,U.validateSignature)(s,e.hashSignature,B(this,f,"f"),e.filePath,B(this,b,"f")),await B(this,o,"f").writeFile({data:s,...e}).catch((e=>{console.error(`Error in writing file: ${e.message}`)})),s},N=async function(e,t={},n="GET"){const r=await(0,$.safelyExecute)((async()=>(0,$.timeoutFetch)(e,{method:n,cache:"no-cache",redirect:"error",...t},1e4)),!0),s=304===r?.status;if(!r?.status||r?.status<200||r?.status>399)throw new Error(`Failed to fetch file with url: ${e}`);return{cached:s,response:r}},_=async function(){const e=(0,U.constructURLHref)(B(this,l,"f"),"ppom_version.json"),{cached:t,response:n}=await B(this,r,"m",N).call(this,e,{headers:V});return t&&this.state.versionInfo?.length?undefined:n.json()},O=async function(e){const{response:t}=await B(this,r,"m",N).call(this,e);return await t.arrayBuffer()},R=async function(e,t){if(B(this,u,"f")>B(this,d,"f"))return U.PROVIDER_ERRORS.limitExceeded();if(j(this,u,B(this,u,"f")+1,"f"),!K.includes(e))return U.PROVIDER_ERRORS.methodNotSupported();B(this,m,"f")[e]=B(this,m,"f")[e]?Number(B(this,m,"f")[e])+1:1;const n=(0,U.createPayload)(e,t);try{const e=await B(this,a,"f").request(n);return{jsonrpc:"2.0",id:n.id,result:e}}catch(e){return{jsonrpc:"2.0",id:n.id,error:e}}},x=async function(e){await B(this,r,"m",C).call(this);const t=this.state.versionInfo.filter((({chainId:t})=>t===e));if(t?.length===undefined||0===t?.length)throw new Error(`Aborting initialising PPOM as no files are found for the network with chainId: ${e}`);const n=await B(this,r,"m",A).call(this,t);if(n?.length!==t?.length)throw new Error(`Aborting initialising PPOM as not all files could not be downloaded for the network with chainId: ${e}`);const{PPOM:s}=B(this,c,"f");return s.new(B(this,r,"m",R).bind(this),n)}}}},{package:"@metamask/ppom-validator",file:"node_modules/@metamask/ppom-validator/dist/ppom-controller.js"}],[2414,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},i=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.PPOMStorage=void 0;n.PPOMStorage=class{constructor({storageBackend:e,readMetadata:t,writeMetadata:n}){r.set(this,void 0),s.set(this,void 0),a.set(this,void 0),o(this,r,e,"f"),o(this,s,t,"f"),o(this,a,n,"f")}async syncMetadata(e){const t=i(this,s,"f").call(this),n=[];for(const r of t){try{await this.readFile(r.name,r.chainId)}catch(e){console.error("Error: ",e);continue}e.find((e=>e.name===r.name&&e.chainId===r.chainId&&e.version===r.version&&e.checksum===r.checksum))&&n.push(r)}const o=await i(this,r,"f").dir();for(const{name:e,chainId:t}of o)n.find((n=>n.name===e&&n.chainId===t))||await i(this,r,"f").delete({name:e,chainId:t});return i(this,a,"f").call(this,n),n}async deleteAllFiles(e){for(const t of e){const{name:e,chainId:n}=t;try{await i(this,r,"f").delete({name:e,chainId:n})}catch(t){console.error(`Error in deleting file: ${e}, ${n}`,t)}}}async readFile(e,t){const n=i(this,s,"f").call(this).find((n=>n.name===e&&n.chainId===t));if(!n)throw new Error(`File metadata (${e}, ${t}) not found`);const a=await i(this,r,"f").read({name:e,chainId:t},n.checksum);if(!a)throw new Error(`Storage File (${e}, ${t}) not found`);return a}async writeFile({data:e,name:t,chainId:n,version:o,checksum:c}){await i(this,r,"f").write({name:t,chainId:n},e,c);const l=i(this,s,"f").call(this),d=l.find((e=>e.name===t&&e.chainId===n));d?(d.version=o,d.checksum=c):l.push({name:t,chainId:n,version:o,checksum:c}),i(this,a,"f").call(this,l)}},r=new WeakMap,s=new WeakMap,a=new WeakMap}}},{package:"@metamask/ppom-validator",file:"node_modules/@metamask/ppom-validator/dist/ppom-storage.js"}],[2415,{buffer:4106,"crypto-js":4224,elliptic:4280,"json-rpc-random-id":4743},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){(function(t){(function(){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.checkFilePath=n.addHexPrefix=n.constructURLHref=n.validateSignature=n.PROVIDER_ERRORS=n.createPayload=n.IdGenerator=n.blockaidValidationSupportedForNetwork=n.SUPPORTED_NETWORK_CHAINIDS=void 0;const i=a(e("crypto-js")),c=o(e("elliptic")),l=o(e("json-rpc-random-id")),d=c.default.eddsa;n.SUPPORTED_NETWORK_CHAINIDS={MAINNET:"0x1",BSC:"0x38",OPTIMISM:"0xa",POLYGON:"0x89",AVALANCHE:"0xa86a",ARBITRUM:"0xa4b1",LINEA_MAINNET:"0xe708",BASE:"0x2105",SEPOLIA:"0xaa36a7",OPBNB:"0xcc",ZKSYNC:"0x144",SCROLL:"0x82750",BERACHAIN:"0x138d4",METACHAIN_ONE:"0x1b6e6"};n.blockaidValidationSupportedForNetwork=e=>Object.values(n.SUPPORTED_NETWORK_CHAINIDS).some((t=>t===e)),n.IdGenerator=(0,l.default)();n.createPayload=(e,t)=>({id:(0,n.IdGenerator)(),jsonrpc:"2.0",method:e,params:t??[]}),n.PROVIDER_ERRORS={limitExceeded:()=>({jsonrpc:"2.0",id:(0,n.IdGenerator)(),error:{code:-32005,message:"Limit exceeded"}}),methodNotSupported:()=>({jsonrpc:"2.0",id:(0,n.IdGenerator)(),error:{code:-32601,message:"Method not supported"}})};n.validateSignature=async(e,n,r,s,a,o)=>{const c=await(async(e,t,n=!0)=>{if(t)return t.createHash("sha256").update(e).digest("hex");if("crypto"in globalThis&&"object"==typeof globalThis.crypto&&globalThis.crypto.subtle?.digest&&n){const t=await globalThis.crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(t)).map((e=>e.toString(16).padStart(2,"0"))).join("")}return(0,i.SHA256)(i.default.lib.WordArray.create(e)).toString()})(e,a,o);if(!new d("ed25519").keyFromPublic(r).verify(t.from(c),n))throw Error(`Signature verification failed for file path: ${s}`)};n.constructURLHref=(e,t)=>new URL(`https://${e}/${t}`.replace(/https:\/\/https:\/\//gu,"https://").replace(/\/\//gu,"/")).href;n.addHexPrefix=e=>"string"!=typeof e||e.match(/^-?0x/u)?e:e.match(/^-?0X/u)?e.replace("0X","0x"):`0x${parseInt(e,10).toString(16)}`;n.checkFilePath=e=>{if(!e.match(/^[\w./]+$/u))throw new Error(`Invalid file path for data file: ${e}`)}}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@metamask/ppom-validator",file:"node_modules/@metamask/ppom-validator/dist/util.js"}],[2416,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.BaseControllerV1=n.isBaseControllerV1=void 0,n.isBaseControllerV1=function(e){return"name"in e&&"string"==typeof e.name&&"config"in e&&"object"==typeof e.config&&"defaultConfig"in e&&"object"==typeof e.defaultConfig&&"state"in e&&"object"==typeof e.state&&"defaultState"in e&&"object"==typeof e.defaultState&&"disabled"in e&&"boolean"==typeof e.disabled&&"subscribe"in e&&"function"==typeof e.subscribe};class r{constructor(e={},t={}){this.defaultConfig={},this.defaultState={},this.disabled=!1,this.name="BaseController",this.internalConfig=this.defaultConfig,this.internalState=this.defaultState,this.internalListeners=[],this.initialState=t,this.initialConfig=e}initialize(){return this.internalState=this.defaultState,this.internalConfig=this.defaultConfig,this.configure(this.initialConfig),this.update(this.initialState),this}get config(){return this.internalConfig}get state(){return this.internalState}configure(e,t=!1,n=!0){if(n){this.internalConfig=t?e:Object.assign(this.internalConfig,e);for(const e of Object.keys(this.internalConfig)){const t=this.internalConfig[e];t!==undefined&&(this[e]=t)}}else for(const t of Object.keys(e))if(this.internalConfig[t]!==undefined){const n=e[t];this.internalConfig[t]=n,this[t]=n}}notify(){this.disabled||this.internalListeners.forEach((e=>{e(this.internalState)}))}subscribe(e){this.internalListeners.push(e)}unsubscribe(e){const t=this.internalListeners.findIndex((t=>e===t));return t>-1&&this.internalListeners.splice(t,1),t>-1}update(e,t=!1){this.internalState=t?Object.assign({},e):Object.assign({},this.internalState,e),this.notify()}}n.BaseControllerV1=r,n.default=r}}},{package:"@metamask/ppom-validator>@metamask/base-controller",file:"node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/BaseControllerV1.cjs"}],[2417,{immer:4707},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},a=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.getPersistentState=n.getAnonymizedState=n.BaseController=n.isBaseController=void 0;const o=e("immer");(0,o.enablePatches)(),n.isBaseController=function(e){return"name"in e&&"string"==typeof e.name&&"state"in e&&"object"==typeof e.state&&"metadata"in e&&"object"==typeof e.metadata};function i(e,t,n){return Object.keys(e).reduce(((r,s)=>{try{const a=t[s];if(!a)throw new Error(`No metadata found for '${String(s)}'`);const o=a[n],i=e[s];return"function"==typeof o?r[s]=o(i):o&&(r[s]=i),r}catch(e){return setTimeout((()=>{throw e})),r}}),{})}n.BaseController=class{constructor({messenger:e,metadata:t,name:n,state:a}){r.set(this,void 0),this.messagingSystem=e,this.name=n,s(this,r,(0,o.freeze)(a,!0),"f"),this.metadata=t,this.messagingSystem.registerActionHandler(`${n}:getState`,(()=>this.state)),this.messagingSystem.registerInitialEventPayload({eventType:`${n}:stateChange`,getPayload:()=>[this.state,[]]})}get state(){return a(this,r,"f")}set state(e){throw new Error("Controller state cannot be directly mutated; use 'update' method instead.")}update(e){const[t,n,i]=o.produceWithPatches(a(this,r,"f"),e);return s(this,r,t,"f"),this.messagingSystem.publish(`${this.name}:stateChange`,t,n),{nextState:t,patches:n,inversePatches:i}}applyPatches(e){const t=(0,o.applyPatches)(a(this,r,"f"),e);s(this,r,t,"f"),this.messagingSystem.publish(`${this.name}:stateChange`,t,e)}destroy(){this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`)}},r=new WeakMap,n.getAnonymizedState=function(e,t){return i(e,t,"anonymous")},n.getPersistentState=function(e,t){return i(e,t,"persist")}}}},{package:"@metamask/ppom-validator>@metamask/base-controller",file:"node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/BaseControllerV2.cjs"}],[2418,{"./RestrictedMessenger.cjs":2419},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.ControllerMessenger=n.Messenger=void 0;const c=e("./RestrictedMessenger.cjs");class l{constructor(){r.set(this,new Map),s.set(this,new Map),a.set(this,new Map),o.set(this,new Map)}registerActionHandler(e,t){if(i(this,r,"f").has(e))throw new Error(`A handler for ${e} has already been registered`);i(this,r,"f").set(e,t)}unregisterActionHandler(e){i(this,r,"f").delete(e)}clearActions(){i(this,r,"f").clear()}call(e,...t){const n=i(this,r,"f").get(e);if(!n)throw new Error(`A handler for ${e} has not been registered`);return n(...t)}registerInitialEventPayload({eventType:e,getPayload:t}){i(this,a,"f").set(e,t)}publish(e,...t){const n=i(this,s,"f").get(e);if(n)for(const[e,r]of n.entries())try{if(r){const n=i(this,o,"f").get(e),s=r(...t);s!==n&&(i(this,o,"f").set(e,s),e(s,n))}else e(...t)}catch(e){setTimeout((()=>{throw e}))}}subscribe(e,t,n){let r=i(this,s,"f").get(e);if(r||(r=new Map,i(this,s,"f").set(e,r)),r.set(t,n),n){const r=i(this,a,"f").get(e);if(r){const e=n(...r());i(this,o,"f").set(t,e)}}}unsubscribe(e,t){const n=i(this,s,"f").get(e);if(!n||!n.has(t))throw new Error(`Subscription not found for event: ${e}`);n.get(t)&&i(this,o,"f").delete(t),n.delete(t)}clearEventSubscriptions(e){i(this,s,"f").delete(e)}clearSubscriptions(){i(this,s,"f").clear()}getRestricted({name:e,allowedActions:t,allowedEvents:n}){return new c.RestrictedMessenger({messenger:this,name:e,allowedActions:t,allowedEvents:n})}}n.Messenger=l,n.ControllerMessenger=l,r=new WeakMap,s=new WeakMap,a=new WeakMap,o=new WeakMap}}},{package:"@metamask/ppom-validator>@metamask/base-controller",file:"node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/Messenger.cjs"}],[2419,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},h=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.RestrictedControllerMessenger=n.RestrictedMessenger=void 0;class p{constructor({controllerMessenger:e,messenger:t,name:n,allowedActions:c,allowedEvents:l}){if(r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),t&&e)throw new Error("Both messenger properties provided. Provide message using only 'messenger' option, 'controllerMessenger' is deprecated");if(!t&&!e)throw new Error("Messenger not provided");u(this,s,t??e,"f"),u(this,a,n,"f"),u(this,o,c,"f"),u(this,i,l,"f")}registerActionHandler(e,t){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed registering action handlers prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").registerActionHandler(e,t)}unregisterActionHandler(e){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed unregistering action handlers prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").unregisterActionHandler(e)}call(e,...t){if(!h(this,r,"m",l).call(this,e))throw new Error(`Action missing from allow list: ${e}`);return h(this,s,"f").call(e,...t)}registerInitialEventPayload({eventType:e,getPayload:t}){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").registerInitialEventPayload({eventType:e,getPayload:t})}publish(e,...t){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").publish(e,...t)}subscribe(e,t,n){if(!h(this,r,"m",c).call(this,e))throw new Error(`Event missing from allow list: ${e}`);return n?h(this,s,"f").subscribe(e,t,n):h(this,s,"f").subscribe(e,t)}unsubscribe(e,t){if(!h(this,r,"m",c).call(this,e))throw new Error(`Event missing from allow list: ${e}`);h(this,s,"f").unsubscribe(e,t)}clearEventSubscriptions(e){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed clearing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").clearEventSubscriptions(e)}}n.RestrictedMessenger=p,n.RestrictedControllerMessenger=p,s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,r=new WeakSet,c=function(e){const t=h(this,i,"f");return h(this,r,"m",d).call(this,e)||null!==t&&t.includes(e)},l=function(e){const t=h(this,o,"f");return h(this,r,"m",d).call(this,e)||null!==t&&t.includes(e)},d=function(e){return e.startsWith(`${h(this,a,"f")}:`)}}}},{package:"@metamask/ppom-validator>@metamask/base-controller",file:"node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/RestrictedMessenger.cjs"}],[242,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/transaction-controller"),s=e("lodash");n.default={version:16,migrate(e){const t=(0,s.cloneDeep)(e);t.meta.version=16;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>e.err?("transaction with the same hash was already imported."===e.err&&(e.status=r.TransactionStatus.submitted,delete e.err),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #16${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/016.js"}],[2420,{"./BaseControllerV1.cjs":2416,"./BaseControllerV2.cjs":2417,"./Messenger.cjs":2418,"./RestrictedMessenger.cjs":2419},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.RestrictedMessenger=n.RestrictedControllerMessenger=n.Messenger=n.ControllerMessenger=n.isBaseController=n.getPersistentState=n.getAnonymizedState=n.BaseController=n.isBaseControllerV1=n.BaseControllerV1=void 0;var r=e("./BaseControllerV1.cjs");Object.defineProperty(n,"BaseControllerV1",{enumerable:!0,get:function(){return r.BaseControllerV1}}),Object.defineProperty(n,"isBaseControllerV1",{enumerable:!0,get:function(){return r.isBaseControllerV1}});var s=e("./BaseControllerV2.cjs");Object.defineProperty(n,"BaseController",{enumerable:!0,get:function(){return s.BaseController}}),Object.defineProperty(n,"getAnonymizedState",{enumerable:!0,get:function(){return s.getAnonymizedState}}),Object.defineProperty(n,"getPersistentState",{enumerable:!0,get:function(){return s.getPersistentState}}),Object.defineProperty(n,"isBaseController",{enumerable:!0,get:function(){return s.isBaseController}});var a=e("./Messenger.cjs");Object.defineProperty(n,"ControllerMessenger",{enumerable:!0,get:function(){return a.ControllerMessenger}}),Object.defineProperty(n,"Messenger",{enumerable:!0,get:function(){return a.Messenger}});var o=e("./RestrictedMessenger.cjs");Object.defineProperty(n,"RestrictedControllerMessenger",{enumerable:!0,get:function(){return o.RestrictedControllerMessenger}}),Object.defineProperty(n,"RestrictedMessenger",{enumerable:!0,get:function(){return o.RestrictedMessenger}})}}},{package:"@metamask/ppom-validator>@metamask/base-controller",file:"node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/index.cjs"}],[2421,{"./constants.cjs":2422,"@metamask/base-controller":1476,"@metamask/controller-utils":1559},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.PreferencesController=n.getDefaultPreferencesState=void 0;const o=e("@metamask/base-controller"),i=e("@metamask/controller-utils"),c=e("./constants.cjs"),l={featureFlags:{persist:!0,anonymous:!0},identities:{persist:!0,anonymous:!1},ipfsGateway:{persist:!0,anonymous:!1},isIpfsGatewayEnabled:{persist:!0,anonymous:!0},isMultiAccountBalancesEnabled:{persist:!0,anonymous:!0},lostIdentities:{persist:!0,anonymous:!1},openSeaEnabled:{persist:!0,anonymous:!0},securityAlertsEnabled:{persist:!0,anonymous:!0},selectedAddress:{persist:!0,anonymous:!1},showTestNetworks:{persist:!0,anonymous:!0},showIncomingTransactions:{persist:!0,anonymous:!0},useNftDetection:{persist:!0,anonymous:!0},useTokenDetection:{persist:!0,anonymous:!0},smartTransactionsOptInStatus:{persist:!0,anonymous:!1},useTransactionSimulations:{persist:!0,anonymous:!0},useMultiRpcMigration:{persist:!0,anonymous:!0},useSafeChainsListValidation:{persist:!0,anonymous:!0},tokenSortConfig:{persist:!0,anonymous:!0},privacyMode:{persist:!0,anonymous:!0}};function d(){return{featureFlags:{},identities:{},ipfsGateway:"https://ipfs.io/ipfs/",isIpfsGatewayEnabled:!0,isMultiAccountBalancesEnabled:!0,lostIdentities:{},openSeaEnabled:!1,securityAlertsEnabled:!1,selectedAddress:"",showIncomingTransactions:{[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.MAINNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.GOERLI]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC_TESTNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM_SEPOLIA]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON_TESTNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE_TESTNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM_TESTNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.SEPOLIA]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_GOERLI]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_SEPOLIA]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_MAINNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM_TESTNET]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONRIVER]:!0,[c.ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]:!0},showTestNetworks:!1,useNftDetection:!1,useTokenDetection:!0,useMultiRpcMigration:!0,smartTransactionsOptInStatus:!0,useTransactionSimulations:!0,useSafeChainsListValidation:!0,tokenSortConfig:{key:"tokenFiatAmount",order:"dsc",sortCallback:"stringNumeric"},privacyMode:!1}}n.getDefaultPreferencesState=d;class u extends o.BaseController{constructor({messenger:e,state:t}){super({name:"PreferencesController",metadata:l,messenger:e,state:{...d(),...t}}),r.add(this),e.subscribe("KeyringController:stateChange",(e=>{const t=new Set;for(const n of e.keyrings)for(const e of n.accounts)t.add(e);t.size>0&&a(this,r,"m",s).call(this,Array.from(t))}))}addIdentities(e){const t=e.map((e=>(0,i.toChecksumHexAddress)(e)));this.update((e=>{const{identities:n}=e;for(const e of t){if(n[e])continue;const t=Object.keys(n).length;n[e]={name:`Account ${t+1}`,address:e,importTime:Date.now()}}}))}removeIdentity(e){e=(0,i.toChecksumHexAddress)(e);const{identities:t}=this.state;t[e]&&this.update((t=>{delete t.identities[e],e===t.selectedAddress&&(t.selectedAddress=Object.keys(t.identities)[0])}))}setAccountLabel(e,t){e=(0,i.toChecksumHexAddress)(e),this.update((n=>{const r=n.identities[e]||{};r.name=t,n.identities[e]=r}))}setFeatureFlag(e,t){this.update((n=>{n.featureFlags[e]=t}))}setSelectedAddress(e){this.update((t=>{t.selectedAddress=(0,i.toChecksumHexAddress)(e)}))}setIpfsGateway(e){this.update((t=>{t.ipfsGateway=e}))}setUseTokenDetection(e){this.update((t=>{t.useTokenDetection=e}))}setUseNftDetection(e){if(e&&!this.state.openSeaEnabled)throw new Error("useNftDetection cannot be enabled if openSeaEnabled is false");this.update((t=>{t.useNftDetection=e}))}setOpenSeaEnabled(e){this.update((t=>{t.openSeaEnabled=e,e||(t.useNftDetection=!1)}))}setSecurityAlertsEnabled(e){this.update((t=>{t.securityAlertsEnabled=e}))}setIsMultiAccountBalancesEnabled(e){this.update((t=>{t.isMultiAccountBalancesEnabled=e}))}setShowTestNetworks(e){this.update((t=>{t.showTestNetworks=e}))}setIsIpfsGatewayEnabled(e){this.update((t=>{t.isIpfsGatewayEnabled=e}))}setEnableNetworkIncomingTransactions(e,t){Object.values(c.ETHERSCAN_SUPPORTED_CHAIN_IDS).includes(e)&&this.update((n=>{n.showIncomingTransactions={...this.state.showIncomingTransactions,[e]:t}}))}setUseMultiRpcMigration(e){this.update((t=>{t.useMultiRpcMigration=e,e||(t.useMultiRpcMigration=!1)}))}setSmartTransactionsOptInStatus(e){this.update((t=>{t.smartTransactionsOptInStatus=e}))}setUseTransactionSimulations(e){this.update((t=>{t.useTransactionSimulations=e}))}setTokenSortConfig(e){this.update((t=>{t.tokenSortConfig=e}))}setUseSafeChainsListValidation(e){this.update((t=>{t.useSafeChainsListValidation=e}))}setPrivacyMode(e){this.update((t=>{t.privacyMode=e}))}}n.PreferencesController=u,r=new WeakSet,s=function(e){e=e.map((e=>(0,i.toChecksumHexAddress)(e))),this.update((t=>{const{identities:n}=t,r={};for(const[t,s]of Object.entries(n))e.includes(t)||(r[t]=s,delete n[t]);for(const[e,n]of Object.entries(r))t.lostIdentities[e]=n})),this.addIdentities(e),e.includes(this.state.selectedAddress)||this.update((t=>{t.selectedAddress=e[0]}))},n.default=u}}},{package:"@metamask/preferences-controller",file:"node_modules/@metamask/preferences-controller/dist/PreferencesController.cjs"}],[2422,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.ETHERSCAN_SUPPORTED_CHAIN_IDS=void 0,n.ETHERSCAN_SUPPORTED_CHAIN_IDS={MAINNET:"0x1",GOERLI:"0x5",BSC:"0x38",BSC_TESTNET:"0x61",OPTIMISM:"0xa",OPTIMISM_SEPOLIA:"0xaa37dc",POLYGON:"0x89",POLYGON_TESTNET:"0x13881",AVALANCHE:"0xa86a",AVALANCHE_TESTNET:"0xa869",FANTOM:"0xfa",FANTOM_TESTNET:"0xfa2",SEPOLIA:"0xaa36a7",LINEA_GOERLI:"0xe704",LINEA_SEPOLIA:"0xe705",LINEA_MAINNET:"0xe708",MOONBEAM:"0x504",MOONBEAM_TESTNET:"0x507",MOONRIVER:"0x505",GNOSIS:"0x64"}}}},{package:"@metamask/preferences-controller",file:"node_modules/@metamask/preferences-controller/dist/constants.cjs"}],[2423,{"./PreferencesController.cjs":2421,"./constants.cjs":2422},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),n.ETHERSCAN_SUPPORTED_CHAIN_IDS=void 0,s(e("./PreferencesController.cjs"),n);var a=e("./constants.cjs");Object.defineProperty(n,"ETHERSCAN_SUPPORTED_CHAIN_IDS",{enumerable:!0,get:function(){return a.ETHERSCAN_SUPPORTED_CHAIN_IDS}})}}},{package:"@metamask/preferences-controller",file:"node_modules/@metamask/preferences-controller/dist/index.cjs"}],[2424,{"../../sdk/index.cjs":2451,"./auth-snap-requests.cjs":2425,"@metamask/base-controller":1476},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u,h,p,m,f,g,b=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},C=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n};Object.defineProperty(n,"__esModule",{value:!0}),n.defaultState=void 0;const y=e("@metamask/base-controller"),w=e("./auth-snap-requests.cjs"),S=e("../../sdk/index.cjs");n.defaultState={isSignedIn:!1};const v={isSignedIn:{persist:!0,anonymous:!0},srpSessionData:{persist:!0,anonymous:!1}};class k extends y.BaseController{constructor({messenger:e,state:t,config:h,metametrics:m}){if(super({messenger:e,metadata:v,name:"AuthenticationController",state:{...n.defaultState,...t}}),r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,{env:S.Env.PRD}),i.set(this,!1),c.set(this,{setupLockedStateSubscriptions:()=>{const{isUnlocked:e}=this.messagingSystem.call("KeyringController:getState");C(this,i,e,"f"),this.messagingSystem.subscribe("KeyringController:unlock",(()=>{C(this,i,!0,"f")})),this.messagingSystem.subscribe("KeyringController:lock",(()=>{C(this,i,!1,"f")}))}}),f.set(this,{}),!m)throw new Error("`metametrics` field is required");C(this,o,{...b(this,o,"f"),...h},"f"),C(this,s,m,"f"),C(this,a,new S.JwtBearerAuth({env:b(this,o,"f").env,platform:m.agent,type:S.AuthType.SRP},{storage:{getLoginResponse:b(this,r,"m",d).bind(this),setLoginResponse:b(this,r,"m",u).bind(this)},signing:{getIdentifier:b(this,r,"m",p).bind(this),signMessage:b(this,r,"m",g).bind(this)},metametrics:b(this,s,"f")}),"f"),b(this,c,"f").setupLockedStateSubscriptions(),b(this,r,"m",l).call(this)}async performSignIn(){b(this,r,"m",h).call(this,"performSignIn");const e=await b(this,r,"m",m).call(this),t=[];for(const[n]of e){const e=await b(this,a,"f").getAccessToken(n);t.push(e)}return t}performSignOut(){this.update((e=>{e.isSignedIn=!1,e.srpSessionData=undefined}))}async getBearerToken(e){return b(this,r,"m",h).call(this,"getBearerToken"),await b(this,a,"f").getAccessToken(e)}async getSessionProfile(e){return b(this,r,"m",h).call(this,"getSessionProfile"),await b(this,a,"f").getUserProfile(e)}async getUserProfileMetaMetrics(){return b(this,r,"m",h).call(this,"getUserProfileMetaMetrics"),await b(this,a,"f").getUserProfileMetaMetrics()}isSignedIn(){return this.state.isSignedIn}}s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,c=new WeakMap,f=new WeakMap,r=new WeakSet,l=function(){this.messagingSystem.registerActionHandler("AuthenticationController:getBearerToken",this.getBearerToken.bind(this)),this.messagingSystem.registerActionHandler("AuthenticationController:getSessionProfile",this.getSessionProfile.bind(this)),this.messagingSystem.registerActionHandler("AuthenticationController:isSignedIn",this.isSignedIn.bind(this)),this.messagingSystem.registerActionHandler("AuthenticationController:performSignIn",this.performSignIn.bind(this)),this.messagingSystem.registerActionHandler("AuthenticationController:performSignOut",this.performSignOut.bind(this)),this.messagingSystem.registerActionHandler("AuthenticationController:getUserProfileMetaMetrics",this.getUserProfileMetaMetrics.bind(this))},d=async function(e){if(e)return this.state.srpSessionData?.[e]?this.state.srpSessionData[e]:null;const t=Object.values(this.state.srpSessionData||{})?.[0];return t||null},u=async function(e,t){const n=await b(this,s,"f").getMetaMetricsId();this.update((r=>{t&&(r.isSignedIn=!0,r.srpSessionData||(r.srpSessionData={}),r.srpSessionData[t]={...e,profile:{...e.profile,metaMetricsId:n}})}))},h=function(e){if(!b(this,i,"f"))throw new Error(`${e} - unable to proceed, wallet is locked`)},p=async function(e){b(this,r,"m",h).call(this,"#snapGetPublicKey");return await this.messagingSystem.call("SnapController:handleRequest",(0,w.createSnapPublicKeyRequest)(e))},m=async function(){b(this,r,"m",h).call(this,"#snapGetAllPublicKeys");return await this.messagingSystem.call("SnapController:handleRequest",(0,w.createSnapAllPublicKeysRequest)())},g=async function(e,t){if((0,S.assertMessageStartsWithMetamask)(e),b(this,f,"f")[e])return b(this,f,"f")[e];b(this,r,"m",h).call(this,"#snapSignMessage");const n=await this.messagingSystem.call("SnapController:handleRequest",(0,w.createSnapSignMessageRequest)(e,t));return b(this,f,"f")[e]=n,n},n.default=k}}},{package:"@metamask/profile-sync-controller",file:"node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/AuthenticationController.cjs"}],[2426,{"./AuthenticationController.cjs":2424,"./mocks/index.cjs":2427},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Mocks=n.Controller=void 0;const c=i(e("./AuthenticationController.cjs"));n.Controller=c.default;const l=c.default;n.default=l,a(e("./AuthenticationController.cjs"),n),n.Mocks=o(e("./mocks/index.cjs"))}}},{package:"@metamask/profile-sync-controller",file:"node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/index.cjs"}],[2427,{"./mockResponses.cjs":2428},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){r===undefined&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){r===undefined&&(r=n),e[r]=t[n]}),s=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(n,"__esModule",{value:!0}),s(e("./mockResponses.cjs"),n)}}},{package:"@metamask/profile-sync-controller",file:"node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/mocks/index.cjs"}],[2428,{"../../../sdk/mocks/auth.cjs":2452},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getMockAuthAccessTokenResponse=n.MOCK_OATH_TOKEN_RESPONSE=n.getMockAuthLoginResponse=n.MOCK_LOGIN_RESPONSE=n.getMockAuthNonceResponse=n.MOCK_JWT=n.MOCK_NONCE=n.MOCK_NONCE_RESPONSE=void 0;const r=e("../../../sdk/mocks/auth.cjs");n.MOCK_NONCE_RESPONSE=r.MOCK_NONCE_RESPONSE,n.MOCK_NONCE=n.MOCK_NONCE_RESPONSE.nonce,n.MOCK_JWT=r.MOCK_JWT;n.getMockAuthNonceResponse=()=>({url:r.MOCK_NONCE_URL,requestMethod:"GET",response:(e,t,r)=>{const s=t?.split("?identifier=")[1],a=r?.(s??"");return{...n.MOCK_NONCE_RESPONSE,nonce:a??n.MOCK_NONCE_RESPONSE.nonce,identifier:n.MOCK_NONCE_RESPONSE.identifier}}}),n.MOCK_LOGIN_RESPONSE=r.MOCK_SRP_LOGIN_RESPONSE;n.getMockAuthLoginResponse=()=>({url:r.MOCK_SRP_LOGIN_URL,requestMethod:"POST",response:e=>{const t=e?.raw_message.split(":"),r=t?.[t.length-2];return{...n.MOCK_LOGIN_RESPONSE,token:r??n.MOCK_LOGIN_RESPONSE.token,profile:{...n.MOCK_LOGIN_RESPONSE.profile,profile_id:r??n.MOCK_LOGIN_RESPONSE.profile.profile_id,identifier_id:r??n.MOCK_LOGIN_RESPONSE.profile.identifier_id}}}}),n.MOCK_OATH_TOKEN_RESPONSE=r.MOCK_OIDC_TOKEN_RESPONSE;n.getMockAuthAccessTokenResponse=()=>({url:r.MOCK_OIDC_TOKEN_URL,requestMethod:"POST",response:e=>{const t=new URLSearchParams(e).get("assertion");return{...n.MOCK_OATH_TOKEN_RESPONSE,access_token:t??n.MOCK_OATH_TOKEN_RESPONSE.access_token}}})}}},{package:"@metamask/profile-sync-controller",file:"node_modules/@metamask/profile-sync-controller/dist/controllers/authentication/mocks/mockResponses.cjs"}],[243,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/transaction-controller"),s=e("lodash");n.default={version:17,migrate(e){const t=(0,s.cloneDeep)(e);t.meta.version=17;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>(!e.status===r.TransactionStatus.failed||e.retryCount>0&&e.retryCount<2&&(e.status=r.TransactionStatus.submitted,delete e.err),e)))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #17${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/017.js"}],[244,{"fast-json-patch":4489,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,s=(r=e("fast-json-patch"))&&r.__esModule?r:{default:r},a=e("lodash");n.default={version:18,migrate(e){const t=(0,a.cloneDeep)(e);t.meta.version=18;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>{if(!e.history||0===e.history.length){const t=function(e){const t={...e};return delete t.history,(0,a.cloneDeep)(t)}(e);return e.history=[t],e}const t=(n=e.history,n.map(((e,t)=>0===t?e:function(e,t,n){const r=s.default.compare(e,t);return r[0]&&(n&&(r[0].note=n),r[0].timestamp=Date.now()),r}(n[t-1],e)))).filter((e=>!Array.isArray(e)||e.length>0));var n;return e.history=t,e}))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #18${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/018.js"}],[245,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/transaction-controller"),s=e("lodash");n.default={version:19,migrate(e){const t=(0,s.cloneDeep)(e);t.meta.version=19;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map(((e,t,n)=>{if(e.status!==r.TransactionStatus.submitted)return e;const s=function(e){const t=e.map((e=>{const{nonce:t}=e.txParams;return parseInt(t||"0x0",16)}));return Math.max.apply(null,t)}(n.filter((e=>e.status===r.TransactionStatus.confirmed)).filter((t=>t.txParams.from===e.txParams.from)).filter((t=>t.metamaskNetworkId.from===e.metamaskNetworkId.from))),a=function(e,t){const n=e.map((e=>{const{nonce:t}=e.txParams;return parseInt(t,16)}));let r=t;for(;n.includes(r);)r+=1;return r}(n.filter((e=>e.status===r.TransactionStatus.submitted)).filter((t=>t.txParams.from===e.txParams.from)).filter((t=>t.metamaskNetworkId.from===e.metamaskNetworkId.from)),s),o=Math.max(a,s);return parseInt(e.txParams.nonce,16)>o+1&&(e.status=r.TransactionStatus.failed,e.err={message:"nonce too high",note:"migration 019 custom error"}),e}))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #19${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/019.js"}],[2452,{"../../shared/env.cjs":2462,"../authentication-jwt-bearer/services.cjs":2447},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.MOCK_USER_PROFILE_METAMETRICS_RESPONSE=n.MOCK_OIDC_TOKEN_RESPONSE=n.MOCK_SRP_LOGIN_RESPONSE=n.MOCK_SIWE_LOGIN_RESPONSE=n.MOCK_NONCE_RESPONSE=n.MOCK_ACCESS_JWT=n.MOCK_JWT=n.MOCK_PROFILE_METAMETRICS_URL=n.MOCK_PAIR_IDENTIFIERS_URL=n.MOCK_SIWE_LOGIN_URL=n.MOCK_OIDC_TOKEN_URL=n.MOCK_SRP_LOGIN_URL=n.MOCK_NONCE_URL=void 0;const r=e("../../shared/env.cjs"),s=e("../authentication-jwt-bearer/services.cjs");n.MOCK_NONCE_URL=(0,s.NONCE_URL)(r.Env.PRD),n.MOCK_SRP_LOGIN_URL=(0,s.SRP_LOGIN_URL)(r.Env.PRD),n.MOCK_OIDC_TOKEN_URL=(0,s.OIDC_TOKEN_URL)(r.Env.PRD),n.MOCK_SIWE_LOGIN_URL=(0,s.SIWE_LOGIN_URL)(r.Env.PRD),n.MOCK_PAIR_IDENTIFIERS_URL=(0,s.PAIR_IDENTIFIERS)(r.Env.PRD),n.MOCK_PROFILE_METAMETRICS_URL=(0,s.PROFILE_METAMETRICS_URL)(r.Env.PRD),n.MOCK_JWT="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImIwNzE2N2U2LWJjNWUtNDgyZC1hNjRhLWU1MjQ0MjY2MGU3NyJ9.eyJzdWIiOiI1MzE0ODc5YWM2NDU1OGI3OTQ5ZmI4NWIzMjg2ZjZjNjUwODAzYmFiMTY0Y2QyOWNmMmM3YzdmMjMzMWMwZTRlIiwiaWF0IjoxNzA2MTEzMDYyLCJleHAiOjE3NjkxODUwNjMsImlzcyI6ImF1dGgubWV0YW1hc2suaW8iLCJhdWQiOiJwb3J0Zm9saW8ubWV0YW1hc2suaW8ifQ.E5UL6oABNweS8t5a6IBTqTf7NLOJbrhJSmEcsr7kwLp4bGvcENJzACwnsHDkA6PlzfDV09ZhAGU_F3hlS0j-erbY0k0AFR-GAtyS7E9N02D8RgUDz5oDR65CKmzM8JilgFA8UvruJ6OJGogroaOSOqzRES_s8MjHpP47RJ9lXrUesajsbOudXbuksXWg5QmWip6LLvjwr8UUzcJzNQilyIhiEpo4WdzWM4R3VtTwr4rHnWEvtYnYCov1jmI2w3YQ48y0M-3Y9IOO0ov_vlITRrOnR7Y7fRUGLUFmU5msD8mNWRywjQFLHfJJ1yNP5aJ8TkuCK3sC6kcUH335IVvukQ",n.MOCK_ACCESS_JWT="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",n.MOCK_NONCE_RESPONSE={nonce:"xGMm9SoihEKeAEfV",identifier:"0xd8641601Cb79a94FD872fE42d5b4a067A44a7e88",expires_in:300},n.MOCK_SIWE_LOGIN_RESPONSE={token:n.MOCK_JWT,expires_in:3600,profile:{profile_id:"fa2bbf82-bd9a-4e6b-aabc-9ca0d0319b6e",metametrics_id:"de742679-4960-4977-a415-4718b5f8e86c",identifier_id:"ec9a4e9906836497efad2fd4d4290b34d2c6a2c0d93eb174aa3cd88a133adbaf",identifier_type:"SIWE",encrypted_storage_key:"2c6a2c0d93eb174aa3cd88a133adbaf"}},n.MOCK_SRP_LOGIN_RESPONSE={token:n.MOCK_JWT,expires_in:3600,profile:{profile_id:"f88227bd-b615-41a3-b0be-467dd781a4ad",metametrics_id:"561ec651-a844-4b36-a451-04d6eac35740",identifier_id:"da9a9fc7b09edde9cc23cec9b7e11a71fb0ab4d2ddd8af8af905306f3e1456fb",identifier_type:"SRP",encrypted_storage_key:"d2ddd8af8af905306f3e1456fb"}},n.MOCK_OIDC_TOKEN_RESPONSE={access_token:n.MOCK_ACCESS_JWT,expires_in:3600},n.MOCK_USER_PROFILE_METAMETRICS_RESPONSE={profile_id:"f88227bd-b615-41a3-b0be-467dd781a4ad",created_at:"2025-10-01T12:00:00Z",lineage:[{metametrics_id:"561ec651-a844-4b36-a451-04d6eac35740",agent:r.Platform.MOBILE,created_at:"2025-10-01T12:00:00Z",updated_at:"2025-10-01T12:00:00Z",counter:1},{metametrics_id:"de742679-4960-4977-a415-4718b5f8e86c",agent:r.Platform.EXTENSION,created_at:"2025-10-01T12:00:00Z",updated_at:"2025-10-01T12:00:00Z",counter:2}]}}}},{package:"@metamask/profile-sync-controller",file:"node_modules/@metamask/profile-sync-controller/dist/sdk/mocks/auth.cjs"}],[246,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:20,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=20;try{const e=function(e){const t=e;"metamask"in t&&!("firstTimeInfo"in t.metamask)&&(t.metamask.firstTimeInfo={version:"3.12.0",date:Date.now()});return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #20${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/020.js"}],[247,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:21,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=21;try{const e=function(e){const t=e;return delete t.BlacklistController,delete t.RecentBlocks,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #21${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/021.js"}],[248,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("@metamask/transaction-controller"),s=e("lodash");n.default={version:22,migrate(e){const t=(0,s.cloneDeep)(e);t.meta.version=22;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>(e.status!==r.TransactionStatus.submitted||e.submittedTime||(e.submittedTime=(new Date).getTime()),e)))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #22${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/022.js"}],[249,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash"),s=e("@metamask/transaction-controller");n.default={version:23,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=23;try{const e=function(e){const t=e,{TransactionController:n}=t;if(n&&n.transactions){const{transactions:e}=t.TransactionController;if(e.length<=40)return t;const n=e.reverse();let r=!0;for(;n.length>40&&r;){const e=n.findIndex((e=>e.status===s.TransactionStatus.failed||e.status===s.TransactionStatus.rejected||e.status===s.TransactionStatus.confirmed||e.status===s.TransactionStatus.dropped));e<0?r=!1:n.splice(e,1)}t.TransactionController.transactions=n.reverse()}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #23${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/023.js"}],[25,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getInstitutionalSnapControllerMessenger=function(e){return e.getRestricted({name:"InstitutionalSnapController",allowedActions:["AccountsController:getAccountByAddress","SnapController:handleRequest","TransactionController:updateCustodialTransaction"],allowedEvents:[]})}}}},{package:"$root$",file:"app/scripts/controller-init/messengers/accounts/institutional-snap-controller-messenger.ts"}],[250,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash"),s=e("@metamask/transaction-controller");n.default={version:24,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=24;const n=function(e){const t=e;if(!t.TransactionController)return t;const{transactions:n}=t.TransactionController;return t.TransactionController.transactions=n.map(((e,t)=>(e.status===s.TransactionStatus.unapproved&&e.txParams&&e.txParams.from&&(e.txParams.from=e.txParams.from.toLowerCase()),e))),t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/024.js"}],[251,{"../lib/util":226,"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash"),s=e("@metamask/transaction-controller"),a=e("../lib/util");n.default={version:25,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=25;const n=function(e){const t=e;if(t.TransactionController&&t.TransactionController.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>(e.status!==s.TransactionStatus.unapproved||(e.txParams=function(e){const t={from:e=>(0,a.addHexPrefix)(e).toLowerCase(),to:()=>(0,a.addHexPrefix)(e.to).toLowerCase(),nonce:e=>(0,a.addHexPrefix)(e),value:e=>(0,a.addHexPrefix)(e),data:e=>(0,a.addHexPrefix)(e),gas:e=>(0,a.addHexPrefix)(e),gasPrice:e=>(0,a.addHexPrefix)(e)},n={};return Object.keys(t).forEach((r=>{e[r]&&(n[r]=t[r](e[r]))})),n}(e.txParams)),e)))}return t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/025.js"}],[2513,{"@metamask/base-controller":1476,"@metamask/rpc-errors":2524,"@metamask/utils":2974},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.RateLimitController=void 0;const r=e("@metamask/base-controller"),s=e("@metamask/rpc-errors"),a=e("@metamask/utils"),o="RateLimitController",i={requests:{persist:!1,anonymous:!1}};class c extends r.BaseController{constructor({rateLimitTimeout:e=5e3,rateLimitCount:t=1,messenger:n,state:r,implementations:s}){const c={requests:(0,a.getKnownPropertyNames)(s).reduce(((e,t)=>({...e,[t]:{}})),{})};super({name:o,metadata:i,messenger:n,state:{...c,...r}}),this.implementations=s,this.rateLimitTimeout=e,this.rateLimitCount=t,this.messagingSystem.registerActionHandler(`${o}:call`,((e,t,...n)=>this.call(e,t,...n)))}async call(e,t,...n){if(this.isRateLimited(t,e))throw s.rpcErrors.limitExceeded({message:`"${t.toString()}" is currently rate-limited. Please try again later.`});this.recordRequest(t,e);const r=this.implementations[t].method;if(!r)throw new Error("Invalid api type");return r(...n)}isRateLimited(e,t){const n=this.implementations[e].rateLimitCount??this.rateLimitCount;return this.state.requests[e][t]>=n}recordRequest(e,t){const n=this.implementations[e].rateLimitTimeout??this.rateLimitTimeout,r=this.state.requests[e][t]??0;this.update((s=>{0===r&&setTimeout((()=>this.resetRequestCount(e,t)),n),Object.assign(s,{requests:{...s.requests,[e]:{[t]:r+1}}})}))}resetRequestCount(e,t){this.update((n=>{Object.assign(n,{requests:{...n.requests,[e]:{[t]:0}}})}))}}n.RateLimitController=c}}},{package:"@metamask/rate-limit-controller",file:"node_modules/@metamask/rate-limit-controller/dist/RateLimitController.cjs"}],[2514,{"./RateLimitController.cjs":2513},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.RateLimitController=void 0;var r=e("./RateLimitController.cjs");Object.defineProperty(n,"RateLimitController",{enumerable:!0,get:function(){return r.RateLimitController}})}}},{package:"@metamask/rate-limit-controller",file:"node_modules/@metamask/rate-limit-controller/dist/index.cjs"}],[2515,{"../constants.cjs":2516,"@metamask/controller-utils":1559},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},l=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.ClientConfigApiService=void 0;const d=e("@metamask/controller-utils"),u=e("../constants.cjs");n.ClientConfigApiService=class{constructor({fetch:e,retries:t=d.DEFAULT_MAX_RETRIES,maximumConsecutiveFailures:n=d.DEFAULT_MAX_CONSECUTIVE_FAILURES,circuitBreakDuration:u=d.DEFAULT_CIRCUIT_BREAK_DURATION,onBreak:h,onDegraded:p,config:m}){r.set(this,void 0),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),c(this,r,e,"f"),c(this,a,m.client,"f"),c(this,o,m.distribution,"f"),c(this,i,m.environment,"f"),c(this,s,(0,d.createServicePolicy)({maxRetries:t,maxConsecutiveFailures:n,circuitBreakDuration:u}),"f"),h&&l(this,s,"f").onBreak(h),p&&l(this,s,"f").onDegraded(p)}onBreak(...e){return l(this,s,"f").onBreak(...e)}onDegraded(...e){return l(this,s,"f").onDegraded(...e)}async fetchRemoteFeatureFlags(){const e=`${u.BASE_URL}/flags?client=${l(this,a,"f")}&distribution=${l(this,o,"f")}&environment=${l(this,i,"f")}`,t=await l(this,s,"f").execute((()=>l(this,r,"f").call(this,e,{cache:"no-cache"})));if(!t.ok)throw new Error("Failed to fetch remote feature flags");const n=await t.json();if(!Array.isArray(n))throw new Error("Feature flags api did not return an array");return{remoteFeatureFlags:this.flattenFeatureFlags(n),cacheTimestamp:Date.now()}}flattenFeatureFlags(e){return e.reduce(((e,t)=>({...e,...t})),{})}},r=new WeakMap,s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/client-config-api-service/client-config-api-service.cjs"}],[2516,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.BASE_URL=void 0,n.BASE_URL="https://client-config.api.cx.metamask.io/v1"}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/constants.cjs"}],[2517,{"./client-config-api-service/client-config-api-service.cjs":2515,"./remote-feature-flag-controller-types.cjs":2518,"./remote-feature-flag-controller.cjs":2519,"./utils/user-segmentation-utils.cjs":2520},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.generateDeterministicRandomNumber=n.ClientConfigApiService=n.EnvironmentType=n.DistributionType=n.ClientType=n.RemoteFeatureFlagController=void 0;var r=e("./remote-feature-flag-controller.cjs");Object.defineProperty(n,"RemoteFeatureFlagController",{enumerable:!0,get:function(){return r.RemoteFeatureFlagController}});var s=e("./remote-feature-flag-controller-types.cjs");Object.defineProperty(n,"ClientType",{enumerable:!0,get:function(){return s.ClientType}}),Object.defineProperty(n,"DistributionType",{enumerable:!0,get:function(){return s.DistributionType}}),Object.defineProperty(n,"EnvironmentType",{enumerable:!0,get:function(){return s.EnvironmentType}});var a=e("./client-config-api-service/client-config-api-service.cjs");Object.defineProperty(n,"ClientConfigApiService",{enumerable:!0,get:function(){return a.ClientConfigApiService}});var o=e("./utils/user-segmentation-utils.cjs");Object.defineProperty(n,"generateDeterministicRandomNumber",{enumerable:!0,get:function(){return o.generateDeterministicRandomNumber}})}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/index.cjs"}],[2518,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a;Object.defineProperty(n,"__esModule",{value:!0}),n.EnvironmentType=n.DistributionType=n.ClientType=void 0,function(e){e.Extension="extension",e.Mobile="mobile"}(r||(n.ClientType=r={})),function(e){e.Main="main",e.Flask="flask",e.Beta="beta"}(s||(n.DistributionType=s={})),function(e){e.Production="prod",e.ReleaseCandidate="rc",e.Development="dev"}(a||(n.EnvironmentType=a={}))}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/remote-feature-flag-controller-types.cjs"}],[2519,{"./utils/user-segmentation-utils.cjs":2520,"@metamask/base-controller":1476},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u,h=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},p=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.RemoteFeatureFlagController=n.getDefaultRemoteFeatureFlagControllerState=n.DEFAULT_CACHE_DURATION=n.controllerName=void 0;const m=e("@metamask/base-controller"),f=e("./utils/user-segmentation-utils.cjs");n.controllerName="RemoteFeatureFlagController",n.DEFAULT_CACHE_DURATION=864e5;const g={remoteFeatureFlags:{persist:!0,anonymous:!0},cacheTimestamp:{persist:!0,anonymous:!0}};function b(){return{remoteFeatureFlags:{},cacheTimestamp:0}}n.getDefaultRemoteFeatureFlagControllerState=b;class C extends m.BaseController{constructor({messenger:e,state:t,clientConfigApiService:l,fetchInterval:d=n.DEFAULT_CACHE_DURATION,disabled:u=!1,getMetaMetricsId:p}){super({name:n.controllerName,metadata:g,messenger:e,state:{remoteFeatureFlags:{},cacheTimestamp:0,...t}}),r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),c.set(this,void 0),h(this,s,d,"f"),h(this,a,u,"f"),h(this,o,l,"f"),h(this,c,p,"f")}async updateRemoteFeatureFlags(){if(p(this,a,"f")||!p(this,r,"m",l).call(this))return;let e;if(p(this,i,"f"))await p(this,i,"f");else{try{h(this,i,p(this,o,"f").fetchRemoteFeatureFlags(),"f"),e=await p(this,i,"f")}finally{h(this,i,undefined,"f")}await p(this,r,"m",d).call(this,e.remoteFeatureFlags)}}enable(){h(this,a,!1,"f")}disable(){h(this,a,!0,"f")}}n.RemoteFeatureFlagController=C,s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,c=new WeakMap,r=new WeakSet,l=function(){return Date.now()-this.state.cacheTimestamp>p(this,s,"f")},d=async function(e){const t=await p(this,r,"m",u).call(this,e);this.update((()=>({remoteFeatureFlags:t,cacheTimestamp:Date.now()})))},u=async function(e){const t={},n=p(this,c,"f").call(this),r=(0,f.generateDeterministicRandomNumber)(n);for(const[n,s]of Object.entries(e)){let e=s;if(Array.isArray(s)&&r){const t=s.find((e=>!!(0,f.isFeatureFlagWithScopeValue)(e)&&r<=e.scope.value));t&&(e={name:t.name,value:t.value})}t[n]=e}return t}}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/remote-feature-flag-controller.cjs"}],[252,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:26,migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=26;try{const e=t.data;t.data=function(e){if(!e.KeyringController||!e.PreferencesController)return e;if(!e.KeyringController.walletNicknames)return e;return e.PreferencesController.identities=Object.keys(e.KeyringController.walletNicknames).reduce(((t,n)=>(t[n]={name:e.KeyringController.walletNicknames[n],address:n},t)),{}),delete e.KeyringController.walletNicknames,e}(e)}catch(e){return console.warn(`MetaMask Migration #26${e.stack}`),Promise.reject(e)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/026.js"}],[2520,{uuid:5741},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.isFeatureFlagWithScopeValue=n.generateDeterministicRandomNumber=void 0;const r=e("uuid");function s(e){return BigInt(`0x${e.replace(/-/gu,"")}`)}const a=s("00000000-0000-4000-8000-000000000000"),o=s("ffffffff-ffff-4fff-bfff-ffffffffffff")-a;n.generateDeterministicRandomNumber=function(e){if(!e)throw new Error("MetaMetrics ID cannot be empty");let t,n;if((0,r.validate)(e)){if(4!==(0,r.version)(e))throw new Error(`Invalid UUID version. Expected v4, got v${(0,r.version)(e)}`);t=s(e)-a,n=o}else{if(!e.startsWith("0x"))throw new Error("Hex ID must start with 0x prefix");const r=e.slice(2),s=64;if(r.length!==s)throw new Error(`Invalid hex ID length. Expected ${s} characters, got ${r.length}`);if(!/^[0-9a-f]+$/iu.test(r))throw new Error("Hex ID contains invalid characters");t=BigInt(`0x${r}`),n=BigInt(`0x${"f".repeat(r.length)}`)}return Number(t*BigInt(1e6)/n)/1e6};n.isFeatureFlagWithScopeValue=e=>"object"==typeof e&&null!==e&&"scope"in e}}},{package:"@metamask/remote-feature-flag-controller",file:"node_modules/@metamask/remote-feature-flag-controller/dist/utils/user-segmentation-utils.cjs"}],[253,{"@metamask/transaction-controller":2925,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash"),s=e("@metamask/transaction-controller");n.default={version:27,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=27;const n=function(e){const t=e;if(t.TransactionController&&t.TransactionController.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.filter((e=>e.status!==s.TransactionStatus.rejected))}return t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/027.js"}],[254,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:28,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=28;const n=function(e){const t=e;if(t.PreferencesController&&t.PreferencesController.tokens&&t.PreferencesController.identities){const{identities:e,tokens:n}=t.PreferencesController;t.PreferencesController.accountTokens={},Object.keys(e).forEach((e=>{t.PreferencesController.accountTokens[e]={mainnet:n}})),t.PreferencesController.tokens=[]}return t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/028.js"}],[2547,{"@metamask/base-controller":1476,"@metamask/swappable-obj-proxy":2884},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},h=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.SelectedNetworkController=n.SelectedNetworkControllerEventTypes=n.SelectedNetworkControllerActionTypes=n.METAMASK_DOMAIN=n.controllerName=void 0;const p=e("@metamask/base-controller"),m=e("@metamask/swappable-obj-proxy");n.controllerName="SelectedNetworkController";const f={domains:{persist:!0,anonymous:!1}};n.METAMASK_DOMAIN="metamask",n.SelectedNetworkControllerActionTypes={getState:`${n.controllerName}:getState`,getNetworkClientIdForDomain:`${n.controllerName}:getNetworkClientIdForDomain`,setNetworkClientIdForDomain:`${n.controllerName}:setNetworkClientIdForDomain`},n.SelectedNetworkControllerEventTypes={stateChange:`${n.controllerName}:stateChange`};class g extends p.BaseController{constructor({messenger:e,state:t={domains:{}},useRequestQueuePreference:i,onPreferencesStateChange:l,domainProxyMap:p}){super({name:n.controllerName,metadata:f,messenger:e,state:t}),r.add(this),s.set(this,void 0),a.set(this,void 0),u(this,a,i,"f"),u(this,s,p,"f"),h(this,r,"m",o).call(this),this.messagingSystem.call("PermissionController:getSubjectNames").filter((e=>this.state.domains[e]===undefined)).forEach((e=>this.setNetworkClientIdForDomain(e,this.messagingSystem.call("NetworkController:getState").selectedNetworkClientId))),this.messagingSystem.subscribe("PermissionController:stateChange",((e,t)=>{t.forEach((({op:e,path:t})=>{if("subjects"===t[0]&&t[1]!==undefined&&"string"==typeof t[1]){const n=t[1];"add"===e&&this.state.domains[n]===undefined?this.setNetworkClientIdForDomain(n,this.messagingSystem.call("NetworkController:getState").selectedNetworkClientId):"remove"===e&&this.state.domains[n]!==undefined&&h(this,r,"m",c).call(this,n)}}))})),this.messagingSystem.subscribe("NetworkController:stateChange",(({selectedNetworkClientId:e,networkConfigurationsByChainId:t},n)=>{const r=n.find((({op:e,path:t})=>("replace"===e||"remove"===e)&&"networkConfigurationsByChainId"===t[0]));if(r){const n=Object.values(t).reduce(((e,t)=>(t.rpcEndpoints.forEach((({networkClientId:n})=>e[n]=t.chainId)),e)),{});Object.entries(this.state.domains).forEach((([s,a])=>{const o=n[a];if("remove"!==r.op||o){if("replace"===r.op){const e=r.path[1];if(!o||o===e){const n=t[e],{networkClientId:r}=n.rpcEndpoints[n.defaultRpcEndpointIndex];a!==r&&this.setNetworkClientIdForDomain(s,r)}}}else this.setNetworkClientIdForDomain(s,e)}))}})),l((({useRequestQueue:e})=>{h(this,a,"f")!==e&&(e?h(this,r,"m",d).call(this):Object.keys(this.state.domains).forEach((e=>{h(this,r,"m",c).call(this,e)})),u(this,a,e,"f"))}))}setNetworkClientIdForDomain(e,t){if(h(this,a,"f")){if(e===n.METAMASK_DOMAIN)throw new Error(`NetworkClientId for domain "${n.METAMASK_DOMAIN}" cannot be set on the SelectedNetworkController`);if(!h(this,r,"m",l).call(this,e))throw new Error("NetworkClientId for domain cannot be called with a domain that has not yet been granted permissions");h(this,r,"m",i).call(this,e,t)}}getNetworkClientIdForDomain(e){const{selectedNetworkClientId:t}=this.messagingSystem.call("NetworkController:getState");return h(this,a,"f")?this.state.domains[e]??t:t}getProviderAndBlockTracker(e){if(e===n.METAMASK_DOMAIN){const e=this.messagingSystem.call("NetworkController:getSelectedNetworkClient");if(e===undefined)throw new Error("Selected network not initialized");return e}let t=h(this,s,"f").get(e);if(t===undefined){let n;if(h(this,a,"f")&&h(this,r,"m",l).call(this,e)){const t=this.getNetworkClientIdForDomain(e);n=this.messagingSystem.call("NetworkController:getNetworkClientById",t)}else if(n=this.messagingSystem.call("NetworkController:getSelectedNetworkClient"),n===undefined)throw new Error("Selected network not initialized");t={provider:(0,m.createEventEmitterProxy)(n.provider),blockTracker:(0,m.createEventEmitterProxy)(n.blockTracker,{eventFilter:"skipInternal"})},h(this,s,"f").set(e,t)}return t}}n.SelectedNetworkController=g,s=new WeakMap,a=new WeakMap,r=new WeakSet,o=function(){this.messagingSystem.registerActionHandler(n.SelectedNetworkControllerActionTypes.getNetworkClientIdForDomain,this.getNetworkClientIdForDomain.bind(this)),this.messagingSystem.registerActionHandler(n.SelectedNetworkControllerActionTypes.setNetworkClientIdForDomain,this.setNetworkClientIdForDomain.bind(this))},i=function(e,t){const n=this.messagingSystem.call("NetworkController:getNetworkClientById",t);this.update((n=>{n.domains[e]=t}));const r=this.getProviderAndBlockTracker(e);r.provider.setTarget(n.provider),r.blockTracker.setTarget(n.blockTracker)},c=function(e){const t=this.messagingSystem.call("NetworkController:getSelectedNetworkClient"),n=h(this,s,"f").get(e);n&&t?(n.provider.setTarget(t.provider),n.blockTracker.setTarget(t.blockTracker)):n&&h(this,s,"f").delete(e),this.update((t=>{delete t.domains[e]}))},l=function(e){return this.messagingSystem.call("PermissionController:hasPermissions",e)},d=function(){h(this,s,"f").forEach(((e,t)=>{const{selectedNetworkClientId:n}=this.messagingSystem.call("NetworkController:getState");h(this,r,"m",l).call(this,t)&&h(this,r,"m",i).call(this,t,n)}))}}}},{package:"@metamask/selected-network-controller",file:"node_modules/@metamask/selected-network-controller/dist/SelectedNetworkController.cjs"}],[2548,{"./SelectedNetworkController.cjs":2547},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createSelectedNetworkMiddleware=void 0;const r=e("./SelectedNetworkController.cjs");n.createSelectedNetworkMiddleware=e=>(t,n,s)=>{if(!t.origin)throw new Error("Request object is lacking an 'origin'");var a;return t.networkClientId=(a=t.origin,e.call(r.SelectedNetworkControllerActionTypes.getNetworkClientIdForDomain,a)),s()}}}},{package:"@metamask/selected-network-controller",file:"node_modules/@metamask/selected-network-controller/dist/SelectedNetworkMiddleware.cjs"}],[2549,{"./SelectedNetworkController.cjs":2547,"./SelectedNetworkMiddleware.cjs":2548},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.createSelectedNetworkMiddleware=n.METAMASK_DOMAIN=n.SelectedNetworkController=n.SelectedNetworkControllerEventTypes=n.SelectedNetworkControllerActionTypes=void 0;var r=e("./SelectedNetworkController.cjs");Object.defineProperty(n,"SelectedNetworkControllerActionTypes",{enumerable:!0,get:function(){return r.SelectedNetworkControllerActionTypes}}),Object.defineProperty(n,"SelectedNetworkControllerEventTypes",{enumerable:!0,get:function(){return r.SelectedNetworkControllerEventTypes}}),Object.defineProperty(n,"SelectedNetworkController",{enumerable:!0,get:function(){return r.SelectedNetworkController}}),Object.defineProperty(n,"METAMASK_DOMAIN",{enumerable:!0,get:function(){return r.METAMASK_DOMAIN}});var s=e("./SelectedNetworkMiddleware.cjs");Object.defineProperty(n,"createSelectedNetworkMiddleware",{enumerable:!0,get:function(){return s.createSelectedNetworkMiddleware}})}}},{package:"@metamask/selected-network-controller",file:"node_modules/@metamask/selected-network-controller/dist/index.cjs"}],[255,{"./fail-tx":428,"@metamask/transaction-controller":2925},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r,s=e("@metamask/transaction-controller"),a=(r=e("./fail-tx"))&&r.__esModule?r:{default:r};n.default={version:29,migrate:(0,a.default)(29,"Stuck in approved state for too long.",(e=>{const t=e.status===s.TransactionStatus.approved,n=e.submittedTime,r=Date.now();return t&&r-n>432e5}))}}}},{package:"$root$",file:"app/scripts/migrations/029.js"}],[256,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:30,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=30;const n=function(e){const t=e;if(e.PreferencesController){const{frequentRpcListDetail:e}=t.PreferencesController;e&&(e.forEach(((t,n)=>{Boolean(t.chainId)&&Number.isNaN(parseInt(t.chainId))&&delete e[n].chainId})),t.PreferencesController.frequentRpcListDetail=e)}e.NetworkController&&(t.NetworkController.network&&Number.isNaN(parseInt(t.NetworkController.network))&&delete t.NetworkController.network,t.NetworkController.provider&&t.NetworkController.provider.chainId&&Number.isNaN(parseInt(t.NetworkController.provider.chainId))&&delete t.NetworkController.provider.chainId);return t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/030.js"}],[257,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:31,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=31;const n=function(e){const{KeyringController:t,PreferencesController:n}=e;if(t&&n){const{vault:e}=t;n.completedOnboarding=Boolean(e)}return e}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/031.js"}],[258,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:32,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=32;const n=t.data;return t.data=function(e){const{PreferencesController:t}=e;if(t){const{betaUI:e}=t.featureFlags||{};t.completedUiMigration=e}return e}(n),t}}}}},{package:"$root$",file:"app/scripts/migrations/032.js"}],[259,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:33,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=33;const n=function(e){const t=e;e.NoticeController&&delete t.NoticeController;return t}(t.data);return t.data=n,t}}}}},{package:"$root$",file:"app/scripts/migrations/033.js"}],[26,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.getAssetsContractControllerMessenger=function(e){return e.getRestricted({name:"AssetsContractController",allowedActions:["NetworkController:getNetworkClientById","NetworkController:getNetworkConfigurationByNetworkClientId","NetworkController:getSelectedNetworkClient","NetworkController:getState"],allowedEvents:["PreferencesController:stateChange","NetworkController:networkDidChange"]})}}}},{package:"$root$",file:"app/scripts/controller-init/messengers/assets/assets-contract-controller-messenger.ts"}],[260,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:34,async migrate(e){const t=(0,r.cloneDeep)(e);t.meta.version=34;const n=t.data;return t.data=function(e){const{PreferencesController:t}=e;if(t){const e=t.featureFlags||{};e.privacyMode||void 0!==t.migratedPrivacyMode||(t.migratedPrivacyMode=!0,e.privacyMode=!0)}return e}(n),t}}}}},{package:"$root$",file:"app/scripts/migrations/034.js"}],[2600,{"./constants":2601,"./types":2603,"./utils":2604,"@ethersproject/bytes":574,"@metamask/controller-utils":1559,"@metamask/eth-query":1775,"@metamask/polling-controller":2608,"@metamask/transaction-controller":2925,"bignumber.js":2613,"lodash/cloneDeep":4888},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u,h,p,m,f,g,b,C,y,w,S,v,k,T,P,E,M,A,I,N=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},_=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},O=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.getDefaultSmartTransactionsControllerState=n.DEFAULT_INTERVAL=void 0;const R=e("@ethersproject/bytes"),x=e("@metamask/controller-utils"),j=O(e("@metamask/eth-query")),B=e("@metamask/polling-controller"),F=e("@metamask/transaction-controller"),$=e("bignumber.js"),D=O(e("lodash/cloneDeep")),L=e("./constants"),U=e("./types"),K=e("./utils");n.DEFAULT_INTERVAL=5e3;const H="`ethQuery` is not defined on SmartTransactionsController",q="SmartTransactionsController",V={smartTransactionsState:{persist:!0,anonymous:!0}};function G(){return{smartTransactionsState:{smartTransactions:{},userOptIn:null,userOptInV2:null,fees:{approvalTxFees:null,tradeTxFees:null},liveness:!0,livenessByChainId:{[x.ChainId.mainnet]:!0,[x.ChainId.sepolia]:!0},feesByChainId:{[x.ChainId.mainnet]:{approvalTxFees:null,tradeTxFees:null},[x.ChainId.sepolia]:{approvalTxFees:null,tradeTxFees:null}}}}}n.getDefaultSmartTransactionsControllerState=G;class W extends((0,B.StaticIntervalPollingController)()){constructor({interval:e=n.DEFAULT_INTERVAL,clientId:t,chainId:b=x.ChainId.mainnet,supportedChainIds:C=[x.ChainId.mainnet,x.ChainId.sepolia],getNonceLock:y,confirmExternalTransaction:w,trackMetaMetricsEvent:S,state:v={},messenger:k,getTransactions:T,getMetaMetricsProps:P,getFeatureFlags:E,updateTransaction:M,trace:A}){super({name:q,metadata:V,messenger:k,state:Object.assign(Object.assign({},G()),v)}),r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),c.set(this,void 0),l.set(this,void 0),d.set(this,void 0),u.set(this,void 0),h.set(this,void 0),p.set(this,void 0),m.set(this,void 0),f.set(this,void 0),g.set(this,void 0),N(this,s,e,"f"),N(this,a,t,"f"),N(this,o,b,"f"),N(this,i,C,"f"),this.setIntervalLength(e),N(this,c,y,"f"),N(this,l,undefined,"f"),N(this,d,w,"f"),N(this,u,T,"f"),N(this,h,S,"f"),N(this,p,P,"f"),N(this,m,E,"f"),N(this,f,M,"f"),N(this,g,null!=A?A:(e,t)=>null==t?void 0:t(),"f"),this.initializeSmartTransactionsForChainId(),this.messagingSystem.subscribe("NetworkController:stateChange",(({selectedNetworkClientId:e})=>{const{configuration:{chainId:t},provider:n}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);N(this,o,t,"f"),N(this,l,new j.default(n),"f"),this.initializeSmartTransactionsForChainId(),this.checkPoll(this.state)})),this.messagingSystem.subscribe(`${q}:stateChange`,(e=>this.checkPoll(e)))}async _executePoll({chainIds:e}){const t=(null!=e?e:[]).filter((e=>_(this,i,"f").includes(e)));return 0===t.length?Promise.resolve():this.updateSmartTransactions({chainIds:t})}checkPoll({smartTransactionsState:{smartTransactions:e}}){const t=Object.values(e).flat(),n=null==t?void 0:t.filter(K.isSmartTransactionPending);!this.timeoutHandle&&(null==n?void 0:n.length)>0?this.poll():this.timeoutHandle&&0===(null==n?void 0:n.length)&&this.stop()}initializeSmartTransactionsForChainId(){_(this,i,"f").includes(_(this,o,"f"))&&this.update((e=>{var t;e.smartTransactionsState.smartTransactions[_(this,o,"f")]=null!==(t=e.smartTransactionsState.smartTransactions[_(this,o,"f")])&&void 0!==t?t:[]}))}async poll(e){e&&N(this,s,e,"f"),this.timeoutHandle&&clearInterval(this.timeoutHandle),_(this,i,"f").includes(_(this,o,"f"))&&(this.timeoutHandle=setInterval((()=>{(0,x.safelyExecute)((async()=>this.updateSmartTransactions()))}),_(this,s,"f")),await(0,x.safelyExecute)((async()=>this.updateSmartTransactions())))}async stop(){this.timeoutHandle&&clearInterval(this.timeoutHandle),this.timeoutHandle=undefined}setOptInState(e){this.update((t=>{t.smartTransactionsState.userOptInV2=e}))}trackStxStatusChange(e,t){let n=(0,D.default)(e);n=Object.assign(Object.assign({},(0,D.default)(t)),n),n.status!==(null==t?void 0:t.status)&&_(this,h,"f").call(this,{event:L.MetaMetricsEventName.StxStatusUpdated,category:L.MetaMetricsEventCategory.Transactions,properties:(0,K.getSmartTransactionMetricsProperties)(n),sensitiveProperties:(0,K.getSmartTransactionMetricsSensitiveProperties)(n)})}isNewSmartTransaction(e,t){const{smartTransactionsState:{smartTransactions:n}}=this.state,r=n[null!=t?t:_(this,o,"f")],s=null==r?void 0:r.findIndex((t=>t.uuid===e));return-1===s||s===undefined}updateSmartTransaction(e,{networkClientId:t}={}){let n=_(this,l,"f"),s=_(this,o,"f");if(t){const{configuration:e,provider:r}=this.messagingSystem.call("NetworkController:getNetworkClientById",t);s=e.chainId,n=new j.default(r)}_(this,r,"m",w).call(this,e,{chainId:s,ethQuery:n})}async updateSmartTransactions({chainIds:e}={chainIds:_(this,r,"m",P).call(this)}){const{smartTransactionsState:{smartTransactions:t}}=this.state;for(const[n,s]of Object.entries(t)){if(e&&!e.includes(n))continue;const t=s.filter(K.isSmartTransactionPending).map((e=>{const t=_(this,r,"m",E).call(this,{chainId:n});return{uuid:e.uuid,networkClientId:t,chainId:e.chainId}}));t.length>0&&await this.fetchSmartTransactionsStatus(t)}}async fetchSmartTransactionsStatus(e){const{chainId:t}=e[0],n=e.map((e=>e.uuid)),s=new URLSearchParams({uuids:n.join(",")}),a=_(this,r,"m",M).call(this,{networkClientId:e[0].networkClientId}),o=`${(0,K.getAPIRequestURL)(U.APIType.BATCH_STATUS,t)}?${s.toString()}`,i=await _(this,r,"m",b).call(this,o);for(const[n,s]of Object.entries(i)){const o=e.find((e=>e.uuid===n));if(!o){console.error(`No matching transaction found for uuid: ${n}`);continue}const i={statusMetadata:s,status:(0,K.calculateStatus)(s),cancellable:(0,K.isSmartTransactionCancellable)(s),uuid:n,networkClientId:o.networkClientId};await _(this,r,"m",w).call(this,i,{chainId:t,ethQuery:a})}return i}clearFees(){const e={approvalTxFees:null,tradeTxFees:null};return this.update((t=>{t.smartTransactionsState.fees=e})),e}async getFees(e,t,{networkClientId:n}={}){const s=null!=n?n:this.messagingSystem.call("NetworkController:getState").selectedNetworkClientId,a=_(this,r,"m",T).call(this,{networkClientId:s}),i=[];let c;if(t){const n=await _(this,r,"m",k).call(this,t,s);i.push(n),c=Object.assign(Object.assign({},e),{nonce:(0,K.incrementNonceInHex)(n.nonce)})}else c=e.nonce?e:await _(this,r,"m",k).call(this,e,s);i.push(c);const l=await _(this,g,"f").call(this,{name:L.SmartTransactionsTraceName.GetFees},(async()=>await _(this,r,"m",b).call(this,(0,K.getAPIRequestURL)(U.APIType.GET_FEES,a),{method:"POST",body:JSON.stringify({txs:i})})));let d,u;return t?(d=null==l?void 0:l.txs[0],u=null==l?void 0:l.txs[1]):(d=null,u=null==l?void 0:l.txs[0]),this.update((e=>{a===_(this,o,"f")&&(e.smartTransactionsState.fees={approvalTxFees:d,tradeTxFees:u}),e.smartTransactionsState.feesByChainId[a]={approvalTxFees:d,tradeTxFees:u}})),{approvalTxFees:d,tradeTxFees:u}}async submitSignedTransactions({transactionMeta:e,txParams:t,signedTransactions:n,signedCanceledTransactions:s=[],networkClientId:a}){var o,i;const l=null!=a?a:this.messagingSystem.call("NetworkController:getState").selectedNetworkClientId,d=_(this,r,"m",T).call(this,{networkClientId:l}),u=_(this,r,"m",M).call(this,{networkClientId:l}),h=await _(this,g,"f").call(this,{name:L.SmartTransactionsTraceName.SubmitTransactions},(async()=>await _(this,r,"m",b).call(this,(0,K.getAPIRequestURL)(U.APIType.SUBMIT_TRANSACTIONS,d),{method:"POST",body:JSON.stringify({rawTxs:n,rawCancelTxs:s})}))),p=Date.now();let m;try{if(null==t?void 0:t.from){const e=await(0,x.query)(u,"getBalance",[t.from]);m=new $.BigNumber(e).toString(16)}}catch(e){console.error("ethQuery.getBalance error:",e)}let f,C,y={};if(t&&!t.nonce)try{C=await _(this,c,"f").call(this,t.from,l),f=(0,R.hexlify)(C.nextNonce),y=C.nonceDetails,null!==(o=t.nonce)&&void 0!==o||(t.nonce=f)}catch(e){throw console.error("Failed to acquire nonce lock:",e),e}const S=n.map((e=>(0,K.getTxHash)(e))),v=Object.assign(Object.assign({},h),{txHash:S[S.length-1],txHashes:S});try{await _(this,r,"m",w).call(this,{chainId:d,nonceDetails:y,preTxBalance:m,status:U.SmartTransactionStatuses.PENDING,time:p,txParams:t,uuid:v.uuid,txHash:v.txHash,cancellable:!0,type:null!==(i=null==e?void 0:e.type)&&void 0!==i?i:"swap",transactionId:null==e?void 0:e.id,networkClientId:l,txHashes:S},{chainId:d,ethQuery:u})}catch(e){throw console.error("Failed to create a smart transaction:",e),e}finally{C&&C.releaseLock()}return v}async cancelSmartTransaction(e,{networkClientId:t}={}){const n=_(this,r,"m",T).call(this,{networkClientId:t});await _(this,g,"f").call(this,{name:L.SmartTransactionsTraceName.CancelTransaction},(async()=>await _(this,r,"m",b).call(this,(0,K.getAPIRequestURL)(U.APIType.CANCEL,n),{method:"POST",body:JSON.stringify({uuid:e})})))}async fetchLiveness({networkClientId:e}={}){const t=_(this,r,"m",T).call(this,{networkClientId:e});let n=!1;try{const e=await _(this,g,"f").call(this,{name:L.SmartTransactionsTraceName.FetchLiveness},(async()=>await _(this,r,"m",b).call(this,(0,K.getAPIRequestURL)(U.APIType.LIVENESS,t))));n=Boolean(e.smartTransactions)}catch(e){console.log('"fetchLiveness" API call failed')}return this.update((e=>{t===_(this,o,"f")&&(e.smartTransactionsState.liveness=n),e.smartTransactionsState.livenessByChainId[t]=n})),n}async setStatusRefreshInterval(e){e!==_(this,s,"f")&&N(this,s,e,"f")}getTransactions({addressFrom:e,status:t}){return _(this,r,"m",A).call(this).filter((n=>{var r;return n.status===t&&(null===(r=n.txParams)||void 0===r?void 0:r.from)===e}))}getSmartTransactionByMinedTxHash(e){if(!e)return undefined;return _(this,r,"m",A).call(this).find((t=>{var n,r;return(null===(r=null===(n=t.statusMetadata)||void 0===n?void 0:n.minedHash)||void 0===r?void 0:r.toLowerCase())===e.toLowerCase()}))}wipeSmartTransactions({address:e,ignoreNetwork:t}){if(!e)return;const n=e.toLowerCase();if(t){const{smartTransactionsState:{smartTransactions:e}}=this.state;Object.keys(e).forEach((e=>{_(this,r,"m",I).call(this,{chainId:e,addressLowerCase:n})}))}else _(this,r,"m",I).call(this,{chainId:_(this,o,"f"),addressLowerCase:n})}}n.default=W,s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,c=new WeakMap,l=new WeakMap,d=new WeakMap,u=new WeakMap,h=new WeakMap,p=new WeakMap,m=new WeakMap,f=new WeakMap,g=new WeakMap,r=new WeakSet,b=async function(e,t){const n=Object.assign(Object.assign({},t),{headers:Object.assign({"Content-Type":"application/json"},_(this,a,"f")&&{"X-Client-Id":_(this,a,"f")})});return(0,K.handleFetch)(e,n)},C=function(e,{chainId:t=_(this,o,"f")}){var n;const{smartTransactionsState:{smartTransactions:r}}=this.state,s=null!==(n=r[t])&&void 0!==n?n:[],a=null==s?void 0:s.findIndex((t=>t.uuid===e.uuid));-1!==a&&(0,x.isSafeDynamicKey)(t)&&this.update((n=>{n.smartTransactionsState.smartTransactions[t][a]=Object.assign(Object.assign({},n.smartTransactionsState.smartTransactions[t][a]),e)}))},y=async function(e){const t=await _(this,p,"f").call(this);e.accountHardwareType=null==t?void 0:t.accountHardwareType,e.accountType=null==t?void 0:t.accountType,e.deviceModel=null==t?void 0:t.deviceModel},w=async function(e,{chainId:t=_(this,o,"f"),ethQuery:n=_(this,l,"f")}){var s;const{smartTransactionsState:{smartTransactions:i}}=this.state,c=null!==(s=i[t])&&void 0!==s?s:[],d=null==c?void 0:c.findIndex((t=>t.uuid===e.uuid)),h=this.isNewSmartTransaction(e.uuid,t);if(n===undefined)throw new Error(H);if(h)try{await _(this,r,"m",y).call(this,e)}catch(e){console.error("Failed to add metrics props to smart transaction:",e)}if(this.trackStxStatusChange(e,h?undefined:c[d]),h){const n=null==c?void 0:c.findIndex((t=>{var n,r,s;return(null===(n=t.txParams)||void 0===n?void 0:n.nonce)===(null===(r=e.txParams)||void 0===r?void 0:r.nonce)&&(null===(s=t.status)||void 0===s?void 0:s.startsWith("cancelled"))})),r=[(0,D.default)(e)],s=Object.assign(Object.assign({},e),{history:r}),a=n>-1?c.slice(0,n).concat(c.slice(n+1)).concat(s):c.concat(s);return void this.update((e=>{e.smartTransactionsState.smartTransactions[t]=a}))}const p=c[d],g=Object.assign(Object.assign({},p),e);this.messagingSystem.publish("SmartTransactionsController:smartTransaction",g),(0,K.shouldMarkRegularTransactionAsFailed)({smartTransaction:g,clientId:_(this,a,"f"),getFeatureFlags:_(this,m,"f")})&&(0,K.markRegularTransactionAsFailed)({smartTransaction:g,getRegularTransactions:_(this,u,"f"),updateTransaction:_(this,f,"f")}),e.status!==U.SmartTransactionStatuses.SUCCESS&&e.status!==U.SmartTransactionStatuses.REVERTED||e.confirmed?_(this,r,"m",C).call(this,e,{chainId:t}):await _(this,r,"m",v).call(this,g,{chainId:t,ethQuery:n})},S=function(e){if(!e)return!0;const t=_(this,u,"f").call(this),n=null==t?void 0:t.find((t=>{var n;return(null===(n=t.hash)||void 0===n?void 0:n.toLowerCase())===e.toLowerCase()}));return!n||![F.TransactionStatus.confirmed,F.TransactionStatus.submitted].includes(n.status)},v=async function(e,{chainId:t=_(this,o,"f"),ethQuery:n=_(this,l,"f")}){var s;if(n===undefined)throw new Error(H);const a=null===(s=e.statusMetadata)||void 0===s?void 0:s.minedHash;try{const s=await(0,x.query)(n,"getTransactionReceipt",[a]),o=await(0,x.query)(n,"getTransactionByHash",[a]),i=null==o?void 0:o.maxFeePerGas,c=null==o?void 0:o.maxPriorityFeePerGas;if(null==s?void 0:s.blockNumber){const o=await(0,x.query)(n,"getBlockByNumber",[null==s?void 0:s.blockNumber,!1]),l=null==o?void 0:o.baseFeePerGas,u=Object.assign(Object.assign({},e.txParams),{maxFeePerGas:i,maxPriorityFeePerGas:c}),p=Object.assign(Object.assign({},e),{id:e.uuid,status:F.TransactionStatus.confirmed,hash:a,txParams:u}),m=(0,K.snapshotFromTxMeta)(p),f=(0,K.replayHistory)(p.history),g=(0,K.generateHistoryEntry)(f,m,"txStateManager: setting status to confirmed"),b=g.length>0?Object.assign(Object.assign({},p),{history:p.history.concat(g)}):p;_(this,r,"m",S).call(this,a)&&_(this,d,"f").call(this,b,s,l),_(this,h,"f").call(this,{event:L.MetaMetricsEventName.StxConfirmed,category:L.MetaMetricsEventCategory.Transactions,properties:(0,K.getSmartTransactionMetricsProperties)(e),sensitiveProperties:(0,K.getSmartTransactionMetricsSensitiveProperties)(e)}),_(this,r,"m",C).call(this,Object.assign(Object.assign({},e),{confirmed:!0}),{chainId:t})}}catch(e){_(this,h,"f").call(this,{event:L.MetaMetricsEventName.StxConfirmationFailed,category:L.MetaMetricsEventCategory.Transactions}),console.error("confirm error",e)}finally{this.messagingSystem.publish("SmartTransactionsController:smartTransactionConfirmationDone",e)}},k=async function(e,t){const n=await _(this,c,"f").call(this,e.from,t),r=n.nextNonce;return n.releaseLock(),Object.assign(Object.assign({},e),{nonce:`0x${r.toString(16)}`})},T=function({networkClientId:e}={}){return e?this.messagingSystem.call("NetworkController:getNetworkClientById",e).configuration.chainId:_(this,o,"f")},P=function(){const{networkConfigurationsByChainId:e}=this.messagingSystem.call("NetworkController:getState");return Object.keys(e).filter((e=>_(this,i,"f").includes(e)))},E=function({chainId:e}){const{networkConfigurationsByChainId:t}=this.messagingSystem.call("NetworkController:getState");return t[e].rpcEndpoints[t[e].defaultRpcEndpointIndex].networkClientId},M=function({networkClientId:e}={}){if(e){const{provider:t}=this.messagingSystem.call("NetworkController:getNetworkClientById",e);return new j.default(t)}if(_(this,l,"f")===undefined)throw new Error(H);return _(this,l,"f")},A=function(){const{smartTransactionsState:{smartTransactions:e}}=this.state,t=Object.values(e).flat();return t&&0!==t.length?t:[]},I=function({chainId:e,addressLowerCase:t}){const{smartTransactionsState:{smartTransactions:n}}=this.state,r=null==n?void 0:n[e];if(!r||0===r.length)return;const s=r.filter((e=>{var n;return(null===(n=e.txParams)||void 0===n?void 0:n.from)!==t}));this.update((t=>{t.smartTransactionsState.smartTransactions[e]=s}))}}}},{package:"@metamask/smart-transactions-controller",file:"node_modules/@metamask/smart-transactions-controller/dist/SmartTransactionsController.js"}],[2601,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.SmartTransactionsTraceName=n.MetaMetricsEventCategory=n.MetaMetricsEventName=n.SENTINEL_API_BASE_URL_MAP=n.API_BASE_URL=void 0,n.API_BASE_URL="https://transaction.api.cx.metamask.io",n.SENTINEL_API_BASE_URL_MAP={1:"https://tx-sentinel-ethereum-mainnet.api.cx.metamask.io",56:"https://tx-sentinel-bsc-mainnet.api.cx.metamask.io",8453:"https://tx-sentinel-base-mainnet.api.cx.metamask.io",42161:"https://tx-sentinel-arbitrum-mainnet.api.cx.metamask.io",11155111:"https://tx-sentinel-ethereum-sepolia.api.cx.metamask.io"},function(e){e.StxStatusUpdated="STX Status Updated",e.StxConfirmed="STX Confirmed",e.StxConfirmationFailed="STX Confirmation Failed",e.ReceiveRequest="Receive Request"}(n.MetaMetricsEventName||(n.MetaMetricsEventName={})),function(e){e.Transactions="Transactions",e.Navigation="Navigation"}(n.MetaMetricsEventCategory||(n.MetaMetricsEventCategory={})),function(e){e.GetFees="Smart Transactions: Get Fees",e.SubmitTransactions="Smart Transactions: Submit Transactions",e.CancelTransaction="Smart Transactions: Cancel Transaction",e.FetchLiveness="Smart Transactions: Fetch Liveness"}(n.SmartTransactionsTraceName||(n.SmartTransactionsTraceName={}))}}},{package:"@metamask/smart-transactions-controller",file:"node_modules/@metamask/smart-transactions-controller/dist/constants.js"}],[2602,{"./SmartTransactionsController":2600},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s=e("./SmartTransactionsController");Object.defineProperty(n,"default",{enumerable:!0,get:function(){return r(s).default}})}}},{package:"@metamask/smart-transactions-controller",file:"node_modules/@metamask/smart-transactions-controller/dist/index.js"}],[2604,{"../package.json":2614,"./constants":2601,"./types":2603,"@ethersproject/bytes":574,"@ethersproject/keccak256":600,"@ethersproject/transactions":650,"@metamask/transaction-controller":2925,"bignumber.js":2613,"fast-json-patch":4489,lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.markRegularTransactionAsFailed=n.shouldMarkRegularTransactionAsFailed=n.getReturnTxHashAsap=n.getSmartTransactionMetricsSensitiveProperties=n.getSmartTransactionMetricsProperties=n.getTxHash=n.incrementNonceInHex=n.isSmartTransactionCancellable=n.handleFetch=n.mapKeysToCamel=n.getStxProcessingTime=n.snapshotFromTxMeta=n.replayHistory=n.generateHistoryEntry=n.calculateStatus=n.getAPIRequestURL=n.isSmartTransactionStatusResolved=n.isSmartTransactionPending=void 0;const s=e("@ethersproject/bytes"),a=e("@ethersproject/keccak256"),o=e("@ethersproject/transactions"),i=e("@metamask/transaction-controller"),c=e("bignumber.js"),l=r(e("fast-json-patch")),d=r(e("lodash")),u=r(e("../package.json")),h=e("./constants"),p=e("./types");n.isSmartTransactionPending=function(e){return e.status===p.SmartTransactionStatuses.PENDING};n.isSmartTransactionStatusResolved=e=>"uuid_not_found"===e,n.getAPIRequestURL=function(e,t){const n=parseInt(t,16);switch(e){case p.APIType.GET_FEES:return`${h.API_BASE_URL}/networks/${n}/getFees`;case p.APIType.ESTIMATE_GAS:return`${h.API_BASE_URL}/networks/${n}/estimateGas`;case p.APIType.SUBMIT_TRANSACTIONS:return`${h.API_BASE_URL}/networks/${n}/submitTransactions?stxControllerVersion=${u.default.version}`;case p.APIType.CANCEL:return`${h.API_BASE_URL}/networks/${n}/cancel`;case p.APIType.BATCH_STATUS:return`${h.API_BASE_URL}/networks/${n}/batchStatus`;case p.APIType.LIVENESS:return`${h.SENTINEL_API_BASE_URL_MAP[n]}/network`;default:throw new Error("Invalid APIType")}};n.calculateStatus=e=>{if((0,n.isSmartTransactionStatusResolved)(e))return p.SmartTransactionStatuses.RESOLVED;const t=[p.SmartTransactionCancellationReason.WOULD_REVERT,p.SmartTransactionCancellationReason.TOO_CHEAP,p.SmartTransactionCancellationReason.DEADLINE_MISSED,p.SmartTransactionCancellationReason.INVALID_NONCE,p.SmartTransactionCancellationReason.USER_CANCELLED];if((null==e?void 0:e.minedTx)===p.SmartTransactionMinedTx.NOT_MINED){if(e.cancellationReason===p.SmartTransactionCancellationReason.NOT_CANCELLED)return p.SmartTransactionStatuses.PENDING;const n=t.findIndex((t=>t===e.cancellationReason))>-1;if(e.cancellationReason&&n)return e.isSettled?p.cancellationReasonToStatusMap[e.cancellationReason]:p.SmartTransactionStatuses.PENDING}else{if((null==e?void 0:e.minedTx)===p.SmartTransactionMinedTx.SUCCESS)return p.SmartTransactionStatuses.SUCCESS;if((null==e?void 0:e.minedTx)===p.SmartTransactionMinedTx.CANCELLED)return p.SmartTransactionStatuses.CANCELLED;if((null==e?void 0:e.minedTx)===p.SmartTransactionMinedTx.REVERTED)return p.SmartTransactionStatuses.REVERTED;if((null==e?void 0:e.minedTx)===p.SmartTransactionMinedTx.UNKNOWN)return p.SmartTransactionStatuses.UNKNOWN}return p.SmartTransactionStatuses.UNKNOWN},n.generateHistoryEntry=function(e,t,n){const r=l.default.compare(e,t);return r[0]&&(n&&(r[0].note=n),r[0].timestamp=Date.now()),r},n.replayHistory=function(e){return d.default.cloneDeep(e).reduce(((e,t)=>l.default.applyPatch(e,t).newDocument))},n.snapshotFromTxMeta=function(e){const t=Object.assign({},e);return delete t.history,d.default.cloneDeep(t)};n.getStxProcessingTime=e=>e?Math.round((Date.now()-e)/1e3):undefined;n.mapKeysToCamel=e=>{if(!d.default.isObject(e))return e;const t=d.default.mapValues(e,(e=>d.default.isArray(e)?e.map(n.mapKeysToCamel):d.default.isObject(e)?(0,n.mapKeysToCamel)(e):e));return d.default.mapKeys(t,((e,t)=>d.default.camelCase(t)))},n.handleFetch=async function(e,t){const r=await fetch(e,t),s=await r.json();if(!r.ok)throw console.log("response",r),new Error(`Fetch error:${JSON.stringify(Object.assign({status:r.status},(0,n.mapKeysToCamel)(s)))}`);return s};n.isSmartTransactionCancellable=e=>e.minedTx===p.SmartTransactionMinedTx.NOT_MINED&&(!e.cancellationReason||e.cancellationReason===p.SmartTransactionCancellationReason.NOT_CANCELLED);n.incrementNonceInHex=e=>{const t=new c.BigNumber(e,16).toString(10);return(0,s.hexlify)(Number(t)+1)};n.getTxHash=e=>{var t;if(!e)return"";try{const n=(0,o.parse)(e);return null!==(t=null==n?void 0:n.hash)&&void 0!==t?t:""}catch(t){if((e=>"string"==typeof e&&e.startsWith("0x04"))(e))return(0,s.hexlify)((0,a.keccak256)((0,s.arrayify)(e)));throw t}};n.getSmartTransactionMetricsProperties=e=>{if(!e)return{};const t=e.statusMetadata;return{stx_status:e.status,type:e.type,processing_time:(0,n.getStxProcessingTime)(e.time),is_smart_transaction:!0,stx_enabled:!0,current_stx_enabled:!0,stx_user_opt_in:!0,stx_duplicated:null==t?void 0:t.duplicated,stx_timed_out:null==t?void 0:t.timedOut,stx_proxied:null==t?void 0:t.proxied}};n.getSmartTransactionMetricsSensitiveProperties=e=>e?{token_from_symbol:e.sourceTokenSymbol,token_to_symbol:e.destinationTokenSymbol,account_hardware_type:e.accountHardwareType,account_type:e.accountType,device_model:e.deviceModel}:{};n.getReturnTxHashAsap=(e,t)=>e===p.ClientId.Extension?null==t?void 0:t.extensionReturnTxHashAsap:null==t?void 0:t.mobileReturnTxHashAsap;n.shouldMarkRegularTransactionAsFailed=({smartTransaction:e,clientId:t,getFeatureFlags:r})=>{var s;const{status:a,transactionId:o}=e,i=[p.SmartTransactionStatuses.CANCELLED,p.SmartTransactionStatuses.CANCELLED_USER_CANCELLED,p.SmartTransactionStatuses.UNKNOWN,p.SmartTransactionStatuses.RESOLVED];if(!a||!i.includes(a))return!1;const{smartTransactions:c}=null!==(s=r())&&void 0!==s?s:{},l=(0,n.getReturnTxHashAsap)(t,c);return Boolean(l&&o)};n.markRegularTransactionAsFailed=({smartTransaction:e,getRegularTransactions:t,updateTransaction:n})=>{const{transactionId:r,status:s}=e,a=t().find((e=>e.id===r));if(!a)throw new Error("Cannot find regular transaction to mark it as failed");if(a.status===i.TransactionStatus.failed)return;n(Object.assign(Object.assign({},a),{status:i.TransactionStatus.failed,error:{name:"SmartTransactionFailed",message:`Smart transaction failed with status: ${s}`}}),`Smart transaction status: ${s}`)}}}},{package:"@metamask/smart-transactions-controller",file:"node_modules/@metamask/smart-transactions-controller/dist/utils.js"}],[2605,{"fast-json-stable-stringify":4490,uuid:5741},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.AbstractPollingControllerBaseMixin=n.getKey=void 0;const a=s(e("fast-json-stable-stringify")),o=e("uuid");n.getKey=e=>(0,a.default)(e),n.AbstractPollingControllerBaseMixin=function(e){var t,s;return t=new WeakMap,s=new WeakMap,class extends e{constructor(){super(...arguments),t.set(this,new Map),s.set(this,new Map)}startPolling(e){const s=(0,o.v4)(),a=(0,n.getKey)(e),i=r(this,t,"f").get(a)??new Set;return i.add(s),r(this,t,"f").set(a,i),1===i.size&&this._startPolling(e),s}stopAllPolling(){r(this,t,"f").forEach(((e,t)=>{e.forEach((e=>{this.stopPollingByPollingToken(e)}))}))}stopPollingByPollingToken(e){if(!e)throw new Error("pollingToken required");let n=null;for(const[s,a]of r(this,t,"f"))if(a.delete(e)){0===a.size&&(n=s);break}if(n){this._stopPollingByPollingTokenSetId(n),r(this,t,"f").delete(n);const e=r(this,s,"f").get(n);if(e){for(const t of e)t(JSON.parse(n));e.clear()}}}onPollingComplete(e,t){const a=(0,n.getKey)(e),o=r(this,s,"f").get(a)??new Set;o.add(t),r(this,s,"f").set(a,o)}}}}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/dist/AbstractPollingController.cjs"}],[2606,{"./AbstractPollingController.cjs":2605,"@metamask/base-controller":2612},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.BlockTrackerPollingController=n.BlockTrackerPollingControllerOnly=void 0;const s=e("@metamask/base-controller"),a=e("./AbstractPollingController.cjs");function o(e){var t;class n extends((0,a.AbstractPollingControllerBaseMixin)(e)){constructor(){super(...arguments),t.set(this,{})}_startPolling(e){const n=(0,a.getKey)(e);if(r(this,t,"f")[n])return;const s=this._getNetworkClientById(e.networkClientId);if(!s)throw new Error(`Unable to retrieve blockTracker for networkClientId ${e.networkClientId}`);{const a=this._executePoll.bind(this,e);s.blockTracker.addListener("latest",a),r(this,t,"f")[n]=a}}_stopPollingByPollingTokenSetId(e){const{networkClientId:n}=JSON.parse(e),s=this._getNetworkClientById(n);if(s&&r(this,t,"f")[e]){const n=r(this,t,"f")[e];n&&(s.blockTracker.removeListener("latest",n),delete r(this,t,"f")[e])}}}return t=new WeakMap,n}class i{}n.BlockTrackerPollingControllerOnly=()=>o(i);n.BlockTrackerPollingController=()=>o(s.BaseController)}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/dist/BlockTrackerPollingController.cjs"}],[2607,{"./AbstractPollingController.cjs":2605,"@metamask/base-controller":2612},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.StaticIntervalPollingController=n.StaticIntervalPollingControllerOnly=void 0;const a=e("@metamask/base-controller"),o=e("./AbstractPollingController.cjs");function i(e){var t,n;class a extends((0,o.AbstractPollingControllerBaseMixin)(e)){constructor(){super(...arguments),t.set(this,{}),n.set(this,1e3)}setIntervalLength(e){r(this,n,e,"f")}getIntervalLength(){return s(this,n,"f")}_startPolling(e){if(!s(this,n,"f"))throw new Error("intervalLength must be defined and greater than 0");const r=(0,o.getKey)(e),a=s(this,t,"f")[r];this._stopPollingByPollingTokenSetId(r);const i=s(this,t,"f")[r]=setTimeout((async()=>{try{await this._executePoll(e)}catch(e){console.error(e)}i===s(this,t,"f")[r]&&this._startPolling(e)}),a?s(this,n,"f"):0)}_stopPollingByPollingTokenSetId(e){const n=s(this,t,"f")[e];n&&(clearTimeout(n),delete s(this,t,"f")[e])}}return t=new WeakMap,n=new WeakMap,a}class c{}n.StaticIntervalPollingControllerOnly=()=>i(c);n.StaticIntervalPollingController=()=>i(a.BaseController)}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/dist/StaticIntervalPollingController.cjs"}],[2608,{"./BlockTrackerPollingController.cjs":2606,"./StaticIntervalPollingController.cjs":2607},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.StaticIntervalPollingController=n.StaticIntervalPollingControllerOnly=n.BlockTrackerPollingController=n.BlockTrackerPollingControllerOnly=void 0;var r=e("./BlockTrackerPollingController.cjs");Object.defineProperty(n,"BlockTrackerPollingControllerOnly",{enumerable:!0,get:function(){return r.BlockTrackerPollingControllerOnly}}),Object.defineProperty(n,"BlockTrackerPollingController",{enumerable:!0,get:function(){return r.BlockTrackerPollingController}});var s=e("./StaticIntervalPollingController.cjs");Object.defineProperty(n,"StaticIntervalPollingControllerOnly",{enumerable:!0,get:function(){return s.StaticIntervalPollingControllerOnly}}),Object.defineProperty(n,"StaticIntervalPollingController",{enumerable:!0,get:function(){return s.StaticIntervalPollingController}})}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/dist/index.cjs"}],[2609,{immer:4707},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},a=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.getPersistentState=n.getAnonymizedState=n.BaseController=n.isBaseController=void 0;const o=e("immer");(0,o.enablePatches)(),n.isBaseController=function(e){return"object"==typeof e&&null!==e&&"name"in e&&"string"==typeof e.name&&"state"in e&&"object"==typeof e.state&&"metadata"in e&&"object"==typeof e.metadata};function i(e,t,n){return Object.keys(e).reduce(((r,s)=>{try{const a=t[s];if(!a)throw new Error(`No metadata found for '${String(s)}'`);const o=a[n],i=e[s];return"function"==typeof o?r[s]=o(i):o&&(r[s]=i),r}catch(e){return setTimeout((()=>{throw e})),r}}),{})}n.BaseController=class{constructor({messenger:e,metadata:t,name:n,state:a}){r.set(this,void 0),this.messagingSystem=e,this.name=n,s(this,r,(0,o.freeze)(a,!0),"f"),this.metadata=t,this.messagingSystem.registerActionHandler(`${n}:getState`,(()=>this.state)),this.messagingSystem.registerInitialEventPayload({eventType:`${n}:stateChange`,getPayload:()=>[this.state,[]]})}get state(){return a(this,r,"f")}set state(e){throw new Error("Controller state cannot be directly mutated; use 'update' method instead.")}update(e){const[t,n,i]=o.produceWithPatches(a(this,r,"f"),e);return n.length>0&&(s(this,r,t,"f"),this.messagingSystem.publish(`${this.name}:stateChange`,t,n)),{nextState:t,patches:n,inversePatches:i}}applyPatches(e){const t=(0,o.applyPatches)(a(this,r,"f"),e);s(this,r,t,"f"),this.messagingSystem.publish(`${this.name}:stateChange`,t,e)}destroy(){this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`)}},r=new WeakMap,n.getAnonymizedState=function(e,t){return i(e,t,"anonymous")},n.getPersistentState=function(e,t){return i(e,t,"persist")}}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller>@metamask/base-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/node_modules/@metamask/base-controller/dist/BaseControllerV2.cjs"}],[261,{lodash:4912},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=e("lodash");n.default={version:35,async migrate(e){const t=(0,r.cloneDeep)(e);return t.meta.version=35,t.data=function(e){e.PreferencesController&&e.PreferencesController.seedWords!==undefined&&delete e.PreferencesController.seedWords;return e}(t.data),t}}}}},{package:"$root$",file:"app/scripts/migrations/035.js"}],[2610,{"./RestrictedMessenger.cjs":2611},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.Messenger=void 0;const c=e("./RestrictedMessenger.cjs");n.Messenger=class{constructor(){r.set(this,new Map),s.set(this,new Map),a.set(this,new Map),o.set(this,new Map)}registerActionHandler(e,t){if(i(this,r,"f").has(e))throw new Error(`A handler for ${e} has already been registered`);i(this,r,"f").set(e,t)}unregisterActionHandler(e){i(this,r,"f").delete(e)}clearActions(){i(this,r,"f").clear()}call(e,...t){const n=i(this,r,"f").get(e);if(!n)throw new Error(`A handler for ${e} has not been registered`);return n(...t)}registerInitialEventPayload({eventType:e,getPayload:t}){i(this,a,"f").set(e,t)}publish(e,...t){const n=i(this,s,"f").get(e);if(n)for(const[e,r]of n.entries())try{if(r){const n=i(this,o,"f").get(e),s=r(...t);s!==n&&(i(this,o,"f").set(e,s),e(s,n))}else e(...t)}catch(e){setTimeout((()=>{throw e}))}}subscribe(e,t,n){let r=i(this,s,"f").get(e);if(r||(r=new Map,i(this,s,"f").set(e,r)),r.set(t,n),n){const r=i(this,a,"f").get(e);if(r){const e=n(...r());i(this,o,"f").set(t,e)}}}unsubscribe(e,t){const n=i(this,s,"f").get(e);if(!n||!n.has(t))throw new Error(`Subscription not found for event: ${e}`);n.get(t)&&i(this,o,"f").delete(t),n.delete(t)}clearEventSubscriptions(e){i(this,s,"f").delete(e)}clearSubscriptions(){i(this,s,"f").clear()}getRestricted({name:e,allowedActions:t,allowedEvents:n}){return new c.RestrictedMessenger({messenger:this,name:e,allowedActions:t,allowedEvents:n})}},r=new WeakMap,s=new WeakMap,a=new WeakMap,o=new WeakMap}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller>@metamask/base-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/node_modules/@metamask/base-controller/dist/Messenger.cjs"}],[2611,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){var r,s,a,o,i,c,l,d,u=this&&this.__classPrivateFieldSet||function(e,t,n,r,s){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!s)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?s.call(e,n):s?s.value=n:t.set(e,n),n},h=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(n,"__esModule",{value:!0}),n.RestrictedMessenger=void 0;n.RestrictedMessenger=class{constructor({messenger:e,name:t,allowedActions:n,allowedEvents:c}){if(r.add(this),s.set(this,void 0),a.set(this,void 0),o.set(this,void 0),i.set(this,void 0),!e)throw new Error("Messenger not provided");u(this,s,e,"f"),u(this,a,t,"f"),u(this,o,n,"f"),u(this,i,c,"f")}registerActionHandler(e,t){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed registering action handlers prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").registerActionHandler(e,t)}unregisterActionHandler(e){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed unregistering action handlers prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").unregisterActionHandler(e)}call(e,...t){if(!h(this,r,"m",l).call(this,e))throw new Error(`Action missing from allow list: ${e}`);return h(this,s,"f").call(e,...t)}registerInitialEventPayload({eventType:e,getPayload:t}){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").registerInitialEventPayload({eventType:e,getPayload:t})}publish(e,...t){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed publishing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").publish(e,...t)}subscribe(e,t,n){if(!h(this,r,"m",c).call(this,e))throw new Error(`Event missing from allow list: ${e}`);return n?h(this,s,"f").subscribe(e,t,n):h(this,s,"f").subscribe(e,t)}unsubscribe(e,t){if(!h(this,r,"m",c).call(this,e))throw new Error(`Event missing from allow list: ${e}`);h(this,s,"f").unsubscribe(e,t)}clearEventSubscriptions(e){if(!h(this,r,"m",d).call(this,e))throw new Error(`Only allowed clearing events prefixed by '${h(this,a,"f")}:'`);h(this,s,"f").clearEventSubscriptions(e)}},s=new WeakMap,a=new WeakMap,o=new WeakMap,i=new WeakMap,r=new WeakSet,c=function(e){const t=h(this,i,"f");return h(this,r,"m",d).call(this,e)||null!==t&&t.includes(e)},l=function(e){const t=h(this,o,"f");return h(this,r,"m",d).call(this,e)||null!==t&&t.includes(e)},d=function(e){return e.startsWith(`${h(this,a,"f")}:`)}}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller>@metamask/base-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/node_modules/@metamask/base-controller/dist/RestrictedMessenger.cjs"}],[2612,{"./BaseControllerV2.cjs":2609,"./Messenger.cjs":2610,"./RestrictedMessenger.cjs":2611},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,n){Object.defineProperty(n,"__esModule",{value:!0}),n.RestrictedMessenger=n.Messenger=n.isBaseController=n.getPersistentState=n.getAnonymizedState=n.BaseController=void 0;var r=e("./BaseControllerV2.cjs");Object.defineProperty(n,"BaseController",{enumerable:!0,get:function(){return r.BaseController}}),Object.defineProperty(n,"getAnonymizedState",{enumerable:!0,get:function(){return r.getAnonymizedState}}),Object.defineProperty(n,"getPersistentState",{enumerable:!0,get:function(){return r.getPersistentState}}),Object.defineProperty(n,"isBaseController",{enumerable:!0,get:function(){return r.isBaseController}});var s=e("./Messenger.cjs");Object.defineProperty(n,"Messenger",{enumerable:!0,get:function(){return s.Messenger}});var a=e("./RestrictedMessenger.cjs");Object.defineProperty(n,"RestrictedMessenger",{enumerable:!0,get:function(){return a.RestrictedMessenger}})}}},{package:"@metamask/smart-transactions-controller>@metamask/polling-controller>@metamask/base-controller",file:"node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/polling-controller/node_modules/@metamask/base-controller/dist/index.cjs"}]],[],{});